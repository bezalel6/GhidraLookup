{
    "functions": [
        {
            "name": "GetProcessHeap",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheap",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetProcessHeaps",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheaps",
            "description": "",
            "parameters": [
                {
                    "name": "NumberOfHeaps",
                    "type": "DWORD",
                    "description": "The maximum number of heap handles that can be stored into the buffer pointed to by ProcessHeaps. [out] ProcessHeaps A pointer to a buffer that receives an array of heap handles.",
                    "possible_constants": []
                },
                {
                    "name": "ProcessHeaps",
                    "type": "PHANDLE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapAlloc",
            "return_type": "DECLSPEC_ALLOCATOR LPVOID",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap from which the memory will be allocated. This handle is returned by the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap allocation options. Specifying any of these values will override the corresponding value specified when the heap was created with HeapCreate. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwBytes",
                    "type": "SIZE_T",
                    "description": "The number of bytes to be allocated. If the heap specified by the hHeap parameter is a \"non-growable\" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the HeapCreate function with a nonzero value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapCompact",
            "return_type": "SIZE_T",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapcompact",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap. This handle is returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap access options. This parameter can be the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapCreate",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapcreate",
            "description": "",
            "parameters": [
                {
                    "name": "flOptions",
                    "type": "DWORD",
                    "description": "The heap allocation options. These options affect subsequent access to the new heap through calls to the heap functions. This parameter can be 0 or one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitialSize",
                    "type": "SIZE_T",
                    "description": "The initial size of the heap, in bytes. This value determines the initial amount of memory that is committed for the heap. The value is rounded up to a multiple of the system page size. The value must be smaller than dwMaximumSize. If this parameter is 0, the function commits one page. To determine the size of a page on the host computer, use the GetSystemInfo function.",
                    "possible_constants": []
                },
                {
                    "name": "dwMaximumSize",
                    "type": "SIZE_T",
                    "description": "The maximum size of the heap, in bytes. The HeapCreate function rounds dwMaximumSize up to a multiple of the system page size and then reserves a block of that size in the process's virtual address space for the heap. If allocation requests made by the HeapAlloc or HeapReAlloc functions exceed the size specified by dwInitialSize, the system commits additional pages of memory for the heap, up to the heap's maximum size. If dwMaximumSize is not zero, the heap size is fixed and cannot grow beyond the maximum size. Also, the largest memory block that can be allocated from the heap is slightly less than 512 KB for a 32-bit process and slightly less than 1,024 KB for a 64-bit process. Requests to allocate larger blocks fail, even if the maximum size of the heap is large enough to contain the block. If dwMaximumSize is 0, the heap can grow in size. The heap's size is limited only by the available memory. Requests to allocate memory blocks larger than the limit for a fixed-size heap do not automatically fail; instead, the system calls the VirtualAlloc function to obtain the memory that is needed for large blocks. Applications that need to allocate large memory blocks should set dwMaximumSize to 0.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapDestroy",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapdestroy",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap to be destroyed. This handle is returned by the HeapCreate function. Do not use the handle to the process heap returned by the GetProcessHeap function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapFree",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapfree",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap whose memory block is to be freed. This handle is returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap free options. Specifying the following value overrides the corresponding value specified in the flOptions parameter when the heap was created by using the HeapCreate function.",
                    "possible_constants": []
                },
                {
                    "name": "lpMem",
                    "type": "_Frees_ptr_opt_ LPVOID",
                    "description": "A pointer to the memory block to be freed. This pointer is returned by the HeapAlloc or HeapReAlloc function. This pointer can be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapLock",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heaplock",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap to be locked. This handle is returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapQueryInformation",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapqueryinformation",
            "description": "",
            "parameters": [
                {
                    "name": "HeapHandle",
                    "type": "HANDLE",
                    "description": "A handle to the heap whose information is to be retrieved. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformationClass",
                    "type": "HEAP_INFORMATION_CLASS",
                    "description": "The class of information to be retrieved. This parameter can be the following value from the HEAP_INFORMATION_CLASS enumeration type. [out] HeapInformation A pointer to a buffer that receives the heap information. The format of this data depends on the value of the HeapInformationClass parameter.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformation",
                    "type": "PVOID",
                    "description": "The size of the heap information being queried, in bytes. [out, optional] ReturnLength A pointer to a variable that receives the length of data written to the HeapInformation buffer. If the buffer is too small, the function fails and ReturnLength specifies the minimum size required for the buffer. If you do not want to receive this information, specify NULL.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformationLength",
                    "type": "SIZE_T",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "ReturnLength",
                    "type": "PSIZE_T",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapReAlloc",
            "return_type": "DECLSPEC_ALLOCATOR LPVOID",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heaprealloc",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap from which the memory is to be reallocated. This handle is a returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap reallocation options. Specifying a value overrides the corresponding value specified in the flOptions parameter when the heap was created by using the HeapCreate function. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpMem",
                    "type": "_Frees_ptr_opt_ LPVOID",
                    "description": "A pointer to the block of memory that the function reallocates. This pointer is returned by an earlier call to the HeapAlloc or HeapReAlloc function.",
                    "possible_constants": []
                },
                {
                    "name": "dwBytes",
                    "type": "SIZE_T",
                    "description": "The new size of the memory block, in bytes. A memory block's size can be increased or decreased by using this function. If the heap specified by the hHeap parameter is a \"non-growable\" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the HeapCreate function with a nonzero value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapSetInformation",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsetinformation",
            "description": "",
            "parameters": [
                {
                    "name": "HeapHandle",
                    "type": "HANDLE",
                    "description": "A handle to the heap where information is to be set. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformationClass",
                    "type": "HEAP_INFORMATION_CLASS",
                    "description": "The class of information to be set. This parameter can be one of the following values from the\nHEAP_INFORMATION_CLASS enumeration type.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformation",
                    "type": "PVOID",
                    "description": "The size of the HeapInformation buffer, in bytes.",
                    "possible_constants": []
                },
                {
                    "name": "HeapInformationLength",
                    "type": "SIZE_T",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapSize",
            "return_type": "SIZE_T",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsize",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap in which the memory block resides. This handle is returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap size options. Specifying the following value overrides the corresponding value specified in the flOptions parameter when the heap was created by using the HeapCreate function.",
                    "possible_constants": []
                },
                {
                    "name": "lpMem",
                    "type": "LPCVOID",
                    "description": "A pointer to the memory block whose size the function will obtain. This is a pointer returned by the HeapAlloc or HeapReAlloc function. The memory block must be from the heap specified by the hHeap parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapSummary",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapsummary",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap to be summarized. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap summary options.  No options are currently defined, pass zero for this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lpSummary",
                    "type": "LPHEAP_SUMMARY",
                    "description": "A pointer to a HEAP_SUMMARY structure that receives the information.  Note that you must set the cbSize member to sizeof(HEAP_SUMMARY) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapUnlock",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapunlock",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap to be unlocked. This handle is returned by either the HeapCreate or GetProcessHeap function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapValidate",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapvalidate",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap to be validated. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The heap access options. This parameter can be the following value.",
                    "possible_constants": []
                },
                {
                    "name": "lpMem",
                    "type": "LPCVOID",
                    "description": "A pointer to a memory block within the specified heap. This parameter may be NULL. If this parameter is NULL, the function attempts to validate the entire heap specified by hHeap. If this parameter is not NULL, the function attempts to validate the memory block pointed to by lpMem. It does not attempt to validate the rest of the heap.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HeapWalk",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapwalk",
            "description": "",
            "parameters": [
                {
                    "name": "hHeap",
                    "type": "HANDLE",
                    "description": "A handle to the heap. This handle is returned by either the\nHeapCreate or\nGetProcessHeap function.",
                    "possible_constants": []
                },
                {
                    "name": "lpEntry",
                    "type": "LPPROCESS_HEAP_ENTRY",
                    "description": "A pointer to a PROCESS_HEAP_ENTRY structure\nthat maintains state information for a particular heap enumeration. If the HeapWalk function succeeds, returning the value\nTRUE, this structure's members contain information about the next memory block in the\nheap. To initiate a heap enumeration, set the lpData field of the\nPROCESS_HEAP_ENTRY structure to\nNULL. To continue a particular heap enumeration, call the\nHeapWalk function repeatedly, with no changes to\nhHeap, lpEntry, or any of the members of the\nPROCESS_HEAP_ENTRY structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        }
    ]
}