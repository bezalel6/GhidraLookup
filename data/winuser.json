{
    "functions": [
        {
            "name": "ActivateKeyboardLayout",
            "return_type": "HKL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-activatekeyboardlayout",
            "description": "",
            "parameters": [
                {
                    "name": "hkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier to be activated. The input locale identifier must have been loaded by a previous call to the LoadKeyboardLayout function. This parameter must be either the handle to a keyboard layout or one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how the input locale identifier is to be activated. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AddClipboardFormatListener",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-addclipboardformatlistener",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be placed in the clipboard format listener list.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AdjustWindowRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrect",
            "description": "",
            "parameters": [
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.",
                    "possible_constants": []
                },
                {
                    "name": "bMenu",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether the window has a menu.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AdjustWindowRectEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrectex",
            "description": "",
            "parameters": [
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.",
                    "possible_constants": []
                },
                {
                    "name": "bMenu",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether the window has a menu.",
                    "possible_constants": []
                },
                {
                    "name": "dwExStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The extended window style of the window whose required size is to be calculated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AdjustWindowRectExForDpi",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-adjustwindowrectexfordpi",
            "description": "",
            "parameters": [
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "The Window Style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.",
                    "possible_constants": []
                },
                {
                    "name": "bMenu",
                    "type": "BOOL",
                    "description": "Indicates whether the window has a menu.",
                    "possible_constants": []
                },
                {
                    "name": "dwExStyle",
                    "type": "DWORD",
                    "description": "The Extended Window Style of the window whose required size is to be calculated.",
                    "possible_constants": []
                },
                {
                    "name": "dpi",
                    "type": "UINT",
                    "description": "The DPI to use for scaling.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AllowSetForegroundWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-allowsetforegroundwindow",
            "description": "",
            "parameters": [
                {
                    "name": "dwProcessId",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the process that will be enabled to set the foreground window. If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AnimateWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-animatewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to animate. The calling thread must own this window.",
                    "possible_constants": []
                },
                {
                    "name": "dwTime",
                    "type": "DWORD",
                    "description": "Type: DWORD The time it takes to play the animation, in milliseconds. Typically, an animation takes 200 milliseconds to play.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD The type of animation. This parameter can be one or more of the following values. Note that, by default, these flags take effect when showing a window. To take effect when hiding a window, use AW_HIDE and a logical OR operator with the appropriate flags.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AnyPopup",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-anypopup",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "AppendMenuA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-appendmenua",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AppendMenuW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-appendmenuw",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AreDpiAwarenessContextsEqual",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-aredpiawarenesscontextsequal",
            "description": "",
            "parameters": [
                {
                    "name": "dpiContextA",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "The first value to compare.",
                    "possible_constants": []
                },
                {
                    "name": "dpiContextB",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "The second value to compare.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ArrangeIconicWindows",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-arrangeiconicwindows",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "AttachThreadInput",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-attachthreadinput",
            "description": "",
            "parameters": [
                {
                    "name": "idAttach",
                    "type": "DWORD",
                    "description": "The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread. A thread cannot attach to itself. Therefore, idAttachTo cannot equal idAttach.",
                    "possible_constants": []
                },
                {
                    "name": "idAttachTo",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "fAttach",
                    "type": "BOOL",
                    "description": "If this parameter is TRUE, the two threads are attached. If the parameter is FALSE, the threads are detached.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BeginDeferWindowPos",
            "return_type": "HDWP",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-begindeferwindowpos",
            "description": "",
            "parameters": [
                {
                    "name": "nNumWindows",
                    "type": "int",
                    "description": "Type: int The initial number of windows for which to store position information. The DeferWindowPos function increases the size of the structure, if necessary.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BeginPaint",
            "return_type": "HDC",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-beginpaint",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window to be repainted. [out] lpPaint Pointer to the PAINTSTRUCT structure that will receive painting information.",
                    "possible_constants": []
                },
                {
                    "name": "lpPaint",
                    "type": "LPPAINTSTRUCT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BlockInput",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-blockinput",
            "description": "",
            "parameters": [
                {
                    "name": "fBlockIt",
                    "type": "BOOL",
                    "description": "Type: BOOL The function's purpose. If this parameter is TRUE, keyboard and mouse input events are blocked. If this parameter is FALSE, keyboard and mouse events are unblocked. Note that only the thread that blocked input can successfully unblock input.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BringWindowToTop",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-bringwindowtotop",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to bring to the top of the Z order.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BroadcastSystemMessage",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessage",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Type: DWORD The broadcast option. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpInfo",
                    "type": "LPDWORD",
                    "description": "Type: LPDWORD A pointer to a variable that contains and receives information about the recipients of the message. When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is NULL, the function broadcasts to all components. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BroadcastSystemMessageA",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Type: DWORD The broadcast option. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpInfo",
                    "type": "LPDWORD",
                    "description": "Type: LPDWORD A pointer to a variable that contains and receives information about the recipients of the message. When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is NULL, the function broadcasts to all components. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BroadcastSystemMessageExA",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessageexa",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Type: DWORD The broadcast option. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpInfo",
                    "type": "LPDWORD",
                    "description": "Type: LPDWORD A pointer to a variable that contains and receives information about the recipients of the message. When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is NULL, the function broadcasts to all components. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information. [out, optional] pbsmInfo Type: PBSMINFO A pointer to a BSMINFO structure that contains additional information if the request is denied and dwFlags is set to BSF_QUERY.",
                    "possible_constants": []
                },
                {
                    "name": "pbsmInfo",
                    "type": "PBSMINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BroadcastSystemMessageExW",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessageexw",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Type: DWORD The broadcast option. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpInfo",
                    "type": "LPDWORD",
                    "description": "Type: LPDWORD A pointer to a variable that contains and receives information about the recipients of the message. When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is NULL, the function broadcasts to all components. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information. [out, optional] pbsmInfo Type: PBSMINFO A pointer to a BSMINFO structure that contains additional information if the request is denied and dwFlags is set to BSF_QUERY.",
                    "possible_constants": []
                },
                {
                    "name": "pbsmInfo",
                    "type": "PBSMINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "BroadcastSystemMessageW",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Type: DWORD The broadcast option. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpInfo",
                    "type": "LPDWORD",
                    "description": "Type: LPDWORD A pointer to a variable that contains and receives information about the recipients of the message. When the function returns, this variable receives a combination of these values identifying which recipients actually received the message. If this parameter is NULL, the function broadcasts to all components. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CalculatePopupWindowPosition",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-calculatepopupwindowposition",
            "description": "",
            "parameters": [
                {
                    "name": "*anchorPoint",
                    "type": "const POINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*windowSize",
                    "type": "const SIZE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the TrackPopupMenuEx function. Use one of the following flags to specify how the function positions the pop-up window horizontally. Uses one of the following flags to specify how the function positions the pop-up window vertically. Use one of the following flags to specify whether to accommodate horizontal or vertical alignment. The following flag\nis available starting with Windows 7. [in, optional] excludeRect Type: RECT* A pointer to a structure that specifies the exclude rectangle.\nIt can be NULL. [out] popupWindowPosition Type: RECT* A pointer to a structure that specifies the pop-up window position.",
                    "possible_constants": []
                },
                {
                    "name": "*excludeRect",
                    "type": "RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*popupWindowPosition",
                    "type": "RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CallMsgFilterA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callmsgfiltera",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains the message to be passed to the hook procedures.",
                    "possible_constants": []
                },
                {
                    "name": "nCode",
                    "type": "int",
                    "description": "Type: int An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CallMsgFilterW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callmsgfilterw",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains the message to be passed to the hook procedures.",
                    "possible_constants": []
                },
                {
                    "name": "nCode",
                    "type": "int",
                    "description": "Type: int An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CallNextHookEx",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callnexthookex",
            "description": "",
            "parameters": [
                {
                    "name": "hhk",
                    "type": "HHOOK",
                    "description": "Type: HHOOK This parameter is ignored.",
                    "possible_constants": []
                },
                {
                    "name": "nCode",
                    "type": "int",
                    "description": "Type: int The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM The wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CallWindowProcA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callwindowproca",
            "description": "",
            "parameters": [
                {
                    "name": "lpPrevWndFunc",
                    "type": "WNDPROC",
                    "description": "Type: WNDPROC The previous window procedure. If this value is obtained by calling the GetWindowLong function with the nIndex parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to CallWindowProc.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window procedure to receive the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CallWindowProcW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callwindowprocw",
            "description": "",
            "parameters": [
                {
                    "name": "lpPrevWndFunc",
                    "type": "WNDPROC",
                    "description": "Type: WNDPROC The previous window procedure. If this value is obtained by calling the GetWindowLong function with the nIndex parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to CallWindowProc.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window procedure to receive the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information. The contents of this parameter depend on the value of the Msg parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CascadeWindows",
            "return_type": "WORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-cascadewindows",
            "description": "",
            "parameters": [
                {
                    "name": "hwndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed.",
                    "possible_constants": []
                },
                {
                    "name": "wHow",
                    "type": "UINT",
                    "description": "Type: UINT A cascade flag. This parameter can be one or more of the following values. [in, optional] lpRect Type: const RECT* A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. This parameter can be NULL, in which case the client area of the parent window is used.",
                    "possible_constants": []
                },
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cKids",
                    "type": "UINT",
                    "description": "Type: UINT The number of elements in the array specified by the\nlpKids parameter. This parameter is ignored if lpKids is NULL. [in, optional] lpKids Type: const HWND* An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged.",
                    "possible_constants": []
                },
                {
                    "name": "*lpKids",
                    "type": "const HWND",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeClipboardChain",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changeclipboardchain",
            "description": "",
            "parameters": [
                {
                    "name": "hWndRemove",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be removed from the chain. The handle must have been passed to the SetClipboardViewer function.",
                    "possible_constants": []
                },
                {
                    "name": "hWndNewNext",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that follows the\nhWndRemove window in the clipboard viewer chain. (This is the handle returned by SetClipboardViewer, unless the sequence was changed in response to a WM_CHANGECBCHAIN message.)",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeDisplaySettingsA",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsa",
            "description": "",
            "parameters": [
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values. Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode. If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned. If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeDisplaySettingsExA",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by EnumDisplayDevices are valid. See EnumDisplayDevices for further information on the names associated with these display devices. The lpszDeviceName parameter can be NULL. A NULL value specifies the default display device. The default device can be determined by calling EnumDisplayDevices and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag. [in] lpDevMode A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change. The dmSize member must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any of the following members of the DEVMODE structure. In addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display settings.",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": " Reserved; must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "dwflags",
                    "type": "DWORD",
                    "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values. Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them. If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned. If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPVOID",
                    "description": "If dwFlags is CDS_VIDEOPARAMETERS, lParam is a pointer to a VIDEOPARAMETERS structure. Otherwise lParam must be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeDisplaySettingsExW",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCWSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by EnumDisplayDevices are valid. See EnumDisplayDevices for further information on the names associated with these display devices. The lpszDeviceName parameter can be NULL. A NULL value specifies the default display device. The default device can be determined by calling EnumDisplayDevices and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag. [in] lpDevMode A pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change. The dmSize member must be initialized to the size, in bytes, of the DEVMODE structure. The dmDriverExtra member must be initialized to indicate the number of bytes of private driver data following the DEVMODE structure. In addition, you can use any of the following members of the DEVMODE structure. In addition to using one or more of the preceding DEVMODE members, you must also set one or more of the following values in the dmFields member to change the display settings.",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": " Reserved; must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "dwflags",
                    "type": "DWORD",
                    "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values. Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them. If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned. If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPVOID",
                    "description": "If dwFlags is CDS_VIDEOPARAMETERS, lParam is a pointer to a VIDEOPARAMETERS structure. Otherwise lParam must be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeDisplaySettingsW",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsw",
            "description": "",
            "parameters": [
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Indicates how the graphics mode should be changed. This parameter can be one of the following values. Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode. If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned. If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeWindowMessageFilter",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changewindowmessagefilter",
            "description": "",
            "parameters": [
                {
                    "name": "message",
                    "type": "UINT",
                    "description": "Type: UINT The message to add to or remove from the filter.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlag",
                    "type": "DWORD",
                    "description": "Type: DWORD The action to be performed. One of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChangeWindowMessageFilterEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changewindowmessagefilterex",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose UIPI message filter is to be modified.",
                    "possible_constants": []
                },
                {
                    "name": "message",
                    "type": "UINT",
                    "description": "Type: UINT The message that the message filter allows through or blocks.",
                    "possible_constants": []
                },
                {
                    "name": "action",
                    "type": "DWORD",
                    "description": "Type: DWORD The action to be performed, and can take one of the following values:",
                    "possible_constants": []
                },
                {
                    "name": "pChangeFilterStruct",
                    "type": "PCHANGEFILTERSTRUCT",
                    "description": "Type: PCHANGEFILTERSTRUCT Optional pointer to a CHANGEFILTERSTRUCT structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharLowerA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowera",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharLowerBuffA",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerbuffa",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A buffer containing one or more characters to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "cchLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in\ncharacters, of the buffer pointed to by\nlpsz. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of\ncharacters indicated by\ncchLength, even if one or more characters are null characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharLowerBuffW",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerbuffw",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A buffer containing one or more characters to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "cchLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in\ncharacters, of the buffer pointed to by\nlpsz. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of\ncharacters indicated by\ncchLength, even if one or more characters are null characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharLowerW",
            "return_type": "LPWSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charlowerw",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharNextA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnexta",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A character in a null-terminated string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharNextExA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnextexa",
            "description": "",
            "parameters": [
                {
                    "name": "CodePage",
                    "type": "WORD",
                    "description": "Type: WORD The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers, or one of the following predefined values.",
                    "possible_constants": []
                },
                {
                    "name": "lpCurrentChar",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR A character in a null-terminated string.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD This parameter is reserved and must be 0.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharNextW",
            "return_type": "LPWSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charnextw",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A character in a null-terminated string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharPrevA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charpreva",
            "description": "",
            "parameters": [
                {
                    "name": "lpszStart",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The beginning of the string.",
                    "possible_constants": []
                },
                {
                    "name": "lpszCurrent",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A character in a null-terminated string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharPrevExA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charprevexa",
            "description": "",
            "parameters": [
                {
                    "name": "CodePage",
                    "type": "WORD",
                    "description": "Type: WORD The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in Code Page Identifiers,  or one of the following predefined values.",
                    "possible_constants": []
                },
                {
                    "name": "lpStart",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR The beginning of the string.",
                    "possible_constants": []
                },
                {
                    "name": "lpCurrentChar",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR A character in a null-terminated string.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD This parameter is reserved and must be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharPrevW",
            "return_type": "LPWSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charprevw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszStart",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The beginning of the string.",
                    "possible_constants": []
                },
                {
                    "name": "lpszCurrent",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A character in a null-terminated string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharToOemA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooema",
            "description": "",
            "parameters": [
                {
                    "name": "pSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The null-terminated string to be translated. [out] pDst Type: LPSTR The destination buffer, which receives the translated string. If the CharToOem function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if CharToOem is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "pDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharToOemBuffA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooembuffa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The null-terminated string to be translated. [out] lpszDst Type: LPSTR The buffer for the translated string. If the CharToOemBuff function is being used as an ANSI function, the string can be translated in place by setting the lpszDst parameter to the same address as the lpszSrc parameter. This cannot be done if CharToOemBuff is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "lpszDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchDstLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The number of characters to translate in the string identified by the lpszSrc parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharToOemBuffW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooembuffw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszSrc",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The null-terminated string to be translated. [out] lpszDst Type: LPSTR The buffer for the translated string. If the CharToOemBuff function is being used as an ANSI function, the string can be translated in place by setting the lpszDst parameter to the same address as the lpszSrc parameter. This cannot be done if CharToOemBuff is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "lpszDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchDstLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The number of characters to translate in the string identified by the lpszSrc parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharToOemW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-chartooemw",
            "description": "",
            "parameters": [
                {
                    "name": "pSrc",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The null-terminated string to be translated. [out] pDst Type: LPSTR The destination buffer, which receives the translated string. If the CharToOem function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if CharToOem is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "pDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharUpperA",
            "return_type": "LPSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charuppera",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharUpperBuffA",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperbuffa",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A buffer containing one or more characters to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "cchLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by\ncchLength, even if one or more characters are null characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharUpperBuffW",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperbuffw",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A buffer containing one or more characters to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "cchLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in characters, of the buffer pointed to by lpsz. The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by\ncchLength, even if one or more characters are null characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CharUpperW",
            "return_type": "LPWSTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-charupperw",
            "description": "",
            "parameters": [
                {
                    "name": "lpsz",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CheckDlgButton",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkdlgbutton",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the button.",
                    "possible_constants": []
                },
                {
                    "name": "nIDButton",
                    "type": "int",
                    "description": "Type: int The identifier of the button to modify.",
                    "possible_constants": []
                },
                {
                    "name": "uCheck",
                    "type": "UINT",
                    "description": "Type: UINT The check state of the button. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CheckMenuItem",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkmenuitem",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu of interest.",
                    "possible_constants": []
                },
                {
                    "name": "uIDCheckItem",
                    "type": "UINT",
                    "description": "Type: UINT The menu item whose check-mark attribute is to be set, as determined by the uCheck parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uCheck",
                    "type": "UINT",
                    "description": "Type: UINT The flags that control the interpretation of the uIDCheckItem parameter and the state of the menu item's check-mark attribute. This parameter can be a combination of either MF_BYCOMMAND, or MF_BYPOSITION and MF_CHECKED or MF_UNCHECKED.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CheckMenuRadioItem",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkmenuradioitem",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the group of menu items.",
                    "possible_constants": []
                },
                {
                    "name": "first",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the first menu item in the group.",
                    "possible_constants": []
                },
                {
                    "name": "last",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the last menu item in the group.",
                    "possible_constants": []
                },
                {
                    "name": "check",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item to check.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates the meaning of idFirst, idLast, and idCheck. If this parameter is MF_BYCOMMAND, the other parameters specify menu item identifiers. If it is MF_BYPOSITION, the other parameters specify the menu item positions.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CheckRadioButton",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-checkradiobutton",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the radio button.",
                    "possible_constants": []
                },
                {
                    "name": "nIDFirstButton",
                    "type": "int",
                    "description": "Type: int The identifier of the first radio button in the group.",
                    "possible_constants": []
                },
                {
                    "name": "nIDLastButton",
                    "type": "int",
                    "description": "Type: int The identifier of the last radio button in the group.",
                    "possible_constants": []
                },
                {
                    "name": "nIDCheckButton",
                    "type": "int",
                    "description": "Type: int The identifier of the radio button to select.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChildWindowFromPoint",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-childwindowfrompoint",
            "description": "",
            "parameters": [
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window.",
                    "possible_constants": []
                },
                {
                    "name": "Point",
                    "type": "POINT",
                    "description": "Type: POINT A structure that defines the client\ncoordinates, relative to hWndParent,\nof the point to be checked.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ChildWindowFromPointEx",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-childwindowfrompointex",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window.",
                    "possible_constants": []
                },
                {
                    "name": "pt",
                    "type": "POINT",
                    "description": "Type: POINT A structure that defines the\nclient coordinates (relative to hwndParent)\nof the point to be checked.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT The child windows to be skipped. This parameter can be one or more of the\nfollowing values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ClientToScreen",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-clienttoscreen",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose client area is used for the conversion.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "A pointer to a POINT structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ClipCursor",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-clipcursor",
            "description": "",
            "parameters": [
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CloseClipboard",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closeclipboard",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CloseDesktop",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closedesktop",
            "description": "",
            "parameters": [
                {
                    "name": "hDesktop",
                    "type": "HDESK",
                    "description": "A handle to the desktop to be closed. This can be a handle returned by the\nCreateDesktop,\nOpenDesktop, or\nOpenInputDesktop functions. Do not specify the handle returned by the GetThreadDesktop function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CloseGestureInfoHandle",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closegestureinfohandle",
            "description": "",
            "parameters": [
                {
                    "name": "hGestureInfo",
                    "type": "HGESTUREINFO",
                    "description": " The gesture information handle.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CloseTouchInputHandle",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closetouchinputhandle",
            "description": "",
            "parameters": [
                {
                    "name": "hTouchInput",
                    "type": "HTOUCHINPUT",
                    "description": "The touch input handle received in the LPARAM of a touch message. The function fails with ERROR_INVALID_HANDLE if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to CloseTouchInputHandle or after it has been passed to DefWindowProc, PostMessage, SendMessage or one of their variants.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CloseWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be minimized.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CloseWindowStation",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindowstation",
            "description": "",
            "parameters": [
                {
                    "name": "hWinSta",
                    "type": "HWINSTA",
                    "description": "A handle to the window station to be closed. This handle is returned by the\nCreateWindowStation or\nOpenWindowStation function. Do not specify the handle returned by the GetProcessWindowStation function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CopyAcceleratorTableA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyacceleratortablea",
            "description": "",
            "parameters": [
                {
                    "name": "hAccelSrc",
                    "type": "HACCEL",
                    "description": "Type: HACCEL A handle to the accelerator table to copy. [out, optional] lpAccelDst Type: LPACCEL An array of ACCEL structures that receives the accelerator-table information.",
                    "possible_constants": []
                },
                {
                    "name": "lpAccelDst",
                    "type": "LPACCEL",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cAccelEntries",
                    "type": "int",
                    "description": "Type: int The number of ACCEL structures to copy to the buffer pointed to by the\nlpAccelDst parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CopyAcceleratorTableW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyacceleratortablew",
            "description": "",
            "parameters": [
                {
                    "name": "hAccelSrc",
                    "type": "HACCEL",
                    "description": "Type: HACCEL A handle to the accelerator table to copy. [out, optional] lpAccelDst Type: LPACCEL An array of ACCEL structures that receives the accelerator-table information.",
                    "possible_constants": []
                },
                {
                    "name": "lpAccelDst",
                    "type": "LPACCEL",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cAccelEntries",
                    "type": "int",
                    "description": "Type: int The number of ACCEL structures to copy to the buffer pointed to by the\nlpAccelDst parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CopyCursor",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copycursor",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CopyIcon",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyicon",
            "description": "",
            "parameters": [
                {
                    "name": "hIcon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon to be copied.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CopyImage",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyimage",
            "description": "",
            "parameters": [
                {
                    "name": "h",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the image to be copied.",
                    "possible_constants": []
                },
                {
                    "name": "type",
                    "type": "UINT",
                    "description": "Type: UINT The type of image to be copied. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "Type: int The desired width, in pixels, of the image. If this is zero, then the returned image will have the same width as the original hImage.",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "Type: int The desired height, in pixels, of the image. If this is zero, then the returned image will have the same height as the original hImage.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CopyRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprcDst",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CountClipboardFormats",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-countclipboardformats",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateAcceleratorTableA",
            "return_type": "HACCEL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createacceleratortablea",
            "description": "",
            "parameters": [
                {
                    "name": "paccel",
                    "type": "LPACCEL",
                    "description": "Type: LPACCEL An array of ACCEL structures that describes the accelerator table.",
                    "possible_constants": []
                },
                {
                    "name": "cAccel",
                    "type": "int",
                    "description": "Type: int The number of ACCEL structures in the array. This must be within the range 1 to 32767 or the function will fail.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateAcceleratorTableW",
            "return_type": "HACCEL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createacceleratortablew",
            "description": "",
            "parameters": [
                {
                    "name": "paccel",
                    "type": "LPACCEL",
                    "description": "Type: LPACCEL An array of ACCEL structures that describes the accelerator table.",
                    "possible_constants": []
                },
                {
                    "name": "cAccel",
                    "type": "int",
                    "description": "Type: int The number of ACCEL structures in the array. This must be within the range 1 to 32767 or the function will fail.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateCaret",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createcaret",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the caret.",
                    "possible_constants": []
                },
                {
                    "name": "hBitmap",
                    "type": "HBITMAP",
                    "description": "Type: HBITMAP A handle to the bitmap that defines the caret shape. If this parameter is NULL, the caret is solid. If this parameter is (HBITMAP) 1, the caret is gray. If this parameter is a bitmap handle, the caret is the specified bitmap. The bitmap handle must have been created by the CreateBitmap, CreateDIBitmap, or LoadBitmap function.\nThe caret is drawn to the screen via the XOR operation. If hBitmap is a bitmap handle, CreateCaret ignores the nWidth and nHeight parameters; the bitmap defines its own width and height.\nThe application should not delete the hBitmap until the caret is destroyed or replaced by another caret.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width of the caret, in logical units. If this parameter is zero, the width is set to the system-defined window border width. If hBitmap is a bitmap handle, CreateCaret ignores this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height of the caret, in logical units. If this parameter is zero, the height is set to the system-defined window border height. If hBitmap is a bitmap handle, CreateCaret ignores this parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateCursor",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createcursor",
            "description": "",
            "parameters": [
                {
                    "name": "hInst",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the current instance of the application creating the cursor.",
                    "possible_constants": []
                },
                {
                    "name": "xHotSpot",
                    "type": "int",
                    "description": "Type: int The horizontal position of the cursor's hot spot.",
                    "possible_constants": []
                },
                {
                    "name": "yHotSpot",
                    "type": "int",
                    "description": "Type: int The vertical position of the cursor's hot spot.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width of the cursor, in pixels.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height of the cursor, in pixels. [in] pvANDPlane Type: const VOID* An array of bytes that contains the bit values for the AND mask of the cursor, as in a monochrome bitmap. See remarks. [in] pvXORPlane Type: const VOID* An array of bytes that contains the bit values for the XOR mask of the cursor, as in a monochrome bitmap. See remarks.",
                    "possible_constants": []
                },
                {
                    "name": "*pvANDPlane",
                    "type": "const VOID",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pvXORPlane",
                    "type": "const VOID",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDesktopA",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCSTR",
                    "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
                    "possible_constants": []
                },
                {
                    "name": "lpszDevice",
                    "type": "LPCSTR",
                    "description": " Reserved; must be NULL. pDevmode Reserved; must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pDevmode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the desktop. For a list of values, see\nDesktop Security and Access Rights. This parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDesktopExA",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopexa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCSTR",
                    "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
                    "possible_constants": []
                },
                {
                    "name": "lpszDevice",
                    "type": "LPCSTR",
                    "description": " This parameter is reserved and must be NULL. pDevmode This parameter is reserved and must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pDevmode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The requested access to the desktop. For a list of values, see\nDesktop Security and Access Rights. This parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.",
                    "possible_constants": []
                },
                {
                    "name": "ulHeapSize",
                    "type": "ULONG",
                    "description": "The size of the desktop heap, in kilobytes.",
                    "possible_constants": []
                },
                {
                    "name": "pvoid",
                    "type": "PVOID",
                    "description": " This parameter is reserved and must be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDesktopExW",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopexw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCWSTR",
                    "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
                    "possible_constants": []
                },
                {
                    "name": "lpszDevice",
                    "type": "LPCWSTR",
                    "description": " This parameter is reserved and must be NULL. pDevmode This parameter is reserved and must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pDevmode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The requested access to the desktop. For a list of values, see\nDesktop Security and Access Rights. This parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.",
                    "possible_constants": []
                },
                {
                    "name": "ulHeapSize",
                    "type": "ULONG",
                    "description": "The size of the desktop heap, in kilobytes.",
                    "possible_constants": []
                },
                {
                    "name": "pvoid",
                    "type": "PVOID",
                    "description": " This parameter is reserved and must be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDesktopW",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdesktopw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCWSTR",
                    "description": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\).",
                    "possible_constants": []
                },
                {
                    "name": "lpszDevice",
                    "type": "LPCWSTR",
                    "description": " Reserved; must be NULL. pDevmode Reserved; must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pDevmode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the desktop. For a list of values, see\nDesktop Security and Access Rights. This parameter must include the DESKTOP_CREATEWINDOW access right, because internally\nCreateDesktop uses the handle to create a window.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDialogA",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialoga",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateDialogIndirectA",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirecta",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateDialogIndirectParamA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectparama",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplate",
                    "type": "LPCDLGTEMPLATEA",
                    "description": "Type: LPCDLGTEMPLATE The template CreateDialogIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format. In a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays. In an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format. After CreateDialogIndirectParam returns, you can free the template, which is only used to get the dialog box started.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDialogIndirectParamW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectparamw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplate",
                    "type": "LPCDLGTEMPLATEW",
                    "description": "Type: LPCDLGTEMPLATE The template CreateDialogIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format. In a standard template, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays. In an extended dialog box template, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format. After CreateDialogIndirectParam returns, you can free the template, which is only used to get the dialog box started.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDialogIndirectW",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogindirectw",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateDialogParamA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogparama",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplateName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to be passed to the dialog box procedure in the lParam parameter in the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDialogParamW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogparamw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplateName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to be passed to the dialog box procedure in the lParam parameter in the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateDialogW",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createdialogw",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateIcon",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createicon",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module creating the icon.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width, in pixels, of the icon. See remarks.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height, in pixels, of the icon. See remarks.",
                    "possible_constants": []
                },
                {
                    "name": "cPlanes",
                    "type": "BYTE",
                    "description": "Type: BYTE The number of planes in the XOR bitmask of the icon. See remarks.",
                    "possible_constants": []
                },
                {
                    "name": "cBitsPixel",
                    "type": "BYTE",
                    "description": "Type: BYTE The number of bits-per-pixel in the XOR bitmask of the icon. [in] lpbANDbits Type: const BYTE* An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap. See remarks. [in] lpbXORbits Type: const BYTE* An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or color bitmap. See remarks.",
                    "possible_constants": []
                },
                {
                    "name": "*lpbANDbits",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lpbXORbits",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateIconFromResource",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconfromresource",
            "description": "",
            "parameters": [
                {
                    "name": "presbits",
                    "type": "PBYTE",
                    "description": "Type: PBYTE The DWORD-aligned buffer pointer containing the icon or cursor resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectory, LookupIconIdFromDirectoryEx, and LoadResource functions. See Cursor and Icon Resources for more info on icon and cursor resource format.",
                    "possible_constants": []
                },
                {
                    "name": "dwResSize",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in bytes, of the set of bits pointed to by the presbits parameter.",
                    "possible_constants": []
                },
                {
                    "name": "fIcon",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether an icon or a cursor is to be created. If this parameter is TRUE, an icon is to be created. If it is FALSE, a cursor is to be created. The LOCALHEADER structure defines cursor hotspot and is the first data read from the cursor resource bits.",
                    "possible_constants": []
                },
                {
                    "name": "dwVer",
                    "type": "DWORD",
                    "description": "Type: DWORD The version number of the icon or cursor format for the resource bits pointed to by the presbits parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateIconFromResourceEx",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconfromresourceex",
            "description": "",
            "parameters": [
                {
                    "name": "presbits",
                    "type": "PBYTE",
                    "description": "Type: PBYTE The DWORD-aligned buffer pointer containing the icon (RT_ICON) or cursor (RT_CURSOR) resource bits. These bits are typically loaded by calls to the LookupIconIdFromDirectoryEx and LoadResource functions. See Cursor and Icon Resources for more info on icon and cursor resource format.",
                    "possible_constants": []
                },
                {
                    "name": "dwResSize",
                    "type": "DWORD",
                    "description": "Type: DWORD The size, in bytes, of the set of bits pointed to by the pbIconBits parameter.",
                    "possible_constants": []
                },
                {
                    "name": "fIcon",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether an icon or a cursor is to be created. If this parameter is TRUE, an icon is to be created. If it is FALSE, a cursor is to be created. The LOCALHEADER structure defines cursor hotspot and is the first data read from the cursor resource bits.",
                    "possible_constants": []
                },
                {
                    "name": "dwVer",
                    "type": "DWORD",
                    "description": "Type: DWORD The version number of the icon or cursor format for the resource bits pointed to by the presbits parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.",
                    "possible_constants": []
                },
                {
                    "name": "cxDesired",
                    "type": "int",
                    "description": "Type: int The width, in pixels, of the icon or cursor. If this parameter is zero and the Flags parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.",
                    "possible_constants": []
                },
                {
                    "name": "cyDesired",
                    "type": "int",
                    "description": "Type: int The height, in pixels, of the icon or cursor. If this parameter is zero and the Flags parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "UINT",
                    "description": "Type: UINT A combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateIconIndirect",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createiconindirect",
            "description": "",
            "parameters": [
                {
                    "name": "piconinfo",
                    "type": "PICONINFO",
                    "description": "Type: PICONINFO A pointer to an ICONINFO structure the function uses to create the icon or cursor.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateMDIWindowA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmdiwindowa",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The window class of the MDI child window. The class name must have been registered by a call to the RegisterClassEx function.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The window name. The system displays the name in the title bar of the child window.",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the MDI child window. If the MDI client window is created with the MDIS_ALLCHILDSTYLES window style, this parameter can be any combination of the window styles listed in the Window Styles page. Otherwise, this parameter is limited to one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT ((int)0x80000000), the MDI child window is assigned the default horizontal position.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The initial vertical position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default vertical position.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The initial width, in device units, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default width.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The initial height, in device units, of the MDI child window. If this parameter is set to CW_USEDEFAULT, the MDI child window is assigned the default height.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI client window that will be the parent of the new MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application creating the MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM An application-defined value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateMDIWindowW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmdiwindoww",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The window class of the MDI child window. The class name must have been registered by a call to the RegisterClassEx function.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The window name. The system displays the name in the title bar of the child window.",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the MDI child window. If the MDI client window is created with the MDIS_ALLCHILDSTYLES window style, this parameter can be any combination of the window styles listed in the Window Styles page. Otherwise, this parameter is limited to one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT ((int)0x80000000), the MDI child window is assigned the default horizontal position.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The initial vertical position, in client coordinates, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default vertical position.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The initial width, in device units, of the MDI child window. If this parameter is CW_USEDEFAULT, the MDI child window is assigned the default width.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The initial height, in device units, of the MDI child window. If this parameter is set to CW_USEDEFAULT, the MDI child window is assigned the default height.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI client window that will be the parent of the new MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application creating the MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM An application-defined value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateMenu",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createmenu",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreatePopupMenu",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createpopupmenu",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "CreateSyntheticPointerDevice",
            "return_type": "HSYNTHETICPOINTERDEVICE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createsyntheticpointerdevice",
            "description": "",
            "parameters": [
                {
                    "name": "pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "The pointer injection device type. Must be either PT_TOUCH or PT_PEN.",
                    "possible_constants": []
                },
                {
                    "name": "maxCount",
                    "type": "ULONG",
                    "description": "The maximum number of contacts. For PT_TOUCH this value must be greater than 0 and less than or equal to MAX_TOUCH_COUNT. For PT_PEN this value must be 1.",
                    "possible_constants": []
                },
                {
                    "name": "mode",
                    "type": "POINTER_FEEDBACK_MODE",
                    "description": "The contact visualization mode.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowa",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is either the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, nWidth and nHeight are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If nWidth is set to CW_USEDEFAULT, the system ignores nHeight.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpParam",
                    "type": "LPVOID",
                    "description": "Type: LPVOID A pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowExA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexa",
            "description": "",
            "parameters": [
                {
                    "name": "dwExStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The extended window style of the window being created. For a list of possible values, see  Extended Window Styles.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A null-terminated string or a class atom. If a null-terminated string, it specifies the window class name. The class name can be any name registered with the RegisterClass or RegisterClassEx function, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. If a class atom created by a previous call to RegisterClass or RegisterClassEx, it must be converted using the macro MAKEINTATOM. (The atom must be in the low-order word of lpClassName; the high-order word must be zero.)",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpParam",
                    "type": "LPVOID",
                    "description": "Type: LPVOID Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowExW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw",
            "description": "",
            "parameters": [
                {
                    "name": "dwExStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The extended window style of the window being created. For a list of possible values, see  Extended Window Styles.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A null-terminated string or a class atom. If a null-terminated string, it specifies the window class name. The class name can be any name registered with the RegisterClass or RegisterClassEx function, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. If a class atom created by a previous call to RegisterClass or RegisterClassEx, it must be converted using the macro MAKEINTATOM. (The atom must be in the low-order word of lpClassName; the high-order word must be zero.)",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpParam",
                    "type": "LPVOID",
                    "description": "Type: LPVOID Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowStationA",
            "return_type": "HWINSTA",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowstationa",
            "description": "",
            "parameters": [
                {
                    "name": "lpwinsta",
                    "type": "LPCSTR",
                    "description": "The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If lpwinsta is NULL or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the\nGetUserObjectInformation function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": " If this parameter is CWF_CREATE_ONLY and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station. Windows\u00a0XP/2000:\u00a0\u00a0This parameter is reserved and must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as READ_CONTROL or WRITE_DAC, and a combination of the window station-specific access rights. For more information, see Window Station Security and Access Rights.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new window station. If lpsa is NULL, the window station (and any desktops created within the window) gets a security descriptor that grants GENERIC_ALL access to all users.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowStationW",
            "return_type": "HWINSTA",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowstationw",
            "description": "",
            "parameters": [
                {
                    "name": "lpwinsta",
                    "type": "LPCWSTR",
                    "description": "The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\). Only members of the Administrators group are allowed to specify a name. If lpwinsta is NULL or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the\nGetUserObjectInformation function.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": " If this parameter is CWF_CREATE_ONLY and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station. Windows\u00a0XP/2000:\u00a0\u00a0This parameter is reserved and must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as READ_CONTROL or WRITE_DAC, and a combination of the window station-specific access rights. For more information, see Window Station Security and Access Rights.",
                    "possible_constants": []
                },
                {
                    "name": "lpsa",
                    "type": "LPSECURITY_ATTRIBUTES",
                    "description": "A pointer to a\nSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpsa is NULL, the handle cannot be inherited. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new window station. If lpsa is NULL, the window station (and any desktops created within the window) gets a security descriptor that grants GENERIC_ALL access to all users.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "CreateWindowW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindoww",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCWSTR A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCWSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\".",
                    "possible_constants": []
                },
                {
                    "name": "dwStyle",
                    "type": "DWORD",
                    "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is either the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, nWidth and nHeight are set to zero.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If nWidth is set to CW_USEDEFAULT, the system ignores nHeight.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpParam",
                    "type": "LPVOID",
                    "description": "Type: LPVOID A pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefDlgProcA",
            "return_type": "LRESULT LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defdlgproca",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefDlgProcW",
            "return_type": "LRESULT LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defdlgprocw",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DeferWindowPos",
            "return_type": "HDWP",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deferwindowpos",
            "description": "",
            "parameters": [
                {
                    "name": "hWinPosInfo",
                    "type": "HDWP",
                    "description": "Type: HDWP A handle to a multiple-window\n\u00e2\u0080\u0093 position structure that contains size and position information for one or more windows. This structure is returned by BeginDeferWindowPos or by the most recent call to DeferWindowPos.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that precedes the positioned window in the Z order. This parameter must be a window handle or one of the following values. This parameter is ignored if the SWP_NOZORDER flag is set in the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "hWndInsertAfter",
                    "type": "HWND",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "Type: int The window's new width, in pixels.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "Type: int The window's new height, in pixels.",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT A combination of the following values that affect the size and position of the window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefFrameProcA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defframeproca",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI client window.",
                    "possible_constants": []
                },
                {
                    "name": "hWndMDIClient",
                    "type": "HWND",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uMsg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefFrameProcW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defframeprocw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI client window.",
                    "possible_constants": []
                },
                {
                    "name": "hWndMDIClient",
                    "type": "HWND",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uMsg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefMDIChildProcA",
            "return_type": "LRESULT LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defmdichildproca",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "uMsg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefMDIChildProcW",
            "return_type": "LRESULT LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defmdichildprocw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI child window.",
                    "possible_constants": []
                },
                {
                    "name": "uMsg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be processed.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefRawInputProc",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defrawinputproc",
            "description": "",
            "parameters": [
                {
                    "name": "*paRawInput",
                    "type": "PRAWINPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nInput",
                    "type": "INT",
                    "description": "Type: INT Ignored.",
                    "possible_constants": []
                },
                {
                    "name": "cbSizeHeader",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefWindowProcA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defwindowproca",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window procedure that received the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DefWindowProcW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defwindowprocw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window procedure that received the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DeleteMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deletemenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be deleted, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DeregisterShellHookWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-deregistershellhookwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be unregistered. The window was registered with a call to the\nRegisterShellHookWindow function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroyAcceleratorTable",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroyacceleratortable",
            "description": "",
            "parameters": [
                {
                    "name": "hAccel",
                    "type": "HACCEL",
                    "description": "Type: HACCEL A handle to the accelerator table to be destroyed. This handle must have been created by a call to the CreateAcceleratorTable or LoadAccelerators function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroyCaret",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroycaret",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DestroyCursor",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroycursor",
            "description": "",
            "parameters": [
                {
                    "name": "hCursor",
                    "type": "HCURSOR",
                    "description": "Type: HCURSOR A handle to the cursor to be destroyed. The cursor must not be in use.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroyIcon",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroyicon",
            "description": "",
            "parameters": [
                {
                    "name": "hIcon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon to be destroyed. The icon must not be in use.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroyMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroymenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be destroyed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroySyntheticPointerDevice",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroysyntheticpointerdevice",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HSYNTHETICPOINTERDEVICE",
                    "description": "A handle to the pointer injection device.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DestroyWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroywindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be destroyed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DialogBoxA",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxa",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DialogBoxIndirectA",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirecta",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DialogBoxIndirectParamA",
            "return_type": "INT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectparama",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module that creates the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "hDialogTemplate",
                    "type": "LPCDLGTEMPLATEA",
                    "description": "Type: LPCDLGTEMPLATE The template that DialogBoxIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format. In a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays. In an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DialogBoxIndirectParamW",
            "return_type": "INT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectparamw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module that creates the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "hDialogTemplate",
                    "type": "LPCDLGTEMPLATEW",
                    "description": "Type: LPCDLGTEMPLATE The template that DialogBoxIndirectParam uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format. In a standard template for a dialog box, the header is a DLGTEMPLATE structure followed by additional variable-length arrays. The data for each control consists of a DLGITEMTEMPLATE structure followed by additional variable-length arrays. In an extended template for a dialog box, the header uses the DLGTEMPLATEEX format and the control definitions use the DLGITEMTEMPLATEEX format.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DialogBoxIndirectW",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxindirectw",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DialogBoxParamA",
            "return_type": "INT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxparama",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplateName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DialogBoxParamW",
            "return_type": "INT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxparamw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpTemplateName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the MAKEINTRESOURCE macro to create this value.",
                    "possible_constants": []
                },
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpDialogFunc",
                    "type": "DLGPROC",
                    "description": "Type: DLGPROC A pointer to the dialog box procedure. For more information about the dialog box procedure, see DialogProc.",
                    "possible_constants": []
                },
                {
                    "name": "dwInitParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to pass to the dialog box in the lParam parameter of the WM_INITDIALOG message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DialogBoxW",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxw",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DisableProcessWindowsGhosting",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-disableprocesswindowsghosting",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "DispatchMessage",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessage",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMsg",
                    "type": "const MSG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DispatchMessageA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMsg",
                    "type": "const MSG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DispatchMessageW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMsg",
                    "type": "const MSG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DisplayConfigGetDeviceInfo",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-displayconfiggetdeviceinfo",
            "description": "",
            "parameters": [
                {
                    "name": "*requestPacket",
                    "type": "DISPLAYCONFIG_DEVICE_INFO_HEADER",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DisplayConfigSetDeviceInfo",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-displayconfigsetdeviceinfo",
            "description": "",
            "parameters": [
                {
                    "name": "*setPacket",
                    "type": "DISPLAYCONFIG_DEVICE_INFO_HEADER",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirListA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlista",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the list box.",
                    "possible_constants": []
                },
                {
                    "name": "lpPathSpec",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename\\sharename). The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory. If the string includes a filename, the filename must contain at least one wildcard character (? or *). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (*) as the filename. All names in the specified directory that match the filename and have the attributes specified by the uFileType parameter are added to the list box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDListBox",
                    "type": "int",
                    "description": "Type: int The identifier of a list box in the hDlg dialog box. If this parameter is zero, DlgDirList does not try to fill a list box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDStaticPath",
                    "type": "int",
                    "description": "Type: int The identifier of a static control in the hDlg dialog box. DlgDirList sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.",
                    "possible_constants": []
                },
                {
                    "name": "uFileType",
                    "type": "UINT",
                    "description": "Type: UINT Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirListComboBoxA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistcomboboxa",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the combo box.",
                    "possible_constants": []
                },
                {
                    "name": "lpPathSpec",
                    "type": "LPSTR",
                    "description": "Type: LPTSTR A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:\\) or a UNC name (for example, \\\\machinename\\sharename). The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory. If the string includes a file name, the file name must contain at least one wildcard character (? or ). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character () as the file name. All names in the specified directory that match the file name and have the attributes specified by the uFiletype parameter are added to the list displayed in the combo box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDComboBox",
                    "type": "int",
                    "description": "Type: int The identifier of a combo box in the hDlg dialog box. If this parameter is zero, DlgDirListComboBox does not try to fill a combo box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDStaticPath",
                    "type": "int",
                    "description": "Type: int The identifier of a static control in the hDlg dialog box. DlgDirListComboBox sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.",
                    "possible_constants": []
                },
                {
                    "name": "uFiletype",
                    "type": "UINT",
                    "description": "Type: UINT A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirListComboBoxW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistcomboboxw",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the combo box.",
                    "possible_constants": []
                },
                {
                    "name": "lpPathSpec",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:\\) or a UNC name (for example, \\\\machinename\\sharename). The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory. If the string includes a file name, the file name must contain at least one wildcard character (? or ). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character () as the file name. All names in the specified directory that match the file name and have the attributes specified by the uFiletype parameter are added to the list displayed in the combo box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDComboBox",
                    "type": "int",
                    "description": "Type: int The identifier of a combo box in the hDlg dialog box. If this parameter is zero, DlgDirListComboBox does not try to fill a combo box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDStaticPath",
                    "type": "int",
                    "description": "Type: int The identifier of a static control in the hDlg dialog box. DlgDirListComboBox sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.",
                    "possible_constants": []
                },
                {
                    "name": "uFiletype",
                    "type": "UINT",
                    "description": "Type: UINT A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirListW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirlistw",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the list box.",
                    "possible_constants": []
                },
                {
                    "name": "lpPathSpec",
                    "type": "LPWSTR",
                    "description": "Type: LPTSTR A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\\nmachinename\nsharename). The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory. If the string includes a filename, the filename must contain at least one wildcard character (? or ). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character () as the filename. All names in the specified directory that match the filename and have the attributes specified by the\nuFileType parameter are added to the list box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDListBox",
                    "type": "int",
                    "description": "Type: int The identifier of a list box in the\nhDlg dialog box. If this parameter is zero, DlgDirList does not try to fill a list box.",
                    "possible_constants": []
                },
                {
                    "name": "nIDStaticPath",
                    "type": "int",
                    "description": "Type: int The identifier of a static control in the\nhDlg dialog box. DlgDirList sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.",
                    "possible_constants": []
                },
                {
                    "name": "uFileType",
                    "type": "UINT",
                    "description": "Type: UINT Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirSelectComboBoxExA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectcomboboxexa",
            "description": "",
            "parameters": [
                {
                    "name": "hwndDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the combo box. [out] lpString Type: LPTSTR A pointer to the buffer that receives the selected path.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchOut",
                    "type": "int",
                    "description": "Type: int The length, in characters, of the buffer pointed to by the lpString parameter.",
                    "possible_constants": []
                },
                {
                    "name": "idComboBox",
                    "type": "int",
                    "description": "Type: int The integer identifier of the combo box control in the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirSelectComboBoxExW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectcomboboxexw",
            "description": "",
            "parameters": [
                {
                    "name": "hwndDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the combo box. [out] lpString Type: LPTSTR A pointer to the buffer that receives the selected path.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchOut",
                    "type": "int",
                    "description": "Type: int The length, in characters, of the buffer pointed to by the lpString parameter.",
                    "possible_constants": []
                },
                {
                    "name": "idComboBox",
                    "type": "int",
                    "description": "Type: int The integer identifier of the combo box control in the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirSelectExA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectexa",
            "description": "",
            "parameters": [
                {
                    "name": "hwndDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the list box. [out] lpString Type: LPTSTR A pointer to a buffer that receives the selected path.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "Type: int The length, in\nTCHARs, of the buffer pointed to by\nlpString.",
                    "possible_constants": []
                },
                {
                    "name": "idListBox",
                    "type": "int",
                    "description": "Type: int The identifier of a list box in the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DlgDirSelectExW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dlgdirselectexw",
            "description": "",
            "parameters": [
                {
                    "name": "hwndDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the list box. [out] lpString Type: LPTSTR A pointer to a buffer that receives the selected path.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "Type: int The length, in\nTCHARs, of the buffer pointed to by\nlpString.",
                    "possible_constants": []
                },
                {
                    "name": "idListBox",
                    "type": "int",
                    "description": "Type: int The identifier of a list box in the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DragDetect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dragdetect",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window receiving mouse input.",
                    "possible_constants": []
                },
                {
                    "name": "pt",
                    "type": "POINT",
                    "description": "Type: POINT Initial position of the mouse, in screen coordinates. The function determines the coordinates of the drag rectangle by using this point.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawAnimatedRects",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawanimatedrects",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window.",
                    "possible_constants": []
                },
                {
                    "name": "idAni",
                    "type": "int",
                    "description": "The type of animation. This must be IDANI_CAPTION. With the IDANI_CAPTION animation type, the window caption will animate from the position specified by lprcFrom to the position specified by lprcTo. The effect is similar to minimizing or maximizing a window. lprcFrom A pointer to a RECT structure specifying the location and size of the icon or minimized window. Coordinates are relative to the clipping window hwnd. lprcTo A pointer to a RECT structure specifying the location and size of the restored window. Coordinates are relative to the clipping window hwnd.",
                    "possible_constants": []
                },
                {
                    "name": "*lprcFrom",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcTo",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawCaption",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawcaption",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "A handle to a window that supplies text and an icon for the window caption.",
                    "possible_constants": []
                },
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to a device context. The function draws the window caption into this device context. [in] lprect A pointer to a RECT structure that specifies the bounding rectangle for the window caption in logical coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "*lprect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "The drawing options. This parameter can be zero or more of the following values. If DC_SMALLCAP is specified, the function draws a normal window caption.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawEdge",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawedge",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "qrc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the logical coordinates of the rectangle.",
                    "possible_constants": []
                },
                {
                    "name": "edge",
                    "type": "UINT",
                    "description": "The type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag. The inner-border flags are as follows. The outer-border flags are as follows. Alternatively, the edge parameter can specify one of the following flags.",
                    "possible_constants": []
                },
                {
                    "name": "grfFlags",
                    "type": "UINT",
                    "description": "The type of border. This parameter can be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawFocusRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawfocusrect",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context. [in] lprc A pointer to a RECT structure that specifies the logical coordinates of the rectangle.",
                    "possible_constants": []
                },
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawFrameControl",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawframecontrol",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context of the window in which to draw the control.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the logical coordinates of the bounding rectangle for frame control.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "The type of frame control to draw. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uState",
                    "type": "UINT",
                    "description": "The initial state of the frame control. If uType is DFC_BUTTON, uState can be one of the following values. If uType is DFC_CAPTION, uState can be one of the following values. If uType is DFC_MENU, uState can be one of the following values. If uType is DFC_SCROLL, uState can be one of the following values. The following style can be used to adjust the bounding rectangle of the push button. One or more of the following values can be used to set the state of the control to be drawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawIcon",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawicon",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "Type: HDC A handle to the device context into which the icon or cursor will be drawn.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The logical x-coordinate of the upper-left corner of the icon.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The logical y-coordinate of the upper-left corner of the icon.",
                    "possible_constants": []
                },
                {
                    "name": "hIcon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon to be drawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawIconEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawiconex",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "Type: HDC A handle to the device context into which the icon or cursor will be drawn.",
                    "possible_constants": []
                },
                {
                    "name": "xLeft",
                    "type": "int",
                    "description": "Type: int The logical x-coordinate of the upper-left corner of the icon or cursor.",
                    "possible_constants": []
                },
                {
                    "name": "yTop",
                    "type": "int",
                    "description": "Type: int The logical y-coordinate of the upper-left corner of the icon or cursor.",
                    "possible_constants": []
                },
                {
                    "name": "hIcon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon or cursor to be drawn. This parameter can identify an animated cursor.",
                    "possible_constants": []
                },
                {
                    "name": "cxWidth",
                    "type": "int",
                    "description": "Type: int The logical width of the icon or cursor. If this parameter is zero and the diFlags parameter is DI_DEFAULTSIZE, the function uses the SM_CXICON system metric value to set the width. If this parameter is zero and DI_DEFAULTSIZE is not used, the function uses the actual resource width.",
                    "possible_constants": []
                },
                {
                    "name": "cyWidth",
                    "type": "int",
                    "description": "Type: int The logical height of the icon or cursor. If this parameter is zero and the diFlags parameter is DI_DEFAULTSIZE, the function uses the SM_CYICON system metric value to set the width. If this parameter is zero and DI_DEFAULTSIZE is not used, the function uses the actual resource height.",
                    "possible_constants": []
                },
                {
                    "name": "istepIfAniCur",
                    "type": "UINT",
                    "description": "Type: UINT The index of the frame to draw, if hIcon identifies an animated cursor. This parameter is ignored if hIcon does not identify an animated cursor.",
                    "possible_constants": []
                },
                {
                    "name": "hbrFlickerFreeDraw",
                    "type": "HBRUSH",
                    "description": "Type: HBRUSH A handle to a brush that the system uses for flicker-free drawing. If hbrFlickerFreeDraw is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by hdc. If hbrFlickerFreeDraw is NULL, the system draws the icon or cursor directly into the device context.",
                    "possible_constants": []
                },
                {
                    "name": "diFlags",
                    "type": "UINT",
                    "description": "Type: UINT The drawing flags. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawMenuBar",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawmenubar",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose menu bar is to be redrawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawStateA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawstatea",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context to draw in.",
                    "possible_constants": []
                },
                {
                    "name": "hbrFore",
                    "type": "HBRUSH",
                    "description": "A handle to the brush used to draw the image, if the state specified by the fuFlags parameter is DSS_MONO. This parameter is ignored for other states.",
                    "possible_constants": []
                },
                {
                    "name": "qfnCallBack",
                    "type": "DRAWSTATEPROC",
                    "description": "A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in fuFlags is DST_COMPLEX. It is optional and can be NULL if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the DrawStateProc function.",
                    "possible_constants": []
                },
                {
                    "name": "lData",
                    "type": "LPARAM",
                    "description": "Information about the image. The meaning of this parameter depends on the image type.",
                    "possible_constants": []
                },
                {
                    "name": "wData",
                    "type": "WPARAM",
                    "description": "Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the DrawStateProc function.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "The image type and state. This parameter can be one of the following type values. This parameter can also be one of the following state values. For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawStateW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawstatew",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context to draw in.",
                    "possible_constants": []
                },
                {
                    "name": "hbrFore",
                    "type": "HBRUSH",
                    "description": "A handle to the brush used to draw the image, if the state specified by the fuFlags parameter is DSS_MONO. This parameter is ignored for other states.",
                    "possible_constants": []
                },
                {
                    "name": "qfnCallBack",
                    "type": "DRAWSTATEPROC",
                    "description": "A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in fuFlags is DST_COMPLEX. It is optional and can be NULL if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the DrawStateProc function.",
                    "possible_constants": []
                },
                {
                    "name": "lData",
                    "type": "LPARAM",
                    "description": "Information about the image. The meaning of this parameter depends on the image type.",
                    "possible_constants": []
                },
                {
                    "name": "wData",
                    "type": "WPARAM",
                    "description": "Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the DrawStateProc function.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "The image type and state. This parameter can be one of the following type values. This parameter can also be one of the following state values. For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawText",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtext",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "lpchText",
                    "type": "LPCTSTR",
                    "description": "A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated. If uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.",
                    "possible_constants": []
                },
                {
                    "name": "cchText",
                    "type": "int",
                    "description": "The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.",
                    "possible_constants": []
                },
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "The method of formatting the text. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawTextA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtexta",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "lpchText",
                    "type": "LPCSTR",
                    "description": "A pointer to the string that specifies the text to be drawn. If the cchText parameter is -1, the string must be null-terminated. If uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.",
                    "possible_constants": []
                },
                {
                    "name": "cchText",
                    "type": "int",
                    "description": "The length, in characters, of the string. If cchText is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.",
                    "possible_constants": []
                },
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "The method of formatting the text. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawTextExA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextexa",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context in which to draw.",
                    "possible_constants": []
                },
                {
                    "name": "lpchText",
                    "type": "LPSTR",
                    "description": "A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated. If dwDTFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.",
                    "possible_constants": []
                },
                {
                    "name": "cchText",
                    "type": "int",
                    "description": "The length of the string pointed to by lpchText. If cchText is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawTextEx computes the character count automatically.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.",
                    "possible_constants": []
                },
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "The formatting options. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpdtp",
                    "type": "LPDRAWTEXTPARAMS",
                    "description": "A pointer to a DRAWTEXTPARAMS structure that specifies additional formatting options. This parameter can be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawTextExW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextexw",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context in which to draw.",
                    "possible_constants": []
                },
                {
                    "name": "lpchText",
                    "type": "LPWSTR",
                    "description": "A pointer to the string that contains the text to draw. If the cchText parameter is -1, the string must be null-terminated. If dwDTFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.",
                    "possible_constants": []
                },
                {
                    "name": "cchText",
                    "type": "int",
                    "description": "The length of the string pointed to by lpchText. If cchText is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawTextEx computes the character count automatically.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.",
                    "possible_constants": []
                },
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "The formatting options. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpdtp",
                    "type": "LPDRAWTEXTPARAMS",
                    "description": "A pointer to a DRAWTEXTPARAMS structure that specifies additional formatting options. This parameter can be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "DrawTextW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextw",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "lpchText",
                    "type": "LPCWSTR",
                    "description": "A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated. If uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.",
                    "possible_constants": []
                },
                {
                    "name": "cchText",
                    "type": "int",
                    "description": "The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.",
                    "possible_constants": []
                },
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "The method of formatting the text. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EmptyClipboard",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-emptyclipboard",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "EnableMenuItem",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablemenuitem",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu.",
                    "possible_constants": []
                },
                {
                    "name": "uIDEnableItem",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "uEnable",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnableMouseInPointer",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablemouseinpointer",
            "description": "",
            "parameters": [
                {
                    "name": "fEnable",
                    "type": "BOOL",
                    "description": "TRUE to turn on mouse input support in WM_POINTER.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnableNonClientDpiScaling",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablenonclientdpiscaling",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window that should have automatic scaling enabled.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnableScrollBar",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablescrollbar",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a window or a scroll bar control, depending on the value of the\nwSBflags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "wSBflags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies the scroll bar type. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "wArrows",
                    "type": "UINT",
                    "description": "Type: UINT Specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnableWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enablewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be enabled or disabled.",
                    "possible_constants": []
                },
                {
                    "name": "bEnable",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether to enable or disable the window. If this parameter is TRUE, the window is enabled. If the parameter is FALSE, the window is disabled.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EndDeferWindowPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enddeferwindowpos",
            "description": "",
            "parameters": [
                {
                    "name": "hWinPosInfo",
                    "type": "HDWP",
                    "description": "Type: HDWP A handle to a multiple-window\n\u00e2\u0080\u0093 position structure that contains size and position information for one or more windows. This internal structure is returned by the BeginDeferWindowPos function or by the most recent call to the DeferWindowPos function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EndDialog",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enddialog",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box to be destroyed.",
                    "possible_constants": []
                },
                {
                    "name": "nResult",
                    "type": "INT_PTR",
                    "description": "Type: INT_PTR The value to be returned to the application from the function that created the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EndMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endmenu",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "EndPaint",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endpaint",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window that has been repainted. [in] lpPaint Pointer to a PAINTSTRUCT structure that contains the painting information retrieved by BeginPaint.",
                    "possible_constants": []
                },
                {
                    "name": "*lpPaint",
                    "type": "const PAINTSTRUCT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EndTask",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-endtask",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be closed.",
                    "possible_constants": []
                },
                {
                    "name": "fShutDown",
                    "type": "BOOL",
                    "description": "Type: BOOL Ignored. Must be FALSE.",
                    "possible_constants": []
                },
                {
                    "name": "fForce",
                    "type": "BOOL",
                    "description": "Type: BOOL A TRUE for this parameter will force the destruction of the\nwindow if an initial attempt fails to gently close the window using WM_CLOSE.\nWith a FALSE for this parameter, only the close with WM_CLOSE is attempted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumChildWindows",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumchildwindows",
            "description": "",
            "parameters": [
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "WNDENUMPROC",
                    "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumChildProc.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumClipboardFormats",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumclipboardformats",
            "description": "",
            "parameters": [
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "Type: UINT A clipboard format that is known to be available. To start an enumeration of clipboard formats, set\nformat to zero. When\nformat is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set\nformat to the result of the previous\nEnumClipboardFormats call.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDesktopsA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopsa",
            "description": "",
            "parameters": [
                {
                    "name": "hwinsta",
                    "type": "HWINSTA",
                    "description": "A handle to the window station whose desktops are to be enumerated. This handle is returned by the\nCreateWindowStation,\nGetProcessWindowStation, or\nOpenWindowStation function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see\nWindow Station Security and Access Rights. If this parameter is NULL, the current window station is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "DESKTOPENUMPROCA",
                    "description": "A pointer to an application-defined\nEnumDesktopProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDesktopsW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopsw",
            "description": "",
            "parameters": [
                {
                    "name": "hwinsta",
                    "type": "HWINSTA",
                    "description": "A handle to the window station whose desktops are to be enumerated. This handle is returned by the\nCreateWindowStation,\nGetProcessWindowStation, or\nOpenWindowStation function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see\nWindow Station Security and Access Rights. If this parameter is NULL, the current window station is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "DESKTOPENUMPROCW",
                    "description": "A pointer to an application-defined\nEnumDesktopProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDesktopWindows",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdesktopwindows",
            "description": "",
            "parameters": [
                {
                    "name": "hDesktop",
                    "type": "HDESK",
                    "description": "A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the\nCreateDesktop,\nGetThreadDesktop, OpenDesktop, or\nOpenInputDesktop function, and must have the DESKTOP_READOBJECTS access right. For more information, see\nDesktop Security and Access Rights. If this parameter is NULL, the current desktop is used.",
                    "possible_constants": []
                },
                {
                    "name": "lpfn",
                    "type": "WNDENUMPROC",
                    "description": "A pointer to an application-defined\nEnumWindowsProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplayDevicesA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesa",
            "description": "",
            "parameters": [
                {
                    "name": "lpDevice",
                    "type": "LPCSTR",
                    "description": "A pointer to the device name. If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum. For more information, see Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "iDevNum",
                    "type": "DWORD",
                    "description": "An index value that specifies the display device of interest. The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2. [out] lpDisplayDevice A pointer to a DISPLAY_DEVICE structure that receives information about the display device specified by iDevNum. Before calling EnumDisplayDevices, you must initialize the cb member of DISPLAY_DEVICE to the size, in bytes, of DISPLAY_DEVICE.",
                    "possible_constants": []
                },
                {
                    "name": "lpDisplayDevice",
                    "type": "PDISPLAY_DEVICEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the DISPLAY_DEVICE structure returned in lpDisplayDevice. The resulting device interface name can be used with SetupAPI functions and serves as a link between GDI monitor devices and SetupAPI monitor devices.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplayDevicesW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesw",
            "description": "",
            "parameters": [
                {
                    "name": "lpDevice",
                    "type": "LPCWSTR",
                    "description": "A pointer to the device name. If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum. For more information, see Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "iDevNum",
                    "type": "DWORD",
                    "description": "An index value that specifies the display device of interest. The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2. [out] lpDisplayDevice A pointer to a DISPLAY_DEVICE structure that receives information about the display device specified by iDevNum. Before calling EnumDisplayDevices, you must initialize the cb member of DISPLAY_DEVICE to the size, in bytes, of DISPLAY_DEVICE.",
                    "possible_constants": []
                },
                {
                    "name": "lpDisplayDevice",
                    "type": "PDISPLAY_DEVICEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the DISPLAY_DEVICE structure returned in lpDisplayDevice. The resulting device interface name can be used with SetupAPI functions and serves as a link between GDI monitor devices and SetupAPI monitor devices.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplayMonitors",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to a display device context that defines the visible region of interest. If this parameter is NULL, the hdcMonitor parameter passed to the callback function will be NULL, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.",
                    "possible_constants": []
                },
                {
                    "name": "lprcClip",
                    "type": "LPCRECT",
                    "description": "A pointer to a RECT structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by hdc. If hdc is non-NULL, the coordinates of the clipping rectangle are relative to the origin of the hdc. If hdc is NULL, the coordinates are virtual-screen coordinates. This parameter can be NULL if you don't want to clip the region specified by hdc.",
                    "possible_constants": []
                },
                {
                    "name": "lpfnEnum",
                    "type": "MONITORENUMPROC",
                    "description": "A pointer to a MonitorEnumProc application-defined callback function.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "LPARAM",
                    "description": "Application-defined data that EnumDisplayMonitors passes directly to the MonitorEnumProc function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplaySettingsA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer on which the calling thread is running.",
                    "possible_constants": []
                },
                {
                    "name": "iModeNum",
                    "type": "DWORD",
                    "description": "The type of information to be retrieved. This value can be a graphics mode index or one of the following values. Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettings, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero. When you call EnumDisplaySettings with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettings with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero. [out] lpDevMode A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettings, set the dmSize member to sizeof(DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data. The EnumDisplaySettings function sets values for the following five DEVMODE members:",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplaySettingsExA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsexa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer that the calling thread is running on.",
                    "possible_constants": []
                },
                {
                    "name": "iModeNum",
                    "type": "DWORD",
                    "description": "Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values. Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettingsEx, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero. When you call EnumDisplaySettingsEx with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettingsEx with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero. [out] lpDevMode A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettingsEx, set the dmSize member to sizeof (DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data. The EnumDisplaySettingsEx function will populate the dmFields member of the lpDevMode and one or more other members of the DEVMODE structure. To determine which members were set by the call to EnumDisplaySettingsEx, inspect the dmFields bitmask. Some of the fields typically populated by this function include:",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEA",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplaySettingsExW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsexw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCWSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE. DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer that the calling thread is running on.",
                    "possible_constants": []
                },
                {
                    "name": "iModeNum",
                    "type": "DWORD",
                    "description": "Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values. Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettingsEx, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero. When you call EnumDisplaySettingsEx with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettingsEx with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero. [out] lpDevMode A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettingsEx, set the dmSize member to sizeof (DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data. The EnumDisplaySettingsEx function will populate the dmFields member of the lpDevMode and one or more other members of the DEVMODE structure. To determine which members were set by the call to EnumDisplaySettingsEx, inspect the dmFields bitmask. Some of the fields typically populated by this function include:",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumDisplaySettingsW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaysettingsw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDeviceName",
                    "type": "LPCWSTR",
                    "description": "A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information. This parameter is either NULL or a DISPLAY_DEVICE.DeviceName returned from EnumDisplayDevices. A NULL value specifies the current display device on the computer on which the calling thread is running.",
                    "possible_constants": []
                },
                {
                    "name": "iModeNum",
                    "type": "DWORD",
                    "description": "The type of information to be retrieved. This value can be a graphics mode index or one of the following values. Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to EnumDisplaySettings, as follows: Set iModeNum to zero for the first call, and increment iModeNum by one for each subsequent call. Continue calling the function until the return value is zero. When you call EnumDisplaySettings with iModeNum set to zero, the operating system initializes and caches information about the display device. When you call EnumDisplaySettings with iModeNum set to a nonzero value, the function returns the information that was cached the last time the function was called with iModeNum set to zero. [out] lpDevMode A pointer to a DEVMODE structure into which the function stores information about the specified graphics mode. Before calling EnumDisplaySettings, set the dmSize member to sizeof(DEVMODE), and set the dmDriverExtra member to indicate the size, in bytes, of the additional space available to receive private driver data. The EnumDisplaySettings function sets values for the following five DEVMODE members:",
                    "possible_constants": []
                },
                {
                    "name": "*lpDevMode",
                    "type": "DEVMODEW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumPropsA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be enumerated.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "PROPENUMPROCA",
                    "description": "Type: PROPENUMPROC A pointer to the callback function. For more information about the callback function, see the PropEnumProc function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumPropsExA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsexa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be enumerated.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "PROPENUMPROCEXA",
                    "description": "Type: PROPENUMPROCEX A pointer to the callback function. For more information about the callback function, see the PropEnumProcEx function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Application-defined data to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumPropsExW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsexw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be enumerated.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "PROPENUMPROCEXW",
                    "description": "Type: PROPENUMPROCEX A pointer to the callback function. For more information about the callback function, see the PropEnumProcEx function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Application-defined data to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumPropsW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumpropsw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be enumerated.",
                    "possible_constants": []
                },
                {
                    "name": "lpEnumFunc",
                    "type": "PROPENUMPROCW",
                    "description": "Type: PROPENUMPROC A pointer to the callback function. For more information about the callback function, see the PropEnumProc function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumThreadWindows",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumthreadwindows",
            "description": "",
            "parameters": [
                {
                    "name": "dwThreadId",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread whose windows are to be enumerated.",
                    "possible_constants": []
                },
                {
                    "name": "lpfn",
                    "type": "WNDENUMPROC",
                    "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumThreadWndProc.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumWindows",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows",
            "description": "",
            "parameters": [
                {
                    "name": "lpEnumFunc",
                    "type": "WNDENUMPROC",
                    "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumWindowsProc.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumWindowStationsA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindowstationsa",
            "description": "",
            "parameters": [
                {
                    "name": "lpEnumFunc",
                    "type": "WINSTAENUMPROCA",
                    "description": "A pointer to an application-defined\nEnumWindowStationProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EnumWindowStationsW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindowstationsw",
            "description": "",
            "parameters": [
                {
                    "name": "lpEnumFunc",
                    "type": "WINSTAENUMPROCW",
                    "description": "A pointer to an application-defined\nEnumWindowStationProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "An application-defined value to be passed to the callback function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EqualRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-equalrect",
            "description": "",
            "parameters": [
                {
                    "name": "*lprc1",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprc2",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EvaluateProximityToPolygon",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-evaluateproximitytopolygon",
            "description": "",
            "parameters": [
                {
                    "name": "numVertices",
                    "type": "UINT32",
                    "description": " The number of vertices in the polygon. This value must be greater than or equal to 3. This value indicates the size of the array, as specified by the controlPolygon parameter. [in] controlPolygon The array of x-y screen coordinates that define the shape of the UI element. The numVertices parameter specifies the number of coordinates. [in] pHitTestingInput The TOUCH_HIT_TESTING_INPUT structure that holds the data for the touch contact area. [out] pProximityEval The TOUCH_HIT_TESTING_PROXIMITY_EVALUATION structure that holds the score and adjusted touch-point data.",
                    "possible_constants": []
                },
                {
                    "name": "*controlPolygon",
                    "type": "const POINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pHitTestingInput",
                    "type": "const TOUCH_HIT_TESTING_INPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pProximityEval",
                    "type": "TOUCH_HIT_TESTING_PROXIMITY_EVALUATION",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "EvaluateProximityToRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-evaluateproximitytorect",
            "description": "",
            "parameters": [
                {
                    "name": "*controlBoundingBox",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pHitTestingInput",
                    "type": "const TOUCH_HIT_TESTING_INPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pProximityEval",
                    "type": "TOUCH_HIT_TESTING_PROXIMITY_EVALUATION",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ExcludeUpdateRgn",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-excludeupdatergn",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "Handle to the device context associated with the clipping region.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window to update.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ExitWindows",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-exitwindows",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "ExitWindowsEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-exitwindowsex",
            "description": "",
            "parameters": [
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "The shutdown type. This parameter must include one of the following values. This parameter can optionally include one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwReason",
                    "type": "DWORD",
                    "description": "The reason for initiating the shutdown. This parameter must be one of the\nsystem shutdown reason codes. If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code  will not be set and therefore the default action is an undefined shutdown that is logged as \"No title for this reason could be found\". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FillRect",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-fillrect",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context. [in] lprc A pointer to a RECT structure that contains the logical coordinates of the rectangle to be filled.",
                    "possible_constants": []
                },
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hbr",
                    "type": "HBRUSH",
                    "description": "A handle to the brush used to fill the rectangle.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FindWindowA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowa",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names. If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The window name (the window's title). If this parameter is NULL, all window names match.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FindWindowExA",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexa",
            "description": "",
            "parameters": [
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window whose child windows are to be searched. If hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop. If hwndParent is HWND_MESSAGE, the function searches all message-only windows.",
                    "possible_constants": []
                },
                {
                    "name": "hWndChildAfter",
                    "type": "HWND",
                    "description": "Type: HWND A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window. If hwndChildAfter is NULL, the search begins with the first child window of hwndParent. Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows.",
                    "possible_constants": []
                },
                {
                    "name": "lpszClass",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero. If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.",
                    "possible_constants": []
                },
                {
                    "name": "lpszWindow",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR The window name (the window's title). If this parameter is NULL, all window names match.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FindWindowExW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexw",
            "description": "",
            "parameters": [
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window whose child windows are to be searched. If hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop. If hwndParent is HWND_MESSAGE, the function searches all message-only windows.",
                    "possible_constants": []
                },
                {
                    "name": "hWndChildAfter",
                    "type": "HWND",
                    "description": "Type: HWND A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window. If hwndChildAfter is NULL, the search begins with the first child window of hwndParent. Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows.",
                    "possible_constants": []
                },
                {
                    "name": "lpszClass",
                    "type": "LPCWSTR",
                    "description": "Type: LPCWSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero. If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.",
                    "possible_constants": []
                },
                {
                    "name": "lpszWindow",
                    "type": "LPCWSTR",
                    "description": "Type: LPCWSTR The window name (the window's title). If this parameter is NULL, all window names match.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FindWindowW",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindoww",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names. If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.",
                    "possible_constants": []
                },
                {
                    "name": "lpWindowName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The window name (the window's title). If this parameter is NULL, all window names match.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FlashWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-flashwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window to be flashed. The window can be either open or minimized.",
                    "possible_constants": []
                },
                {
                    "name": "bInvert",
                    "type": "BOOL",
                    "description": "If this parameter is TRUE, the window is flashed from one state to the other. If it is FALSE, the window is returned to its original state (either active or inactive). When an application is minimized and this parameter is TRUE, the taskbar window button flashes active/inactive. If it is FALSE, the taskbar window button flashes inactive, meaning that it does not change colors. It flashes, as if it were being redrawn, but it does not provide the visual invert clue to the user.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FlashWindowEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-flashwindowex",
            "description": "",
            "parameters": [
                {
                    "name": "pfwi",
                    "type": "PFLASHWINFO",
                    "description": "A pointer to a\nFLASHWINFO structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "FrameRect",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-framerect",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context in which the border is drawn. [in] lprc A pointer to a RECT structure that contains the logical coordinates of the upper-left and lower-right corners of the rectangle.",
                    "possible_constants": []
                },
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hbr",
                    "type": "HBRUSH",
                    "description": "A handle to the brush used to draw the border.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GET_APPCOMMAND_LPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_appcommand_lparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_DEVICE_LPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_device_lparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_FLAGS_LPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_flags_lparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_KEYSTATE_LPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_keystate_lparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_KEYSTATE_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_keystate_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_NCHITTEST_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_nchittest_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_POINTERID_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_pointerid_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_RAWINPUT_CODE_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_rawinput_code_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_WHEEL_DELTA_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_wheel_delta_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GET_XBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-get_xbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetActiveWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getactivewindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetAltTabInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window for which status information will be retrieved. This window must be the application-switching window.",
                    "possible_constants": []
                },
                {
                    "name": "iItem",
                    "type": "int",
                    "description": "Type: int The index of the icon in the application-switching window. If the pszItemText parameter is not NULL, the name of the item is copied to the pszItemText string. If this parameter is \u00e2\u0080\u00931, the name of the item is not copied.",
                    "possible_constants": []
                },
                {
                    "name": "pati",
                    "type": "PALTTABINFO",
                    "description": "Type: PALTTABINFO A pointer to an ALTTABINFO structure to receive the status information. Note that you must set the csSize member to sizeof(ALTTABINFO) before calling this function. [out, optional] pszItemText Type: LPTSTR The name of the item. If this parameter is NULL, the name of the item is not copied.",
                    "possible_constants": []
                },
                {
                    "name": "pszItemText",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchItemText",
                    "type": "UINT",
                    "description": "Type: UINT The size, in characters, of the pszItemText buffer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetAltTabInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window for which status information will be retrieved. This window must be the application-switching window.",
                    "possible_constants": []
                },
                {
                    "name": "iItem",
                    "type": "int",
                    "description": "Type: int The index of the icon in the application-switching window. If the pszItemText parameter is not NULL, the name of the item is copied to the pszItemText string. If this parameter is \u00e2\u0080\u00931, the name of the item is not copied.",
                    "possible_constants": []
                },
                {
                    "name": "pati",
                    "type": "PALTTABINFO",
                    "description": "Type: PALTTABINFO A pointer to an ALTTABINFO structure to receive the status information. Note that you must set the csSize member to sizeof(ALTTABINFO) before calling this function. [out, optional] pszItemText Type: LPTSTR The name of the item. If this parameter is NULL, the name of the item is not copied.",
                    "possible_constants": []
                },
                {
                    "name": "pszItemText",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchItemText",
                    "type": "UINT",
                    "description": "Type: UINT The size, in characters, of the pszItemText buffer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetAncestor",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getancestor",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns NULL.",
                    "possible_constants": []
                },
                {
                    "name": "gaFlags",
                    "type": "UINT",
                    "description": "Type: UINT The ancestor to be retrieved. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetAsyncKeyState",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getasynckeystate",
            "description": "",
            "parameters": [
                {
                    "name": "vKey",
                    "type": "int",
                    "description": "Type: int The virtual-key code. For more information, see Virtual Key Codes. You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetAutoRotationState",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getautorotationstate",
            "description": "",
            "parameters": [
                {
                    "name": "pState",
                    "type": "PAR_STATE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetAwarenessFromDpiAwarenessContext",
            "return_type": "DPI_AWARENESS",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getawarenessfromdpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "value",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "The DPI_AWARENESS_CONTEXT you want to examine.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetCapture",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcapture",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetCaretBlinkTime",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretblinktime",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetCaretPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretpos",
            "description": "",
            "parameters": [
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetCIMSSM",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcimssm",
            "description": "",
            "parameters": [
                {
                    "name": "*inputMessageSource",
                    "type": "INPUT_MESSAGE_SOURCE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpClassName; the high-order word must be zero. [out] lpWndClass Type: LPWNDCLASS A pointer to a WNDCLASS structure that receives the information about the class.",
                    "possible_constants": []
                },
                {
                    "name": "lpWndClass",
                    "type": "LPWNDCLASSA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassInfoExA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexa",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpszClass",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpszClass; the high-order word must be zero. [out] lpwcx Type: LPWNDCLASSEX A pointer to a WNDCLASSEX structure that receives the information about the class.",
                    "possible_constants": []
                },
                {
                    "name": "lpwcx",
                    "type": "LPWNDCLASSEXA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassInfoExW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpszClass",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpszClass; the high-order word must be zero. [out] lpwcx Type: LPWNDCLASSEX A pointer to a WNDCLASSEX structure that receives the information about the class.",
                    "possible_constants": []
                },
                {
                    "name": "lpwcx",
                    "type": "LPWNDCLASSEXW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfow",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The class name. The name must be that of a preregistered class or a class registered by a previous call to the RegisterClass or RegisterClassEx function. Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to RegisterClass or RegisterClassEx. The atom must be in the low-order word of\nlpClassName; the high-order word must be zero. [out] lpWndClass Type: LPWNDCLASS A pointer to a WNDCLASS structure that receives the information about the class.",
                    "possible_constants": []
                },
                {
                    "name": "lpWndClass",
                    "type": "LPWNDCLASSW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassLongA",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslonga",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassLongPtrA",
            "return_type": "ULONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongptra",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassLongPtrW",
            "return_type": "ULONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongptrw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassLongW",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclasslongw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassName",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassname",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. [out] lpClassName Type: LPTSTR The class name string.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPTSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nMaxCount",
                    "type": "int",
                    "description": "Type: int The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassNameA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassnamea",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. [out] lpClassName Type: LPTSTR The class name string.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nMaxCount",
                    "type": "int",
                    "description": "Type: int The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassNameW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassnamew",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. [out] lpClassName Type: LPTSTR The class name string.",
                    "possible_constants": []
                },
                {
                    "name": "lpClassName",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nMaxCount",
                    "type": "int",
                    "description": "Type: int The length of the lpClassName buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClassWord",
            "return_type": "WORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassword",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of class memory, minus two; for example, if you specified 10 or more bytes of extra class memory, a value of eight would be an index to the fifth 16-bit integer. There is an additional valid value as shown in the following table.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClientRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclientrect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose client coordinates are to be retrieved. [out] lpRect Type: LPRECT A pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClipboardData",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata",
            "description": "",
            "parameters": [
                {
                    "name": "uFormat",
                    "type": "UINT",
                    "description": "Type: UINT A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClipboardFormatNameA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardformatnamea",
            "description": "",
            "parameters": [
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "Type: UINT The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats. [out] lpszFormatName Type: LPTSTR The buffer that is to receive the format name.",
                    "possible_constants": []
                },
                {
                    "name": "lpszFormatName",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMaxCount",
                    "type": "int",
                    "description": "Type: int The maximum length, in\ncharacters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClipboardFormatNameW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardformatnamew",
            "description": "",
            "parameters": [
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "Type: UINT The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats. [out] lpszFormatName Type: LPTSTR The buffer that is to receive the format name.",
                    "possible_constants": []
                },
                {
                    "name": "lpszFormatName",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMaxCount",
                    "type": "int",
                    "description": "Type: int The maximum length, in\ncharacters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetClipboardOwner",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardowner",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetClipboardSequenceNumber",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardsequencenumber",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetClipboardViewer",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboardviewer",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetClipCursor",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipcursor",
            "description": "",
            "parameters": [
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetComboBoxInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcomboboxinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwndCombo",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the combo box. [out] pcbi Type: PCOMBOBOXINFO A pointer to a COMBOBOXINFO structure that receives the information. You must set COMBOBOXINFO.cbSize before calling this function.",
                    "possible_constants": []
                },
                {
                    "name": "pcbi",
                    "type": "PCOMBOBOXINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetCurrentInputMessageSource",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcurrentinputmessagesource",
            "description": "",
            "parameters": [
                {
                    "name": "*inputMessageSource",
                    "type": "INPUT_MESSAGE_SOURCE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetCursor",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursor",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetCursorInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorinfo",
            "description": "",
            "parameters": [
                {
                    "name": "pci",
                    "type": "PCURSORINFO",
                    "description": "Type: PCURSORINFO A pointer to a CURSORINFO structure that receives the information. Note that you must set the cbSize member to sizeof(CURSORINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetCursorPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorpos",
            "description": "",
            "parameters": [
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDC",
            "return_type": "HDC",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdc",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDCEx",
            "return_type": "HDC",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdcex",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose DC is to be retrieved. If this value is NULL, GetDCEx retrieves the DC for the entire screen.",
                    "possible_constants": []
                },
                {
                    "name": "hrgnClip",
                    "type": "HRGN",
                    "description": "A clipping region that may be combined with the visible region of the DC. If the value of flags is DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the region after a successful call to GetDCEx.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "DWORD",
                    "description": "Specifies how the DC is created. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDesktopWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdesktopwindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetDialogBaseUnits",
            "return_type": "long",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogbaseunits",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetDialogControlDpiChangeBehavior",
            "return_type": "DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogcontroldpichangebehavior",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": " The handle for the window to examine.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDialogDpiChangeBehavior",
            "return_type": "DIALOG_DPI_CHANGE_BEHAVIORS",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdialogdpichangebehavior",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": " The handle for the dialog to examine.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDisplayAutoRotationPreferences",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayautorotationpreferences",
            "description": "",
            "parameters": [
                {
                    "name": "*pOrientation",
                    "type": "ORIENTATION_PREFERENCE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDisplayAutoRotationPreferencesByProcessId",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayautorotationpreferencesbyprocessid",
            "description": "",
            "parameters": [
                {
                    "name": "dwProcessId",
                    "type": "DWORD",
                    "description": "The process to get preference settings for. [out] pOrientation Pointer to a location in memory that will receive the current orientation preference setting for the indicated process. [out] fRotateScreen Pointer to a location in memory that will receive a TRUE or FALSE value indicating whether the screen was rotated to comply with the process orientation preferences.",
                    "possible_constants": []
                },
                {
                    "name": "*pOrientation",
                    "type": "ORIENTATION_PREFERENCE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*fRotateScreen",
                    "type": "BOOL",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDisplayConfigBufferSizes",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdisplayconfigbuffersizes",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "UINT32",
                    "description": "The type of information to retrieve. The value for the Flags parameter must be one of the following values. The caller requests the table sizes to hold all the possible path combinations. The caller requests the table sizes to hold only active paths. The caller requests the table sizes to hold the active paths as defined in the persistence database for the currently connected monitors. [out] numPathArrayElements Pointer to a variable that receives the number of elements in the path information table. The pNumPathArrayElements parameter value is then used by a subsequent call to the QueryDisplayConfig function. This parameter cannot be NULL. [out] numModeInfoArrayElements Pointer to a variable that receives the number of elements in the mode information table. The pNumModeInfoArrayElements parameter value is then used by a subsequent call to the QueryDisplayConfig function. This parameter cannot be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*numPathArrayElements",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*numModeInfoArrayElements",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDlgCtrlID",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgctrlid",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDlgItem",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitem",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDlgItemInt",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemint",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control of interest.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control whose text is to be translated. [out, optional] lpTranslated Type: BOOL* Indicates success or failure (TRUE indicates success, FALSE indicates failure). If this parameter is NULL, the function returns no information about success or failure.",
                    "possible_constants": []
                },
                {
                    "name": "*lpTranslated",
                    "type": "BOOL",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "bSigned",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one (TRUE specifies this should be done, FALSE that it should not).",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDlgItemTextA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemtexta",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control whose title or text is to be retrieved. [out] lpString Type: LPTSTR The buffer to receive the title or text.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMax",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the string to be copied to the buffer pointed to by lpString. If the length of the string, including the null character, exceeds the limit, the string is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDlgItemTextW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemtextw",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control whose title or text is to be retrieved. [out] lpString Type: LPTSTR The buffer to receive the title or text.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMax",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the string to be copied to the buffer pointed to by lpString. If the length of the string, including the null character, exceeds the limit, the string is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDoubleClickTime",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdoubleclicktime",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetDpiAwarenessContextForProcess",
            "return_type": "DPI_AWARENESS_CONTEXT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiawarenesscontextforprocess",
            "description": "",
            "parameters": [
                {
                    "name": "hProcess",
                    "type": "HANDLE",
                    "description": " A handle to the process for which the DPI awareness context is retrieved. If NULL is specified, the context is retrieved for the current process.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDpiForSystem",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiforsystem",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetDpiForWindow",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiforwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window that you want to get information about.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetDpiFromDpiAwarenessContext",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpifromdpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "value",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": " The DPI_AWARENESS_CONTEXT handle to examine.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetFocus",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getfocus",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetForegroundWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getforegroundwindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetGestureConfig",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureconfig",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "A handle to the window to get the gesture configuration from.",
                    "possible_constants": []
                },
                {
                    "name": "dwReserved",
                    "type": "DWORD",
                    "description": "This value is reserved and must be set to 0.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "A gesture command flag value indicating options for retrieving the gesture configuration.  See Remarks for additional information and supported values.",
                    "possible_constants": []
                },
                {
                    "name": "pcIDs",
                    "type": "PUINT",
                    "description": "The size, in number of gesture configuration structures, that is in the pGestureConfig buffer.",
                    "possible_constants": []
                },
                {
                    "name": "pGestureConfig",
                    "type": "PGESTURECONFIG",
                    "description": "An array of gesture configuration structures that specify the gesture configuration.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "The size of the gesture configuration (GESTURECONFIG) structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetGestureExtraArgs",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureextraargs",
            "description": "",
            "parameters": [
                {
                    "name": "hGestureInfo",
                    "type": "HGESTUREINFO",
                    "description": "The handle to the gesture information that is passed in the lParam of a WM_GESTURE message.",
                    "possible_constants": []
                },
                {
                    "name": "cbExtraArgs",
                    "type": "UINT",
                    "description": "A count of the bytes of data stored in the extra arguments. [out] pExtraArgs A pointer to the extra argument information.",
                    "possible_constants": []
                },
                {
                    "name": "pExtraArgs",
                    "type": "PBYTE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetGestureInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getgestureinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hGestureInfo",
                    "type": "HGESTUREINFO",
                    "description": "The gesture information handle. [out] pGestureInfo A pointer to the gesture information structure.",
                    "possible_constants": []
                },
                {
                    "name": "pGestureInfo",
                    "type": "PGESTUREINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetGuiResources",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getguiresources",
            "description": "",
            "parameters": [
                {
                    "name": "hProcess",
                    "type": "HANDLE",
                    "description": "A handle to the process. The handle must refer to a process in the current session, and must have the PROCESS_QUERY_LIMITED_INFORMATION access right (see Process security and access rights). If this parameter is the special value GR_GLOBAL, then the resource usage is reported across all processes in the current session. Windows Server\u00a02008, Windows\u00a0Vista, Windows Server\u00a02003, and Windows\u00a0XP: The GR_GLOBAL value is not supported until Windows\u00a07 and Windows Server\u00a02008\u00a0R2. Windows Server\u00a02003 and Windows\u00a0XP: The handle must have the PROCESS_QUERY_INFORMATION access right.",
                    "possible_constants": []
                },
                {
                    "name": "uiFlags",
                    "type": "DWORD",
                    "description": "The GUI object type. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetGUIThreadInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getguithreadinfo",
            "description": "",
            "parameters": [
                {
                    "name": "idThread",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId function. If this parameter is NULL, the function returns information for the foreground thread.",
                    "possible_constants": []
                },
                {
                    "name": "pgui",
                    "type": "PGUITHREADINFO",
                    "description": "Type: LPGUITHREADINFO A pointer to a GUITHREADINFO structure that receives information describing the thread. Note that you must set the cbSize member to sizeof(GUITHREADINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetIconInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfo",
            "description": "",
            "parameters": [
                {
                    "name": "hIcon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify the identifier beginning with the IDI_ prefix or the identifier beginning with the IDC_ prefix in this parameter. [out] piconinfo Type: PICONINFO A pointer to an ICONINFO structure. The function fills in the structure's members.",
                    "possible_constants": []
                },
                {
                    "name": "piconinfo",
                    "type": "PICONINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetIconInfoExA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfoexa",
            "description": "",
            "parameters": [
                {
                    "name": "hicon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify the identifier beginning with the IDI_ prefix or the identifier beginning with the IDC_ prefix in this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "piconinfo",
                    "type": "PICONINFOEXA",
                    "description": "Type: PICONINFOEX When this method returns, contains a pointer to an ICONINFOEX structure. The function fills in the structure's members.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetIconInfoExW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-geticoninfoexw",
            "description": "",
            "parameters": [
                {
                    "name": "hicon",
                    "type": "HICON",
                    "description": "Type: HICON A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify the identifier beginning with the IDI_ prefix or the identifier beginning with the IDC_ prefix in this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "piconinfo",
                    "type": "PICONINFOEXW",
                    "description": "Type: PICONINFOEX When this method returns, contains a pointer to an ICONINFOEX structure. The function fills in the structure's members.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetInputState",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getinputstate",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetKBCodePage",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkbcodepage",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetKeyboardLayout",
            "return_type": "HKL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayout",
            "description": "",
            "parameters": [
                {
                    "name": "idThread",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread to query, or 0 for the current thread.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyboardLayoutList",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutlist",
            "description": "",
            "parameters": [
                {
                    "name": "nBuff",
                    "type": "int",
                    "description": "Type: int The maximum number of handles that the buffer can hold. [out] lpList Type: HKL* A pointer to the buffer that receives the array of input locale identifiers.",
                    "possible_constants": []
                },
                {
                    "name": "*lpList",
                    "type": "HKL",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyboardLayoutNameA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutnamea",
            "description": "",
            "parameters": [
                {
                    "name": "pwszKLID",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyboardLayoutNameW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardlayoutnamew",
            "description": "",
            "parameters": [
                {
                    "name": "pwszKLID",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyboardState",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardstate",
            "description": "",
            "parameters": [
                {
                    "name": "lpKeyState",
                    "type": "PBYTE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyboardType",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeyboardtype",
            "description": "",
            "parameters": [
                {
                    "name": "nTypeFlag",
                    "type": "int",
                    "description": "Type: int The type of keyboard information to be retrieved. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyNameTextA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeynametexta",
            "description": "",
            "parameters": [
                {
                    "name": "lParam",
                    "type": "LONG",
                    "description": "Type: LONG The second parameter of the keyboard message (such as WM_KEYDOWN) to be processed. The function interprets the following bit positions in the lParam. For more detail, see Keystroke Message Flags. [out] lpString Type: LPTSTR The buffer that will receive the key name.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchSize",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the lpString parameter.)",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyNameTextW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeynametextw",
            "description": "",
            "parameters": [
                {
                    "name": "lParam",
                    "type": "LONG",
                    "description": "Type: LONG The second parameter of the keyboard message (such as WM_KEYDOWN) to be processed. The function interprets the following bit positions in the lParam. For more detail, see Keystroke Message Flags. [out] lpString Type: LPTSTR The buffer that will receive the key name.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchSize",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the lpString parameter.)",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetKeyState",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getkeystate",
            "description": "",
            "parameters": [
                {
                    "name": "nVirtKey",
                    "type": "int",
                    "description": "Type: int A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9),\nnVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the \"o\" key, whereas VK_OEM_1 refers to the \"o with umlaut\" key.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetLastActivePopup",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlastactivepopup",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetLastInputInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlastinputinfo",
            "description": "",
            "parameters": [
                {
                    "name": "plii",
                    "type": "PLASTINPUTINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetLayeredWindowAttributes",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlayeredwindowattributes",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED using SetWindowLong after the window has been created. [out, optional] pcrKey Type: COLORREF* A pointer to a COLORREF value that receives the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. This can be NULL if the argument is not needed. [out, optional] pbAlpha Type: BYTE* The Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When the variable referred to by pbAlpha is 0, the window is completely transparent. When the variable referred to by pbAlpha is 255, the window is opaque. This can be NULL if the argument is not needed. [out, optional] pdwFlags Type: DWORD* A layering flag. This parameter can be NULL if the value is not needed. The layering flag can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "*pcrKey",
                    "type": "COLORREF",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pbAlpha",
                    "type": "BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pdwFlags",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetListBoxInfo",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getlistboxinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the list box whose number of items per column is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenu",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenu",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose menu handle is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuBarInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenubarinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window (menu bar) whose information is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "idObject",
                    "type": "LONG",
                    "description": "Type: LONG The menu object. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "idItem",
                    "type": "LONG",
                    "description": "Type: LONG The item for which to retrieve information. If this parameter is zero, the function retrieves information about the menu itself. If this parameter is 1, the function retrieves information about the first item on the menu, and so on.",
                    "possible_constants": []
                },
                {
                    "name": "pmbi",
                    "type": "PMENUBARINFO",
                    "description": "Type: PMENUBARINFO A pointer to a MENUBARINFO structure that receives the information. Note that you must set the cbSize member to sizeof(MENUBARINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuCheckMarkDimensions",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenucheckmarkdimensions",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetMenuContextHelpId",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenucontexthelpid",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HMENU",
                    "description": " Type: HMENU A handle to the menu for which the Help context identifier is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuDefaultItem",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenudefaultitem",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu for which to retrieve the default menu item.",
                    "possible_constants": []
                },
                {
                    "name": "fByPos",
                    "type": "UINT",
                    "description": "Type: UINT Indicates whether to retrieve the menu item's identifier or its position. If this parameter is FALSE, the identifier is returned. Otherwise, the position is returned.",
                    "possible_constants": []
                },
                {
                    "name": "gmdiFlags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the function should search for menu items. This parameter can be zero or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuinfo",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle on a menu.",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPMENUINFO",
                    "description": "Type: LPMENUINFO A pointer to a MENUINFO structure containing information for the menu. Note that you must set the cbSize member to sizeof(MENUINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuItemCount",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemcount",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be examined.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuItemID",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemid",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the item whose identifier is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "nPos",
                    "type": "int",
                    "description": "Type: int The zero-based relative position of the menu item whose identifier is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuItemInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuiteminfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the menu item.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPosition",
                    "type": "BOOL",
                    "description": "Type: BOOL The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.",
                    "possible_constants": []
                },
                {
                    "name": "lpmii",
                    "type": "LPMENUITEMINFOA",
                    "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the cbSize member to sizeof(MENUITEMINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuItemInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuiteminfow",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the menu item.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPosition",
                    "type": "BOOL",
                    "description": "Type: BOOL The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.",
                    "possible_constants": []
                },
                {
                    "name": "lpmii",
                    "type": "LPMENUITEMINFOW",
                    "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the cbSize member to sizeof(MENUITEMINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuItemRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenuitemrect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu\nparameter represents a popup menu, the function will find the menu window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu.",
                    "possible_constants": []
                },
                {
                    "name": "uItem",
                    "type": "UINT",
                    "description": "Type: UINT The zero-based position of the menu item. [out] lprcItem Type: LPRECT A pointer to a RECT structure that receives the\nbounding rectangle of the specified menu item expressed in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "lprcItem",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuState",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustate",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the menu item whose flags are to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "uId",
                    "type": "UINT",
                    "description": "Type: UINT The menu item for which the menu flags are to be retrieved, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the uId parameter is interpreted. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuStringA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustringa",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu.",
                    "possible_constants": []
                },
                {
                    "name": "uIDItem",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be changed, as determined by the uFlag parameter. [out, optional] lpString Type: LPTSTR The buffer that receives the null-terminated string. If the string is as long or longer than lpString, the string is truncated and the terminating null character is added. If lpString is NULL, the function returns the length of the menu string.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMax",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the nMaxCount parameter, the extra characters are truncated. If nMaxCount is 0, the function returns the length of the menu string.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the uIDItem parameter is interpreted. This parameter must be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMenuStringW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmenustringw",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu.",
                    "possible_constants": []
                },
                {
                    "name": "uIDItem",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be changed, as determined by the uFlag parameter. [out, optional] lpString Type: LPTSTR The buffer that receives the null-terminated string. If the string is as long or longer than lpString, the string is truncated and the terminating null character is added. If lpString is NULL, the function returns the length of the menu string.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMax",
                    "type": "int",
                    "description": "Type: int The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the nMaxCount parameter, the extra characters are truncated. If nMaxCount is 0, the function returns the length of the menu string.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the uIDItem parameter is interpreted. This parameter must be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMessage",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessage",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be retrieved. The window must belong to the current thread. If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMin",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message. Use WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMax",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message. Use WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be retrieved. The window must belong to the current thread. If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMin",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message. Use WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMax",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message. Use WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMessageExtraInfo",
            "return_type": "LPARAM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessageextrainfo",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetMessagePos",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagepos",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetMessageTime",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagetime",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be retrieved. The window must belong to the current thread. If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL,  that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMin",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message. Use WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMax",
                    "type": "UINT",
                    "description": "Type: UINT The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message. Use WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages. If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMonitorInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmonitorinfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hMonitor",
                    "type": "HMONITOR",
                    "description": "A handle to the display monitor of interest. [out] lpmi A pointer to a MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor. You must set the cbSize member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it. The MONITORINFOEX structure is a superset of the MONITORINFO structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure.",
                    "possible_constants": []
                },
                {
                    "name": "lpmi",
                    "type": "LPMONITORINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMonitorInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmonitorinfow",
            "description": "",
            "parameters": [
                {
                    "name": "hMonitor",
                    "type": "HMONITOR",
                    "description": "A handle to the display monitor of interest. [out] lpmi A pointer to a MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor. You must set the cbSize member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the GetMonitorInfo function. Doing so lets the function determine the type of structure you are passing to it. The MONITORINFOEX structure is a superset of the MONITORINFO structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a MONITORINFO structure.",
                    "possible_constants": []
                },
                {
                    "name": "lpmi",
                    "type": "LPMONITORINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetMouseMovePointsEx",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmousemovepointsex",
            "description": "",
            "parameters": [
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of the MOUSEMOVEPOINT structure.",
                    "possible_constants": []
                },
                {
                    "name": "lppt",
                    "type": "LPMOUSEMOVEPOINT",
                    "description": "Type: LPMOUSEMOVEPOINT A pointer to a MOUSEMOVEPOINT structure containing valid mouse coordinates (in screen coordinates). It may also contain a time stamp. The GetMouseMovePointsEx function searches for the point in the mouse coordinates history. If the function finds the point, it returns the last\nnBufPoints prior to and including the supplied point. If your application supplies a time stamp, the GetMouseMovePointsEx function will use it to differentiate between two equal points that were recorded at different times. An application should call this function using the mouse coordinates received from the WM_MOUSEMOVE message and convert them to screen coordinates. [out] lpptBuf Type: LPMOUSEMOVEPOINT A pointer to a buffer that will receive the points. It should be at least\ncbSize*\nnBufPoints in size.",
                    "possible_constants": []
                },
                {
                    "name": "lpptBuf",
                    "type": "LPMOUSEMOVEPOINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nBufPoints",
                    "type": "int",
                    "description": "Type: int The number of points to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "resolution",
                    "type": "DWORD",
                    "description": "Type: DWORD The resolution desired. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetNextDlgGroupItem",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextdlggroupitem",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box to be searched.",
                    "possible_constants": []
                },
                {
                    "name": "hCtl",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the control to be used as the starting point for the search. If this parameter is NULL, the function uses the last (or first) control in the dialog box as the starting point for the search.",
                    "possible_constants": []
                },
                {
                    "name": "bPrevious",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates how the function is to search the group of controls in the dialog box. If this parameter is TRUE, the function searches for the previous control in the group. If it is FALSE, the function searches for the next control in the group.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetNextDlgTabItem",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextdlgtabitem",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box to be searched.",
                    "possible_constants": []
                },
                {
                    "name": "hCtl",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the control to be used as the starting point for the search.\nIf this parameter is NULL, the function fails.",
                    "possible_constants": []
                },
                {
                    "name": "bPrevious",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates how the function is to search the dialog box. If this parameter\nis TRUE, the function searches for the previous control\nin the dialog box. If this parameter is FALSE, the function searches\nfor the next control in the dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetNextWindow",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getnextwindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetOpenClipboardWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getopenclipboardwindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetParent",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getparent",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose parent window handle is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPhysicalCursorPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getphysicalcursorpos",
            "description": "",
            "parameters": [
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerCursorId",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointercursorid",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve the cursor identifier. [out] cursorId An address of a UINT32 to receive the tablet cursor identifier, if any, associated with the specified pointer.",
                    "possible_constants": []
                },
                {
                    "name": "*cursorId",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerDevice",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevice",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HANDLE",
                    "description": "The handle to the device. [out] pointerDevice A POINTER_DEVICE_INFO structure that contains information about the pointer device.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerDevice",
                    "type": "POINTER_DEVICE_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerDeviceCursors",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevicecursors",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HANDLE",
                    "description": "The device handle. [in, out] cursorCount The number of cursors associated with the pointer device. [out, optional] deviceCursors An array of POINTER_DEVICE_CURSOR_INFO structures that contain info about the cursors. If NULL, cursorCount returns the number of cursors associated with the pointer device.",
                    "possible_constants": []
                },
                {
                    "name": "*cursorCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*deviceCursors",
                    "type": "POINTER_DEVICE_CURSOR_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerDeviceProperties",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdeviceproperties",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HANDLE",
                    "description": "The pointer device to query properties from. A call to the GetPointerDevices function returns this handle in the POINTER_DEVICE_INFO structure. [in, out] propertyCount The number  of properties. Returns the count that's written or needed if pointerProperties is NULL. If this value is less than the number of properties that the pointer device supports and pointerProperties is not NULL, the function returns the actual number of properties in this variable and fails. [out, optional] pointerProperties The array of properties.",
                    "possible_constants": []
                },
                {
                    "name": "*propertyCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerProperties",
                    "type": "POINTER_DEVICE_PROPERTY",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerDeviceRects",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevicerects",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HANDLE",
                    "description": "The handle to the pointer device. [out] pointerDeviceRect The structure for retrieving the device's physical range data. [out] displayRect The structure for retrieving the display resolution.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerDeviceRect",
                    "type": "RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*displayRect",
                    "type": "RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerDevices",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerdevices",
            "description": "",
            "parameters": [
                {
                    "name": "*deviceCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerDevices",
                    "type": "POINTER_DEVICE_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFrameInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframeinfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve frame information. [in, out] pointerCount A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If GetPointerFrameInfo succeeds, pointerCount is updated with the total count of pointers in the frame. [out] pointerInfo Address of an array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerInfo",
                    "type": "POINTER_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFrameInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframeinfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve frame information. [in, out] entriesCount A pointer to a variable that specifies the count of rows in the two-dimensional array to which pointerInfo points. If GetPointerFrameInfoHistory succeeds, entriesCount is updated with the total count of frames available in the history. [in, out] pointerCount A pointer to a variable that specifies the count of columns in the two-dimensional array to which pointerInfo points. If GetPointerFrameInfoHistory succeeds, pointerCount is updated with the total count of pointers in each frame. [out] pointerInfo Address of a two-dimensional array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero. This array is interpreted as POINTER_INFO[*entriesCount][*pointerCount].",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerInfo",
                    "type": "POINTER_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFramePenInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframepeninfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve frame information. [in, out] pointerCount A pointer to a variable that specifies the count of structures in the buffer to which penInfo points. If GetPointerFramePenInfo succeeds, pointerCount  is updated with the total count of pointers in the frame. [out] penInfo Address of an array of POINTER_PEN_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*penInfo",
                    "type": "POINTER_PEN_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFramePenInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframepeninfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "The identifier of the pointer for which to retrieve frame information. [in, out] entriesCount A pointer to a variable that specifies the count of rows in the two-dimensional array to which penInfo points. If GetPointerFramePenInfoHistory succeeds,  entriesCount is updated with the total count of frames available in the history. [in, out] pointerCount A pointer to a variable that specifies the count of columns in the two-dimensional array to which penInfo points. If GetPointerFramePenInfoHistory succeeds, pointerCount is updated with  the total count of pointers in each frame. [out, optional] penInfo Address of a two-dimensional array of POINTER_PEN_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero. This array is interpreted as POINTER_PEN_INFO[*entriesCount][*pointerCount].",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*penInfo",
                    "type": "POINTER_PEN_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFrameTouchInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframetouchinfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve frame information. [in, out] pointerCount A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If GetPointerFrameTouchInfo succeeds, pointerCount is updated with the total count of pointers in the frame. [out] touchInfo Address of an array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *pointerCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*touchInfo",
                    "type": "POINTER_TOUCH_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerFrameTouchInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerframetouchinfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve frame information. [in, out] entriesCount A pointer to variable that specifies the count of rows in the two-dimensional array to which touchInfo points. If GetPointerFrameTouchInfoHistory succeeds,  entriesCount is updated with the total count of frames available in the history. [in, out] pointerCount A pointer to a variable that specifies the count of columns in the two-dimensional array to which touchInfo points. If GetPointerFrameTouchInfoHistory succeeds, pointerCount is updated with the total count of pointers in each frame. [out] touchInfo Address of a two-dimensional array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount and *pointerCount are both zero. This array is interpreted as POINTER_TOUCH_INFO[*entriesCount][*pointerCount].",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*touchInfo",
                    "type": "POINTER_TOUCH_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "The pointer identifier. [out] pointerInfo Address of a  POINTER_INFO structure that receives the pointer information.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerInfo",
                    "type": "POINTER_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information. [in, out] entriesCount A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If GetPointerInfoHistory succeeds, entriesCount  is updated with the total count of structures available. The total count of structures available is the same as the historyCount field of the POINTER_INFO structure returned by a call to GetPointerInfo. [out, optional] pointerInfo Address of an array of POINTER_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pointerInfo",
                    "type": "POINTER_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerInputTransform",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerinputtransform",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information.",
                    "possible_constants": []
                },
                {
                    "name": "historyCount",
                    "type": "UINT32",
                    "description": "The number of INPUT_TRANSFORM structures that inputTransform can point to. This value must be no less than 1 and no greater than the value specified in historyCount of the POINTER_INFO structure returned by GetPointerInfo, GetPointerTouchInfo, or GetPointerPenInfo (for a single input transform) or GetPointerInfoHistory, GetPointerTouchInfoHistory, or GetPointerPenInfoHistory (for an array of input transforms). If GetPointerInputTransform succeeds, inputTransform  is updated with the total count of structures available. The total count of structures available is the same as the historyCount field of the POINTER_INFO structure. [out] inputTransform Address of an array of INPUT_TRANSFORM structures to receive the transform information. This parameter cannot be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*inputTransform",
                    "type": "INPUT_TRANSFORM",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerPenInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerpeninfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information. [out] penInfo Address of a POINTER_PEN_INFO structure to receive the pen-specific pointer information.",
                    "possible_constants": []
                },
                {
                    "name": "*penInfo",
                    "type": "POINTER_PEN_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerPenInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointerpeninfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information. [in, out] entriesCount A pointer to a variable that specifies the count of structures in the buffer to which\npenInfo points. If\nGetPointerPenInfoHistory succeeds,\nentriesCount is updated with the total count of structures available. The total\ncount of structures available is the same as the historyCount field in the\nPOINTER_PEN_INFO structure returned by a\ncall to  GetPointerPenInfo. [out, optional] penInfo Address of an array of\nPOINTER_PEN_INFO structures to receive\nthe pointer information. This parameter can be NULL if *entriesCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*penInfo",
                    "type": "POINTER_PEN_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerTouchInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertouchinfo",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information. [out] touchInfo Address of a POINTER_TOUCH_INFO structure to receive the touch-specific pointer information.",
                    "possible_constants": []
                },
                {
                    "name": "*touchInfo",
                    "type": "POINTER_TOUCH_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerTouchInfoHistory",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertouchinfohistory",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information. [in, out] entriesCount A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If GetPointerTouchInfoHistory succeeds, entriesCount is updated with the total count of structures available. The total count of structures available is the same as the historyCount field in the POINTER_INFO structure returned by a call to GetPointerInfo or GetPointerTouchInfo. [out, optional] touchInfo Address of an array of POINTER_TOUCH_INFO structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.",
                    "possible_constants": []
                },
                {
                    "name": "*entriesCount",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*touchInfo",
                    "type": "POINTER_TOUCH_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPointerType",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpointertype",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve pointer type. [out] pointerType An address of a POINTER_INPUT_TYPE type to receive a pointer input type.",
                    "possible_constants": []
                },
                {
                    "name": "*pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPriorityClipboardFormat",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpriorityclipboardformat",
            "description": "",
            "parameters": [
                {
                    "name": "*paFormatPriorityList",
                    "type": "UINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cFormats",
                    "type": "int",
                    "description": "Type: int The number of entries in the\npaFormatPriorityList array. This value must not be greater than the number of entries in the list.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetProcessDefaultLayout",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getprocessdefaultlayout",
            "description": "",
            "parameters": [
                {
                    "name": "*pdwDefaultLayout",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetProcessWindowStation",
            "return_type": "HWINSTA",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getprocesswindowstation",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetPropA",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpropa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be searched.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR An atom that identifies a string. If this parameter is an atom, it must have been created by using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of the lpString parameter; the high-order word must be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetPropW",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getpropw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be searched.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR An atom that identifies a string. If this parameter is an atom, it must have been created by using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of the lpString parameter; the high-order word must be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetQueueStatus",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getqueuestatus",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT The types of messages for which to check. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawInputBuffer",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer",
            "description": "",
            "parameters": [
                {
                    "name": "pData",
                    "type": "PRAWINPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "pcbSize",
                    "type": "PUINT",
                    "description": "Type: PUINT The size, in bytes, of the provided RAWINPUT buffer.",
                    "possible_constants": []
                },
                {
                    "name": "cbSizeHeader",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawInputData",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata",
            "description": "",
            "parameters": [
                {
                    "name": "hRawInput",
                    "type": "HRAWINPUT",
                    "description": "Type: HRAWINPUT A handle to the RAWINPUT structure. This comes from the\nlParam in WM_INPUT.",
                    "possible_constants": []
                },
                {
                    "name": "uiCommand",
                    "type": "UINT",
                    "description": "Type: UINT The command flag. This parameter can be one of the following values. [out, optional] pData Type: LPVOID A pointer to the data that comes from the RAWINPUT structure. This depends on the value of\nuiCommand. If\npData is NULL, the required size of the buffer is returned in *pcbSize.",
                    "possible_constants": []
                },
                {
                    "name": "pData",
                    "type": "LPVOID",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "pcbSize",
                    "type": "PUINT",
                    "description": "Type: PUINT The size, in bytes, of the data in\npData.",
                    "possible_constants": []
                },
                {
                    "name": "cbSizeHeader",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawInputDeviceInfoA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hDevice",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList.",
                    "possible_constants": []
                },
                {
                    "name": "uiCommand",
                    "type": "UINT",
                    "description": "Type: UINT Specifies what data will be returned in pData. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "pData",
                    "type": "LPVOID",
                    "description": "Type: LPVOID A pointer to a buffer that contains the information specified by uiCommand. If uiCommand is RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before calling GetRawInputDeviceInfo.",
                    "possible_constants": []
                },
                {
                    "name": "pcbSize",
                    "type": "PUINT",
                    "description": "Type: PUINT The size, in bytes, of the data in pData.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawInputDeviceInfoW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfow",
            "description": "",
            "parameters": [
                {
                    "name": "hDevice",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList.",
                    "possible_constants": []
                },
                {
                    "name": "uiCommand",
                    "type": "UINT",
                    "description": "Type: UINT Specifies what data will be returned in pData. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "pData",
                    "type": "LPVOID",
                    "description": "Type: LPVOID A pointer to a buffer that contains the information specified by uiCommand. If uiCommand is RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before calling GetRawInputDeviceInfo.",
                    "possible_constants": []
                },
                {
                    "name": "pcbSize",
                    "type": "PUINT",
                    "description": "Type: PUINT The size, in bytes, of the data in pData.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawInputDeviceList",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist",
            "description": "",
            "parameters": [
                {
                    "name": "pRawInputDeviceList",
                    "type": "PRAWINPUTDEVICELIST",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "puiNumDevices",
                    "type": "PUINT",
                    "description": "Type: PUINT If pRawInputDeviceList is NULL, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of RAWINPUTDEVICELIST structures that can be contained in the buffer to which pRawInputDeviceList points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with ERROR_INSUFFICIENT_BUFFER.\nIf this value is greater than or equal to the number of devices attached to the system, then the value is unchanged, and the number of devices is reported as the return value.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "Type: UINT The size of a RAWINPUTDEVICELIST structure, in bytes.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRawPointerDeviceData",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawpointerdevicedata",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "An identifier of the pointer for which to retrieve information.",
                    "possible_constants": []
                },
                {
                    "name": "historyCount",
                    "type": "UINT32",
                    "description": "The pointer history.",
                    "possible_constants": []
                },
                {
                    "name": "propertiesCount",
                    "type": "UINT32",
                    "description": "Number of properties to retrieve. [in] pProperties Array of POINTER_DEVICE_PROPERTY structures that contain raw data reported by the device. [out] pValues The values for pProperties.",
                    "possible_constants": []
                },
                {
                    "name": "*pProperties",
                    "type": "POINTER_DEVICE_PROPERTY",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pValues",
                    "type": "LONG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetRegisteredRawInputDevices",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getregisteredrawinputdevices",
            "description": "",
            "parameters": [
                {
                    "name": "pRawInputDevices",
                    "type": "PRAWINPUTDEVICE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "puiNumDevices",
                    "type": "PUINT",
                    "description": "Type: PUINT The number of RAWINPUTDEVICE structures in *pRawInputDevices.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of a RAWINPUTDEVICE structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetScrollBarInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollbarinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a window associated with the scroll bar whose information is to be retrieved. If the\nidObject parameter is OBJID_CLIENT,\nhwnd is a handle to a scroll bar control. Otherwise,\nhwnd is a handle to a window created with WS_VSCROLL and/or WS_HSCROLL style.",
                    "possible_constants": []
                },
                {
                    "name": "idObject",
                    "type": "LONG",
                    "description": "Type: LONG Specifies the scroll bar object. This parameter can be one of the following values. [out] psbi Type: PSCROLLBARINFO Pointer to a SCROLLBARINFO structure to receive the information. Before calling GetScrollBarInfo, set the\ncbSize member to\nsizeof(SCROLLBARINFO).",
                    "possible_constants": []
                },
                {
                    "name": "psbi",
                    "type": "PSCROLLBARINFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetScrollInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nfnBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpsi",
                    "type": "LPSCROLLINFO",
                    "description": "Type: LPSCROLLINFO Pointer to a SCROLLINFO structure. Before calling GetScrollInfo, set the\ncbSize member to\nsizeof(SCROLLINFO), and set the\nfMask member to specify the scroll bar parameters to retrieve. Before returning, the function copies the specified parameters to the appropriate members of the structure. The\nfMask member can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetScrollPos",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollpos",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the scroll bar to be examined. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetScrollRange",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getscrollrange",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the scroll bar from which the positions are retrieved. This parameter can be one of the following values. [out] lpMinPos Type: LPINT Pointer to the integer variable that receives the minimum position. [out] lpMaxPos Type: LPINT Pointer to the integer variable that receives the maximum position.",
                    "possible_constants": []
                },
                {
                    "name": "lpMinPos",
                    "type": "LPINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "lpMaxPos",
                    "type": "LPINT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetShellWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getshellwindow",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetSubMenu",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsubmenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu.",
                    "possible_constants": []
                },
                {
                    "name": "nPos",
                    "type": "int",
                    "description": "Type: int The zero-based relative position in the specified menu of an item that activates a drop-down menu or submenu.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSysColor",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsyscolor",
            "description": "",
            "parameters": [
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The display element whose color is to be retrieved. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSysColorBrush",
            "return_type": "HBRUSH",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsyscolorbrush",
            "description": "",
            "parameters": [
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "A color index. This value corresponds to the color used to paint one of the window elements. See GetSysColor for system color index values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSystemDpiForProcess",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemdpiforprocess",
            "description": "",
            "parameters": [
                {
                    "name": "hProcess",
                    "type": "HANDLE",
                    "description": " The handle for the process to examine. If this value is null, this API behaves identically to GetDpiForSystem.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSystemMenu",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmenu",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that will own a copy of the window menu.",
                    "possible_constants": []
                },
                {
                    "name": "bRevert",
                    "type": "BOOL",
                    "description": "Type: BOOL The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. The previous window menu, if any, is destroyed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSystemMetrics",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics",
            "description": "",
            "parameters": [
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The system metric or configuration setting to be retrieved. This parameter can be one of the following values.\nNote that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings\ndesigned to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetSystemMetricsForDpi",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetricsfordpi",
            "description": "",
            "parameters": [
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "The system metric or configuration setting to be retrieved. See GetSystemMetrics for the possible values.",
                    "possible_constants": []
                },
                {
                    "name": "dpi",
                    "type": "UINT",
                    "description": "The DPI to use for scaling the metric.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetTabbedTextExtentA",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettabbedtextextenta",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "A pointer to a character string.",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.",
                    "possible_constants": []
                },
                {
                    "name": "nTabPositions",
                    "type": "int",
                    "description": "The number of tab-stop positions in the array pointed to by the lpnTabStopPositions parameter. [in] lpnTabStopPositions A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.",
                    "possible_constants": []
                },
                {
                    "name": "*lpnTabStopPositions",
                    "type": "const INT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetTabbedTextExtentW",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettabbedtextextentw",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "A pointer to a character string.",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.",
                    "possible_constants": []
                },
                {
                    "name": "nTabPositions",
                    "type": "int",
                    "description": "The number of tab-stop positions in the array pointed to by the lpnTabStopPositions parameter. [in] lpnTabStopPositions A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.",
                    "possible_constants": []
                },
                {
                    "name": "*lpnTabStopPositions",
                    "type": "const INT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetThreadDesktop",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddesktop",
            "description": "",
            "parameters": [
                {
                    "name": "dwThreadId",
                    "type": "DWORD",
                    "description": "The thread identifier. The\nGetCurrentThreadId and\nCreateProcess functions return thread identifiers.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetThreadDpiAwarenessContext",
            "return_type": "DPI_AWARENESS_CONTEXT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddpiawarenesscontext",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetThreadDpiHostingBehavior",
            "return_type": "DPI_HOSTING_BEHAVIOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getthreaddpihostingbehavior",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetTitleBarInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettitlebarinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the title bar whose information is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "pti",
                    "type": "PTITLEBARINFO",
                    "description": "Type: PTITLEBARINFO A pointer to a TITLEBARINFO structure to receive the information. Note that you must set the cbSize member to sizeof(TITLEBARINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetTopWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettopwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetTouchInputInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gettouchinputinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hTouchInput",
                    "type": "HTOUCHINPUT",
                    "description": "The touch input handle received in the LPARAM of a touch message. The function fails with ERROR_INVALID_HANDLE if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to CloseTouchInputHandle or after it has been passed to DefWindowProc, PostMessage, SendMessage or one of their variants.",
                    "possible_constants": []
                },
                {
                    "name": "cInputs",
                    "type": "UINT",
                    "description": "The number of structures in the pInputs array. This should ideally be at least equal to the number of touch points associated with the message as indicated in the message WPARAM. If cInputs is less than the number of touch points, the function will still succeed and populate the pInputs buffer with information about cInputs touch points. [out] pInputs A pointer to an array of TOUCHINPUT structures to receive information about the touch points associated with the specified touch input handle.",
                    "possible_constants": []
                },
                {
                    "name": "pInputs",
                    "type": "PTOUCHINPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "int",
                    "description": "The size, in bytes, of a single TOUCHINPUT structure. If cbSize is not the size of a single TOUCHINPUT structure, the function fails with ERROR_INVALID_PARAMETER.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUnpredictedMessagePos",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getunpredictedmessagepos",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GetUpdatedClipboardFormats",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdatedclipboardformats",
            "description": "",
            "parameters": [
                {
                    "name": "lpuiFormats",
                    "type": "PUINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cFormats",
                    "type": "UINT",
                    "description": "Type: UINT The number of entries in the array pointed to by lpuiFormats. [out] pcFormatsOut Type: PUINT The actual number of clipboard formats in the array pointed to by lpuiFormats.",
                    "possible_constants": []
                },
                {
                    "name": "pcFormatsOut",
                    "type": "PUINT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUpdateRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdaterect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window whose update region is to be retrieved. [out] lpRect Pointer to the RECT structure that receives the coordinates, in device units, of the enclosing rectangle. An application can set this parameter to NULL to determine whether an update region exists for the window. If this parameter is NULL, GetUpdateRect returns nonzero if an update region exists, and zero if one does not. This provides a simple and efficient means of determining whether a WM_PAINT message resulted from an invalid area.",
                    "possible_constants": []
                },
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "bErase",
                    "type": "BOOL",
                    "description": "Specifies whether the background in the update region is to be erased. If this parameter is TRUE and the update region is not empty, GetUpdateRect sends a WM_ERASEBKGND message to the specified window to erase the background.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUpdateRgn",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getupdatergn",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window with an update region that is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "hRgn",
                    "type": "HRGN",
                    "description": "Handle to the region to receive the update region.",
                    "possible_constants": []
                },
                {
                    "name": "bErase",
                    "type": "BOOL",
                    "description": "Specifies whether the window background should be erased and whether nonclient areas of child windows should be drawn. If this parameter is FALSE, no drawing is done.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUserObjectInformationA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectinformationa",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to the window station or desktop object. This handle is returned by the\nCreateWindowStation,\nOpenWindowStation,\nCreateDesktop, or\nOpenDesktop function.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "The information to be retrieved. The parameter can be one of the following values. [out, optional] pvInfo A pointer to a buffer to receive the object information.",
                    "possible_constants": []
                },
                {
                    "name": "pvInfo",
                    "type": "PVOID",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nLength",
                    "type": "DWORD",
                    "description": "The size of the buffer pointed to by the pvInfo parameter, in bytes. [out, optional] lpnLengthNeeded A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE, and none of the information is copied to the pvInfo buffer. If the value of the variable pointed to by lpnLengthNeeded is less than or equal to the value of nLength, the entire information block is copied.",
                    "possible_constants": []
                },
                {
                    "name": "lpnLengthNeeded",
                    "type": "LPDWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUserObjectInformationW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectinformationw",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to the window station or desktop object. This handle is returned by the\nCreateWindowStation,\nOpenWindowStation,\nCreateDesktop, or\nOpenDesktop function.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "The information to be retrieved. The parameter can be one of the following values. [out, optional] pvInfo A pointer to a buffer to receive the object information.",
                    "possible_constants": []
                },
                {
                    "name": "pvInfo",
                    "type": "PVOID",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nLength",
                    "type": "DWORD",
                    "description": "The size of the buffer pointed to by the pvInfo parameter, in bytes. [out, optional] lpnLengthNeeded A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE, and none of the information is copied to the pvInfo buffer. If the value of the variable pointed to by lpnLengthNeeded is less than or equal to the value of nLength, the entire information block is copied.",
                    "possible_constants": []
                },
                {
                    "name": "lpnLengthNeeded",
                    "type": "LPDWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetUserObjectSecurity",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getuserobjectsecurity",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to the user object for which to return security information.",
                    "possible_constants": []
                },
                {
                    "name": "pSIRequested",
                    "type": "PSECURITY_INFORMATION",
                    "description": "A pointer to a\nSECURITY_INFORMATION value that specifies the security information being requested.",
                    "possible_constants": []
                },
                {
                    "name": "pSID",
                    "type": "PSECURITY_DESCRIPTOR",
                    "description": "A pointer to a\nSECURITY_DESCRIPTOR structure in self-relative format that contains the requested information when the function returns. This buffer must be aligned on a 4-byte boundary.",
                    "possible_constants": []
                },
                {
                    "name": "nLength",
                    "type": "DWORD",
                    "description": "The length, in bytes, of the buffer pointed to by the pSD parameter. [out] lpnLengthNeeded A pointer to a variable to receive the number of bytes required to store the complete security descriptor. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE and none of the security descriptor is copied to the buffer. Otherwise, the entire security descriptor is copied.",
                    "possible_constants": []
                },
                {
                    "name": "lpnLengthNeeded",
                    "type": "LPDWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uCmd",
                    "type": "UINT",
                    "description": "Type: UINT The relationship between the specified window and the window whose handle is to be retrieved. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowContextHelpId",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowcontexthelpid",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HWND",
                    "description": " Type: HWND A handle to the window for which the Help context identifier is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowDC",
            "return_type": "HDC",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdc",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window with a device context that is to be retrieved. If this value is NULL, GetWindowDC retrieves the device context for the entire screen. If this parameter is NULL, GetWindowDC retrieves the device context for the primary display monitor. To get the device context for other display monitors, use the EnumDisplayMonitors and CreateDC functions.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowDisplayAffinity",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdisplayaffinity",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window. [out] pdwAffinity Type: DWORD* A pointer to a variable that receives the display affinity setting.\nSee SetWindowDisplayAffinity for a list of affinity settings and their meanings.",
                    "possible_constants": []
                },
                {
                    "name": "*pdwAffinity",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowDpiAwarenessContext",
            "return_type": "DPI_AWARENESS_CONTEXT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window to query.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowDpiHostingBehavior",
            "return_type": "DPI_HOSTING_BEHAVIOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdpihostingbehavior",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": " The handle for the window to examine.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowFeedbackSetting",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowfeedbacksetting",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window to check for feedback configuration.",
                    "possible_constants": []
                },
                {
                    "name": "feedback",
                    "type": "FEEDBACK_TYPE",
                    "description": "One of the values from the FEEDBACK_TYPE enumeration.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Specify GWFS_INCLUDE_ANCESTORS to check the parent window chain until a value is found. The default is 0 and indicates that only the specified window will be checked. [in, out] pSize The size of memory region that the config parameter points to. The pSize parameter specifies the size of the configuration data for the feedback type in feedback and must be sizeof(BOOL). [out, optional] config The configuration data. The config parameter must point to a value of type BOOL.",
                    "possible_constants": []
                },
                {
                    "name": "*pSize",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*config",
                    "type": "VOID",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose information is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "pwi",
                    "type": "PWINDOWINFO",
                    "description": "Type: PWINDOWINFO A pointer to a WINDOWINFO structure to receive the information. Note that you must set the cbSize member to sizeof(WINDOWINFO) before calling this function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowLongA",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlonga",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowLongPtrA",
            "return_type": "LONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongptra",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To retrieve any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowLongPtrW",
            "return_type": "LONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongptrw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To retrieve any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowLongW",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowModuleFileNameA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowmodulefilenamea",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose module file name is to be retrieved. [out] pszFileName Type: LPTSTR The path and file name.",
                    "possible_constants": []
                },
                {
                    "name": "pszFileName",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchFileNameMax",
                    "type": "UINT",
                    "description": "Type: UINT The maximum number of characters that can be copied into the lpszFileName buffer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowModuleFileNameW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowmodulefilenamew",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose module file name is to be retrieved. [out] pszFileName Type: LPTSTR The path and file name.",
                    "possible_constants": []
                },
                {
                    "name": "pszFileName",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchFileNameMax",
                    "type": "UINT",
                    "description": "Type: UINT The maximum number of characters that can be copied into the lpszFileName buffer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowPlacement",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowplacement",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window. [in, out] lpwndpl Type: WINDOWPLACEMENT* A pointer to the WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.",
                    "possible_constants": []
                },
                {
                    "name": "*lpwndpl",
                    "type": "WINDOWPLACEMENT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window. [out] lpRect Type: LPRECT A pointer to a  RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.",
                    "possible_constants": []
                },
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowRgn",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrgn",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window whose window region is to be obtained.",
                    "possible_constants": []
                },
                {
                    "name": "hRgn",
                    "type": "HRGN",
                    "description": "Handle to the region which will be modified to represent the window region.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowRgnBox",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrgnbox",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window. [out] lprc Pointer to a RECT structure that receives the rectangle dimensions, in device units relative to the upper-left corner of the window.",
                    "possible_constants": []
                },
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowTextA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtexta",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control containing the text. [out] lpString Type: LPTSTR The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nMaxCount",
                    "type": "int",
                    "description": "Type: int The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowTextLengthA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextlengtha",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowTextLengthW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextlengthw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowTextW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control containing the text. [out] lpString Type: LPTSTR The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nMaxCount",
                    "type": "int",
                    "description": "Type: int The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowThreadProcessId",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowthreadprocessid",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window. [out, optional] lpdwProcessId Type: LPDWORD A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not. If the function fails, the value of the variable is unchanged.",
                    "possible_constants": []
                },
                {
                    "name": "lpdwProcessId",
                    "type": "LPDWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GetWindowWord",
            "return_type": "WORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowword",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": " A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": " The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GID_ROTATE_ANGLE_FROM_ARGUMENT",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gid_rotate_angle_from_argument",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GID_ROTATE_ANGLE_TO_ARGUMENT",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-gid_rotate_angle_to_argument",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "GrayStringA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-graystringa",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "hBrush",
                    "type": "HBRUSH",
                    "description": "A handle to the brush to be used for graying. If this parameter is NULL, the text is grayed with the same brush that was used to draw window text.",
                    "possible_constants": []
                },
                {
                    "name": "lpOutputFunc",
                    "type": "GRAYSTRINGPROC",
                    "description": "A pointer to the application-defined function that will draw the string, or, if TextOut is to be used to draw the string, it is a NULL pointer. For details, see the OutputProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lpData",
                    "type": "LPARAM",
                    "description": "A pointer to data to be passed to the output function. If the lpOutputFunc parameter is NULL, lpData must be a pointer to the string to be output.",
                    "possible_constants": []
                },
                {
                    "name": "nCount",
                    "type": "int",
                    "description": "The number of characters to be output. If the nCount parameter is zero, GrayString calculates the length of the string (assuming lpData is a pointer to the string). If nCount is 1 and the function pointed to by lpOutputFunc returns FALSE, the image is shown but not grayed.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "The device x-coordinate of the starting position of the rectangle that encloses the string.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "The device y-coordinate of the starting position of the rectangle that encloses the string.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "The width, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the width of the area, assuming lpData is a pointer to the string.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "The height, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the height of the area, assuming lpData is a pointer to the string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "GrayStringW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-graystringw",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "hBrush",
                    "type": "HBRUSH",
                    "description": "A handle to the brush to be used for graying. If this parameter is NULL, the text is grayed with the same brush that was used to draw window text.",
                    "possible_constants": []
                },
                {
                    "name": "lpOutputFunc",
                    "type": "GRAYSTRINGPROC",
                    "description": "A pointer to the application-defined function that will draw the string, or, if TextOut is to be used to draw the string, it is a NULL pointer. For details, see the OutputProc callback function.",
                    "possible_constants": []
                },
                {
                    "name": "lpData",
                    "type": "LPARAM",
                    "description": "A pointer to data to be passed to the output function. If the lpOutputFunc parameter is NULL, lpData must be a pointer to the string to be output.",
                    "possible_constants": []
                },
                {
                    "name": "nCount",
                    "type": "int",
                    "description": "The number of characters to be output. If the nCount parameter is zero, GrayString calculates the length of the string (assuming lpData is a pointer to the string). If nCount is 1 and the function pointed to by lpOutputFunc returns FALSE, the image is shown but not grayed.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "The device x-coordinate of the starting position of the rectangle that encloses the string.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "The device y-coordinate of the starting position of the rectangle that encloses the string.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "The width, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the width of the area, assuming lpData is a pointer to the string.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "The height, in device units, of the rectangle that encloses the string. If this parameter is zero, GrayString calculates the height of the area, assuming lpData is a pointer to the string.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HAS_POINTER_CONFIDENCE_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-has_pointer_confidence_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "HideCaret",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-hidecaret",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the caret. If this parameter is NULL, HideCaret searches the current task for the window that owns the caret.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "HiliteMenuItem",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-hilitemenuitem",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that contains the menu.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu bar that contains the item.",
                    "possible_constants": []
                },
                {
                    "name": "uIDHiliteItem",
                    "type": "UINT",
                    "description": "Type: UINT The menu item. This parameter is either the identifier of the menu item or the offset of the menu item in the menu bar, depending on the value of the uHilite parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uHilite",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uItemHilite parameter and indicates whether the menu item is highlighted. This parameter must be a combination of either MF_BYCOMMAND or MF_BYPOSITION and MF_HILITE or MF_UNHILITE.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InflateRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-inflaterect",
            "description": "",
            "parameters": [
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "A pointer to the RECT structure that increases or decreases in size.",
                    "possible_constants": []
                },
                {
                    "name": "dx",
                    "type": "int",
                    "description": "The amount to increase or decrease the rectangle width. This parameter must be negative to decrease the width.",
                    "possible_constants": []
                },
                {
                    "name": "dy",
                    "type": "int",
                    "description": "The amount to increase or decrease the rectangle height. This parameter must be negative to decrease the height.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InheritWindowMonitor",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-inheritwindowmonitor",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Inherit An HWND handle to the window from which the monitor is inherited.",
                    "possible_constants": []
                },
                {
                    "name": "hwndInherit",
                    "type": "HWND",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InitializeTouchInjection",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-initializetouchinjection",
            "description": "",
            "parameters": [
                {
                    "name": "maxCount",
                    "type": "UINT32",
                    "description": "The maximum number of touch contacts. The maxCount parameter must be greater than 0 and less than or equal to MAX_TOUCH_COUNT (256) as  defined in winuser.h.",
                    "possible_constants": []
                },
                {
                    "name": "dwMode",
                    "type": "DWORD",
                    "description": "The contact visualization mode. The dwMode parameter must be   TOUCH_FEEDBACK_DEFAULT, TOUCH_FEEDBACK_INDIRECT, or TOUCH_FEEDBACK_NONE.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InjectSyntheticPointerInput",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-injectsyntheticpointerinput",
            "description": "",
            "parameters": [
                {
                    "name": "device",
                    "type": "HSYNTHETICPOINTERDEVICE",
                    "description": " A handle to the pointer injection device created by CreateSyntheticPointerDevice. [in] pointerInfo An array of POINTER_TYPE_INFO structures represneting the injected pointers. The type must match the pointerType parameter of the CreateSyntheticPointerDevice call that created the injection device. The ptPixelLocation for each POINTER_TYPE_INFO is specified relative to top left of the virtual screen:",
                    "possible_constants": []
                },
                {
                    "name": "*pointerInfo",
                    "type": "const POINTER_TYPE_INFO",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "count",
                    "type": "UINT32",
                    "description": "The number of contacts. For PT_TOUCH this value must be greater than 0 and less than or equal to MAX_TOUCH_COUNT. For PT_PEN this value must be 1.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InjectTouchInput",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-injecttouchinput",
            "description": "",
            "parameters": [
                {
                    "name": "count",
                    "type": "UINT32",
                    "description": "The size of the array in contacts. The maximum value for count is specified by the maxCount parameter of the InitializeTouchInjection function. [in] contacts Array of POINTER_TOUCH_INFO structures that represents all contacts on the desktop. The  screen coordinates of each contact must be within the bounds of the desktop.",
                    "possible_constants": []
                },
                {
                    "name": "*contacts",
                    "type": "const POINTER_TOUCH_INFO",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InSendMessage",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insendmessage",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "InSendMessageEx",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insendmessageex",
            "description": "",
            "parameters": [
                {
                    "name": "lpReserved",
                    "type": "LPVOID",
                    "description": " Type: LPVOID Reserved; must be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InsertMenuA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenua",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values. The parameter must also include at least one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InsertMenuItemA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitema",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu in which the new menu item is inserted.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPosition",
                    "type": "BOOL",
                    "description": "Type: BOOL Controls the meaning of item. If this parameter is FALSE, item is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.",
                    "possible_constants": []
                },
                {
                    "name": "lpmi",
                    "type": "LPCMENUITEMINFOA",
                    "description": "Type: LPCMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the new menu item.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InsertMenuItemW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuitemw",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu in which the new menu item is inserted.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPosition",
                    "type": "BOOL",
                    "description": "Type: BOOL Controls the meaning of item. If this parameter is FALSE, item is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information.",
                    "possible_constants": []
                },
                {
                    "name": "lpmi",
                    "type": "LPCMENUITEMINFOW",
                    "description": "Type: LPCMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the new menu item.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InsertMenuW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-insertmenuw",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values. The parameter must also include at least one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InternalGetWindowText",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-internalgetwindowtext",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control containing the text. [out] pString Type: LPWSTR The buffer that is to receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.",
                    "possible_constants": []
                },
                {
                    "name": "pString",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchMaxCount",
                    "type": "int",
                    "description": "Type: int The maximum number of characters to be copied to the buffer, including the null character. If the text exceeds this limit, it is truncated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IntersectRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-intersectrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprcDst",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc1",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc2",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InvalidateRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidaterect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose update region has changed. If this parameter is NULL, the system invalidates and redraws all windows, not just the windows for this application, and sends the WM_ERASEBKGND and WM_NCPAINT messages before the function returns. Setting this parameter to NULL is not recommended. [in] lpRect A pointer to a RECT structure that contains the client coordinates of the rectangle to be added to the update region. If this parameter is NULL, the entire client area is added to the update region.",
                    "possible_constants": []
                },
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "bErase",
                    "type": "BOOL",
                    "description": "Specifies whether the background within the update region is to be erased when the update region is processed. If this parameter is TRUE, the background is erased when the BeginPaint function is called. If this parameter is FALSE, the background remains unchanged.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InvalidateRgn",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidatergn",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window with an update region that is to be modified.",
                    "possible_constants": []
                },
                {
                    "name": "hRgn",
                    "type": "HRGN",
                    "description": "A handle to the region to be added to the update region. The region is assumed to have client coordinates. If this parameter is NULL, the entire client area is added to the update region.",
                    "possible_constants": []
                },
                {
                    "name": "bErase",
                    "type": "BOOL",
                    "description": "Specifies whether the background within the update region should be erased when the update region is processed. If this parameter is TRUE, the background is erased when the BeginPaint function is called. If the parameter is FALSE, the background remains unchanged.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "InvertRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invertrect",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the device context. [in] lprc A pointer to a RECT structure that contains the logical coordinates of the rectangle to be inverted.",
                    "possible_constants": []
                },
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IS_INTRESOURCE",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_intresource",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_CANCELED_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_canceled_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_FIFTHBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_fifthbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_FIRSTBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_firstbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_FLAG_SET_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_flag_set_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_FOURTHBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_fourthbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_INCONTACT_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_incontact_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_INRANGE_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_inrange_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_NEW_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_new_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_PRIMARY_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_primary_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_SECONDBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_secondbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IS_POINTER_THIRDBUTTON_WPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-is_pointer_thirdbutton_wparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IsCharAlphaA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphaa",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharAlphaNumericA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphanumerica",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharAlphaNumericW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphanumericw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharAlphaW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaralphaw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharLowerA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarlowera",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharLowerW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarlowerw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": " Type: WCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharUpperA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischaruppera",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: CHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsCharUpperW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischarupperw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": "Type: TCHAR The character to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsChild",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ischild",
            "description": "",
            "parameters": [
                {
                    "name": "hWndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsClipboardFormatAvailable",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isclipboardformatavailable",
            "description": "",
            "parameters": [
                {
                    "name": "format",
                    "type": "UINT",
                    "description": "Type: UINT A standard or registered clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats .",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsDialogMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdialogmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains the message to be checked.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsDialogMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdialogmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains the message to be checked.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsDlgButtonChecked",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isdlgbuttonchecked",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the button control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDButton",
                    "type": "int",
                    "description": "Type: int The identifier of the button control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsGUIThread",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isguithread",
            "description": "",
            "parameters": [
                {
                    "name": "bConvert",
                    "type": "BOOL",
                    "description": "Type: BOOL If TRUE and the thread is not a GUI thread, convert the thread to a GUI thread.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsHungAppWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ishungappwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsIconic",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isiconic",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsImmersiveProcess",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isimmersiveprocess",
            "description": "",
            "parameters": [
                {
                    "name": "hProcess",
                    "type": "HANDLE",
                    "description": "Target process handle.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ismenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsMouseInPointerEnabled",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ismouseinpointerenabled",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IsProcessDPIAware",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isprocessdpiaware",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IsRectEmpty",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isrectempty",
            "description": "",
            "parameters": [
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsTouchWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-istouchwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The handle of the window. The function fails with ERROR_ACCESS_DENIED if the calling thread is not on the same desktop as the specified window. [out, optional] pulFlags The address of the ULONG variable to receive the modifier flags for the specified window's touch capability.",
                    "possible_constants": []
                },
                {
                    "name": "pulFlags",
                    "type": "PULONG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsValidDpiAwarenessContext",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-isvaliddpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "value",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "The context that you want to determine if it is supported.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWindowArranged",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowarranged",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": " Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWindowEnabled",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowenabled",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWindowUnicode",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowunicode",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWindowVisible",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowvisible",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWinEventHookInstalled",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswineventhookinstalled",
            "description": "",
            "parameters": [
                {
                    "name": "event",
                    "type": "DWORD",
                    "description": "Type: DWORD The event constant that hooks might be notified of. The function checks whether there is an installed hook for this event constant.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "IsWow64Message",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswow64message",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "IsZoomed",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iszoomed",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be tested.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "keybd_event",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-keybd_event",
            "description": "",
            "parameters": [
                {
                    "name": "bVk",
                    "type": "BYTE",
                    "description": "Type: BYTE A virtual-key code. The code must be a value in the range 1 to 254. For a complete list, see Virtual Key Codes.",
                    "possible_constants": []
                },
                {
                    "name": "bScan",
                    "type": "BYTE",
                    "description": "Type: BYTE A hardware scan code for the key.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD Controls various aspects of function operation. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwExtraInfo",
                    "type": "ULONG_PTR",
                    "description": "Type: ULONG_PTR An additional value associated with the key stroke.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "KillTimer",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-killtimer",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window associated with the specified timer. This value must be the same as the\nhWnd value passed to the SetTimer function that created the timer.",
                    "possible_constants": []
                },
                {
                    "name": "uIDEvent",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The timer to be destroyed. If the window handle passed to SetTimer is valid, this parameter must be the same as the\nnIDEvent value passed to SetTimer. If the application calls SetTimer with\nhWnd set to NULL, this parameter must be the timer identifier returned by SetTimer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadAcceleratorsA",
            "return_type": "HACCEL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadacceleratorsa",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module whose executable file contains the accelerator table to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpTableName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadAcceleratorsW",
            "return_type": "HACCEL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadacceleratorsw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module whose executable file contains the accelerator table to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpTableName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadBitmapA",
            "return_type": "HBITMAP",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadbitmapa",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "A handle to the instance of the module whose executable file contains the bitmap to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpBitmapName",
                    "type": "LPCSTR",
                    "description": "A pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadBitmapW",
            "return_type": "HBITMAP",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadbitmapw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "A handle to the instance of the module whose executable file contains the bitmap to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpBitmapName",
                    "type": "LPCWSTR",
                    "description": "A pointer to a null-terminated string that contains the name of the bitmap resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can be used to create this value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadCursorA",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursora",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see GetModuleHandle. To load a predefined system cursor, set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpCursorName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR If hInstance is non-NULL, lpCursorName specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the MAKEINTRESOURCE macro. If hInstance is NULL, lpCursorName specifies the identifier (beginning with the IDC_ prefix) of a predefined system cursor to load.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadCursorFromFileA",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorfromfilea",
            "description": "",
            "parameters": [
                {
                    "name": "lpFileName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format. If the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadCursorFromFileW",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorfromfilew",
            "description": "",
            "parameters": [
                {
                    "name": "lpFileName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format. If the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadCursorW",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see GetModuleHandle. To load a predefined system cursor, set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpCursorName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR If hInstance is non-NULL, lpCursorName specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the MAKEINTRESOURCE macro. If hInstance is NULL, lpCursorName specifies the identifier that begins with the IDC_ prefix of a predefined system cursor to load.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadIconA",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadicona",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see GetModuleHandle. To load a predefined system icon, set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpIconName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR If hInstance is non-NULL, lpIconName specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the MAKEINTRESOURCE macro. If hInstance is NULL, lpIconName specifies the identifier (beginning with the IDI_ prefix) of a predefined system icon to load.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadIconW",
            "return_type": "HICON",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadiconw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see GetModuleHandle. To load a predefined system icon, set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "lpIconName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR If hInstance is non-NULL, lpIconName specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the MAKEINTRESOURCE macro. If hInstance is NULL, lpIconName specifies the identifier (beginning with the IDI_ prefix) of a predefined system icon to load.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadImageA",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagea",
            "description": "",
            "parameters": [
                {
                    "name": "hInst",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of  32-bit Windows, an instance handle (HINSTANCE), such as the application instance handle exposed by system function call of WinMain, and a module handle (HMODULE) are the same thing. To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "name",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The image to be loaded. If the hInst parameter is non-NULL and the fuLoad parameter omits LR_LOADFROMFILE, name specifies the image resource in the hInst module. If the image resource is to be loaded by name from the module, the name parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the MAKEINTRESOURCE macro to convert the image ordinal into a form that can be passed to the LoadImage function. If the hInst parameter is NULL and the fuLoad parameter omits the LR_LOADFROMFILE value and includes the LR_SHARED, the name specifies the predefined image to load. The predefined image identifiers are defined in Winuser.h and have the following prefixes: To pass OEM image identifiers constants to the LoadImage function, use the MAKEINTRESOURCE macro. For example, to load the OCR_NORMAL cursor, pass MAKEINTRESOURCE(OCR_NORMAL) as the name parameter, NULL as the hInst parameter, and LR_SHARED as one of the flags to the fuLoad parameter. If the hInst parameter is NULL and the fuLoad parameter includes the LR_LOADFROMFILE value, name is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, c:\\myicon.ico. For more information, see the Remarks section below.",
                    "possible_constants": []
                },
                {
                    "name": "type",
                    "type": "UINT",
                    "description": "Type: UINT The type of image to be loaded. This parameter can be one of the following values:",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "Type: int The width, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "Type: int The height, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.",
                    "possible_constants": []
                },
                {
                    "name": "fuLoad",
                    "type": "UINT",
                    "description": "Type: UINT This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadImageW",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagew",
            "description": "",
            "parameters": [
                {
                    "name": "hInst",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of  32-bit Windows, an instance handle (HINSTANCE), such as the application instance handle exposed by system function call of WinMain, and a module handle (HMODULE) are the same thing. To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "name",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The image to be loaded. If the hInst parameter is non-NULL and the fuLoad parameter omits LR_LOADFROMFILE, name specifies the image resource in the hInst module. If the image resource is to be loaded by name from the module, the name parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the MAKEINTRESOURCE macro to convert the image ordinal into a form that can be passed to the LoadImage function. If the hInst parameter is NULL and the fuLoad parameter omits the LR_LOADFROMFILE value and includes the LR_SHARED, the name specifies the predefined image to load. The predefined image identifiers are defined in Winuser.h and have the following prefixes: To pass OEM image identifiers constants to the LoadImage function, use the MAKEINTRESOURCE macro. For example, to load the OCR_NORMAL cursor, pass MAKEINTRESOURCE(OCR_NORMAL) as the name parameter, NULL as the hInst parameter, and LR_SHARED as one of the flags to the fuLoad parameter. If the hInst parameter is NULL and the fuLoad parameter includes the LR_LOADFROMFILE value, name is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, c:\\myicon.ico. For more information, see the Remarks section below.",
                    "possible_constants": []
                },
                {
                    "name": "type",
                    "type": "UINT",
                    "description": "Type: UINT The type of image to be loaded. This parameter can be one of the following values:",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "Type: int The width, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "Type: int The height, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.",
                    "possible_constants": []
                },
                {
                    "name": "fuLoad",
                    "type": "UINT",
                    "description": "Type: UINT This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadKeyboardLayoutA",
            "return_type": "HKL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayouta",
            "description": "",
            "parameters": [
                {
                    "name": "pwszKLID",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the Language Identifier (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout (such as the Dvorak layout) are named \"00010409\", \"00020409\", and so on. For a list of the input layouts that are supplied with Windows, see Keyboard Identifiers and Input Method Editors for Windows.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how the input locale identifier is to be loaded. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadKeyboardLayoutW",
            "return_type": "HKL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayoutw",
            "description": "",
            "parameters": [
                {
                    "name": "pwszKLID",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the Language Identifier (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout (such as the Dvorak layout) are named \"00010409\", \"00020409\", and so on. For a list of the input layouts that are supplied with Windows, see Keyboard Identifiers and Input Method Editors for Windows.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how the input locale identifier is to be loaded. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadMenuA",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenua",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module containing the menu resource to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpMenuName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadMenuIndirectA",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuindirecta",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMenuTemplate",
                    "type": "const MENUTEMPLATEA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadMenuIndirectW",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuindirectw",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMenuTemplate",
                    "type": "const MENUTEMPLATEW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadMenuW",
            "return_type": "HMENU",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadmenuw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the module containing the menu resource to be loaded.",
                    "possible_constants": []
                },
                {
                    "name": "lpMenuName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadStringA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringa",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.",
                    "possible_constants": []
                },
                {
                    "name": "uID",
                    "type": "UINT",
                    "description": "Type: UINT The identifier of the string to be loaded. [out] lpBuffer Type: LPTSTR The buffer to receive the string. Must be at least cchBufferMax characters in size.",
                    "possible_constants": []
                },
                {
                    "name": "lpBuffer",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchBufferMax",
                    "type": "int",
                    "description": "Type: int The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified.\nThis parameter may not be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LoadStringW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadstringw",
            "description": "",
            "parameters": [
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.",
                    "possible_constants": []
                },
                {
                    "name": "uID",
                    "type": "UINT",
                    "description": "Type: UINT The identifier of the string to be loaded. [out] lpBuffer Type: LPTSTR The buffer to receive the string (if cchBufferMax is non-zero) or a read-only pointer to the string resource itself (if cchBufferMax is zero). Must be of sufficient length to hold a pointer (8 bytes).",
                    "possible_constants": []
                },
                {
                    "name": "lpBuffer",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchBufferMax",
                    "type": "int",
                    "description": "Type: int The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the string resource itself.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LockSetForegroundWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-locksetforegroundwindow",
            "description": "",
            "parameters": [
                {
                    "name": "uLockCode",
                    "type": "UINT",
                    "description": "Type: UINT Specifies whether to enable or disable calls to SetForegroundWindow. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LockWindowUpdate",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lockwindowupdate",
            "description": "",
            "parameters": [
                {
                    "name": "hWndLock",
                    "type": "HWND",
                    "description": "The window in which drawing will be disabled. If this parameter is NULL, drawing in the locked window is enabled.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LockWorkStation",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lockworkstation",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "LogicalToPhysicalPoint",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-logicaltophysicalpoint",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "Type: LPPOINT A pointer to a POINT structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LogicalToPhysicalPointForPerMonitorDPI",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-logicaltophysicalpointforpermonitordpi",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose transform is used for the conversion.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "A pointer to a POINT structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LookupIconIdFromDirectory",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lookupiconidfromdirectory",
            "description": "",
            "parameters": [
                {
                    "name": "presbits",
                    "type": "PBYTE",
                    "description": "Type: PBYTE The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.",
                    "possible_constants": []
                },
                {
                    "name": "fIcon",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "LookupIconIdFromDirectoryEx",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-lookupiconidfromdirectoryex",
            "description": "",
            "parameters": [
                {
                    "name": "presbits",
                    "type": "PBYTE",
                    "description": "Type: PBYTE The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to valid resource data.",
                    "possible_constants": []
                },
                {
                    "name": "fIcon",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.",
                    "possible_constants": []
                },
                {
                    "name": "cxDesired",
                    "type": "int",
                    "description": "Type: int The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.",
                    "possible_constants": []
                },
                {
                    "name": "cyDesired",
                    "type": "int",
                    "description": "Type: int The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "UINT",
                    "description": "Type: UINT A combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MAKEINTRESOURCEA",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makeintresourcea",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "MAKEINTRESOURCEW",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makeintresourcew",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "MAKELPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makelparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "MAKELRESULT",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makelresult",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "MAKEWPARAM",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-makewparam",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "MapDialogRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapdialogrect",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to a dialog box. This function accepts only handles returned by one of the dialog box creation functions; handles for other windows are not valid.",
                    "possible_constants": []
                },
                {
                    "name": "lpRect",
                    "type": "LPRECT",
                    "description": "Type: LPRECT A pointer to a RECT structure that contains the dialog box coordinates to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MapVirtualKeyA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeya",
            "description": "",
            "parameters": [
                {
                    "name": "uCode",
                    "type": "UINT",
                    "description": "Type: UINT The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uMapType",
                    "type": "UINT",
                    "description": "Type: UINT The translation to be performed. The value of this parameter depends on the value of the uCode parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MapVirtualKeyExA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyexa",
            "description": "",
            "parameters": [
                {
                    "name": "uCode",
                    "type": "UINT",
                    "description": "Type: UINT The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uMapType",
                    "type": "UINT",
                    "description": "Type: UINT The translation to perform. The value of this parameter depends on the value of the uCode parameter.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier to use for translating the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MapVirtualKeyExW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyexw",
            "description": "",
            "parameters": [
                {
                    "name": "uCode",
                    "type": "UINT",
                    "description": "Type: UINT The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uMapType",
                    "type": "UINT",
                    "description": "Type: UINT The translation to perform. The value of this parameter depends on the value of the uCode parameter.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier to use for translating the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MapVirtualKeyW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapvirtualkeyw",
            "description": "",
            "parameters": [
                {
                    "name": "uCode",
                    "type": "UINT",
                    "description": "Type: UINT The virtual key code or scan code for a key. How this value is interpreted depends on the value of the uMapType parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uMapType",
                    "type": "UINT",
                    "description": "Type: UINT The translation to be performed. The value of this parameter depends on the value of the uCode parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MapWindowPoints",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mapwindowpoints",
            "description": "",
            "parameters": [
                {
                    "name": "hWndFrom",
                    "type": "HWND",
                    "description": "A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "hWndTo",
                    "type": "HWND",
                    "description": "A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are converted to screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoints",
                    "type": "LPPOINT",
                    "description": "A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.",
                    "possible_constants": []
                },
                {
                    "name": "cPoints",
                    "type": "UINT",
                    "description": "The number of POINT structures in the array pointed to by the lpPoints parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MenuItemFromPoint",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-menuitemfrompoint",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu containing the menu items to hit test.",
                    "possible_constants": []
                },
                {
                    "name": "ptScreen",
                    "type": "POINT",
                    "description": "Type: POINT A structure that specifies the location to test. If hMenu specifies a menu bar, this parameter is in window coordinates. Otherwise, it is in client coordinates.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBeep",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebeep",
            "description": "",
            "parameters": [
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "The sound to be played. The sounds are set by the user through the Sound control panel application, and then\nstored in the registry. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBox",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
                    "possible_constants": []
                },
                {
                    "name": "lpText",
                    "type": "LPCTSTR",
                    "description": "Type: LPCTSTR The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.",
                    "possible_constants": []
                },
                {
                    "name": "lpCaption",
                    "type": "LPCTSTR",
                    "description": "Type: LPCTSTR The dialog box title. If this parameter is NULL, the default title is Error.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "Type: UINT The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags. To indicate the buttons displayed in the message box, specify one of the following values. To display an icon in the message box, specify one of the following values. To indicate the default button, specify one of the following values. To indicate the modality of the dialog box, specify one of the following values. To specify other options, use one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
                    "possible_constants": []
                },
                {
                    "name": "lpText",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.",
                    "possible_constants": []
                },
                {
                    "name": "lpCaption",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The dialog box title. If this parameter is NULL, the default title is Error.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "Type: UINT The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags. To indicate the buttons displayed in the message box, specify one of the following values. To display an icon in the message box, specify one of the following values. To indicate the default button, specify one of the following values. To indicate the modality of the dialog box, specify one of the following values. To specify other options, use one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxExA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
                    "possible_constants": []
                },
                {
                    "name": "lpText",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The message to be displayed.",
                    "possible_constants": []
                },
                {
                    "name": "lpCaption",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The dialog box title. If this parameter is NULL, the default title Error is used.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "Type: UINT The contents and behavior of the dialog box. For information on the supported flags, see MessageBox.",
                    "possible_constants": []
                },
                {
                    "name": "wLanguageId",
                    "type": "WORD",
                    "description": "Type: WORD The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), the current language associated with the calling thread is used. To specify a language other than the current language, use the MAKELANGID macro to create this parameter. For more information, see MAKELANGID.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxExW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
                    "possible_constants": []
                },
                {
                    "name": "lpText",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The message to be displayed.",
                    "possible_constants": []
                },
                {
                    "name": "lpCaption",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The dialog box title. If this parameter is NULL, the default title Error is used.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "Type: UINT The contents and behavior of the dialog box. For information on the supported flags, see MessageBox.",
                    "possible_constants": []
                },
                {
                    "name": "wLanguageId",
                    "type": "WORD",
                    "description": "Type: WORD The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), the current language associated with the calling thread is used. To specify a language other than the current language, use the MAKELANGID macro to create this parameter. For more information, see MAKELANGID.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxIndirectA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxindirecta",
            "description": "",
            "parameters": [
                {
                    "name": "*lpmbp",
                    "type": "const MSGBOXPARAMSA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxIndirectW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxindirectw",
            "description": "",
            "parameters": [
                {
                    "name": "*lpmbp",
                    "type": "const MSGBOXPARAMSW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MessageBoxW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the owner window of the message box to be created. If this parameter is NULL, the message box has no owner window.",
                    "possible_constants": []
                },
                {
                    "name": "lpText",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.",
                    "possible_constants": []
                },
                {
                    "name": "lpCaption",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The dialog box title. If this parameter is NULL, the default title is Error.",
                    "possible_constants": []
                },
                {
                    "name": "uType",
                    "type": "UINT",
                    "description": "Type: UINT The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags. To indicate the buttons displayed in the message box, specify one of the following values. To display an icon in the message box, specify one of the following values. To indicate the default button, specify one of the following values. To indicate the modality of the dialog box, specify one of the following values. To specify other options, use one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ModifyMenuA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-modifymenua",
            "description": "",
            "parameters": [
                {
                    "name": "hMnu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be changed, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values. The parameter must also include at least one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the modified menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The contents of the changed menu item. The interpretation of this parameter depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ModifyMenuW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-modifymenuw",
            "description": "",
            "parameters": [
                {
                    "name": "hMnu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be changed, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values. The parameter must also include at least one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uIDNewItem",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR The identifier of the modified menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu.",
                    "possible_constants": []
                },
                {
                    "name": "lpNewItem",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The contents of the changed menu item. The interpretation of this parameter depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MonitorFromPoint",
            "return_type": "HMONITOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfrompoint",
            "description": "",
            "parameters": [
                {
                    "name": "pt",
                    "type": "POINT",
                    "description": "A POINT structure that specifies the point of interest in virtual-screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Determines the function's return value if the point is not contained within any display monitor. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MonitorFromRect",
            "return_type": "HMONITOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprc",
                    "type": "LPCRECT",
                    "description": "A pointer to a RECT structure that specifies the rectangle of interest in virtual-screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Determines the function's return value if the rectangle does not intersect any display monitor. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MonitorFromWindow",
            "return_type": "HMONITOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "A handle to the window of interest.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Determines the function's return value if the window does not intersect any display monitor. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "mouse_event",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event",
            "description": "",
            "parameters": [
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD Controls various aspects of mouse motion and button clicking. This parameter can be certain combinations of the following values. The values that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released. You cannot specify both MOUSEEVENTF_WHEEL and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP simultaneously in the\ndwFlags parameter, because they both require use of the\ndwData field.",
                    "possible_constants": []
                },
                {
                    "name": "dx",
                    "type": "DWORD",
                    "description": "Type: DWORD The mouse's absolute position along the x-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual x-coordinate; relative data is specified as the number of mickeys moved. A\nmickey is the amount that a mouse has to move for it to report that it has moved.",
                    "possible_constants": []
                },
                {
                    "name": "dy",
                    "type": "DWORD",
                    "description": "Type: DWORD The mouse's absolute position along the y-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual y-coordinate; relative data is specified as the number of mickeys moved.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "DWORD",
                    "description": "Type: DWORD If\ndwFlags contains MOUSEEVENTF_WHEEL, then\ndwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120. If dwFlags contains MOUSEEVENTF_HWHEEL, then\ndwData specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left. If\ndwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then\ndwData specifies which X buttons were pressed or released. This value may be any combination of the following flags. If\ndwFlags is not MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then\ndwData should be zero.",
                    "possible_constants": []
                },
                {
                    "name": "dwExtraInfo",
                    "type": "ULONG_PTR",
                    "description": "Type: ULONG_PTR An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MoveWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-movewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window.",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The new position of the left side of the window.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The new position of the top of the window.",
                    "possible_constants": []
                },
                {
                    "name": "nWidth",
                    "type": "int",
                    "description": "Type: int The new width of the window.",
                    "possible_constants": []
                },
                {
                    "name": "nHeight",
                    "type": "int",
                    "description": "Type: int The new height of the window.",
                    "possible_constants": []
                },
                {
                    "name": "bRepaint",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a  message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MsgWaitForMultipleObjects",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjects",
            "description": "",
            "parameters": [
                {
                    "name": "nCount",
                    "type": "DWORD",
                    "description": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. If this parameter has the value zero, then the function waits only for an input event. [in] pHandles An array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. It may not contain multiple copies of the same handle. If one of these handles is closed while the wait is still pending, the function's behavior is undefined. The handles must have the SYNCHRONIZE access right. For more information, see\nStandard Access Rights.",
                    "possible_constants": []
                },
                {
                    "name": "*pHandles",
                    "type": "const HANDLE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "fWaitAll",
                    "type": "BOOL",
                    "description": "If this parameter is TRUE, the function returns when the states of all objects in the pHandles array have been set to signaled and an input event has been received. If this parameter is FALSE, the function returns when the state of any one of the objects is set to signaled or an input event has been received. In this case, the return value indicates the object whose state caused the function to return.",
                    "possible_constants": []
                },
                {
                    "name": "dwMilliseconds",
                    "type": "DWORD",
                    "description": "The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled. Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008, and Windows Server 2008 R2: The dwMilliseconds value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep. Windows 8 and newer, Windows Server 2012 and newer: The dwMilliseconds value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.",
                    "possible_constants": []
                },
                {
                    "name": "dwWakeMask",
                    "type": "DWORD",
                    "description": "The input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the values listed in GetQueueStatus flags parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "MsgWaitForMultipleObjectsEx",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex",
            "description": "",
            "parameters": [
                {
                    "name": "nCount",
                    "type": "DWORD",
                    "description": "The number of object handles in the array pointed to by pHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. If this parameter has the value zero, then the function waits only for an input event. [in] pHandles An array of object handles. For a list of the object types whose handles you can specify, see the Remarks section later in this topic. The array can contain handles to multiple types of objects. It may not contain multiple copies of the same handle. If one of these handles is closed while the wait is still pending, the function's behavior is undefined. The handles must have the SYNCHRONIZE access right. For more information, see\nStandard Access Rights.",
                    "possible_constants": []
                },
                {
                    "name": "*pHandles",
                    "type": "const HANDLE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwMilliseconds",
                    "type": "DWORD",
                    "description": "The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled, an I/O completion routine or APC is queued, or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the criteria is not met; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled or an I/O completion routine or APC is queued. Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008, and Windows Server 2008 R2: The dwMilliseconds value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep. Windows 8 and newer, Windows Server 2012 and newer: The dwMilliseconds value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.",
                    "possible_constants": []
                },
                {
                    "name": "dwWakeMask",
                    "type": "DWORD",
                    "description": "The input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the values listed in GetQueueStatus flags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "The wait type. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "NEXTRAWINPUTBLOCK",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-nextrawinputblock",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "NotifyWinEvent",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-notifywinevent",
            "description": "",
            "parameters": [
                {
                    "name": "event",
                    "type": "DWORD",
                    "description": "Type: DWORD Specifies the event that occurred. This value must be one of the event constants.",
                    "possible_constants": []
                },
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to the window that contains the object that generated the event.",
                    "possible_constants": []
                },
                {
                    "name": "idObject",
                    "type": "LONG",
                    "description": "Type: LONG Identifies the object that generated the event. This value is either one of the predefined object identifiers or a custom object ID value.",
                    "possible_constants": []
                },
                {
                    "name": "idChild",
                    "type": "LONG",
                    "description": "Type: LONG Identifies whether the event was generated by an object or by a child element of the object. If this value is CHILDID_SELF, the event was generated by the object itself. If not CHILDID_SELF, this value is the child ID of the element that generated the event.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OemKeyScan",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemkeyscan",
            "description": "",
            "parameters": [
                {
                    "name": "wOemChar",
                    "type": "WORD",
                    "description": "Type: WORD The ASCII value of the OEM character.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OemToCharA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtochara",
            "description": "",
            "parameters": [
                {
                    "name": "pSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR A null-terminated string of characters from the OEM-defined character set. [out] pDst Type: LPTSTR The destination buffer, which receives the translated string. If the OemToChar function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if OemToChar is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "pDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OemToCharBuffA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharbuffa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR One or more characters from the OEM-defined character set. [out] lpszDst Type: LPTSTR The destination buffer, which receives the translated string. If the OemToCharBuff function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if the OemToCharBuff function is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "lpszDst",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchDstLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The number of\ncharacters to be translated in the buffer identified by the\nlpszSrc parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OemToCharBuffW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharbuffw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR One or more characters from the OEM-defined character set. [out] lpszDst Type: LPTSTR The destination buffer, which receives the translated string. If the OemToCharBuff function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if the OemToCharBuff function is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "lpszDst",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchDstLength",
                    "type": "DWORD",
                    "description": "Type: DWORD The number of\ncharacters to be translated in the buffer identified by the\nlpszSrc parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OemToCharW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-oemtocharw",
            "description": "",
            "parameters": [
                {
                    "name": "pSrc",
                    "type": "LPCSTR",
                    "description": "Type: LPCSTR A null-terminated string of characters from the OEM-defined character set. [out] pDst Type: LPTSTR The destination buffer, which receives the translated string. If the OemToChar function is being used as an ANSI function, the string can be translated in place by setting the\nlpszDst parameter to the same address as the\nlpszSrc parameter. This cannot be done if OemToChar is being used as a wide-character function.",
                    "possible_constants": []
                },
                {
                    "name": "pDst",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OffsetRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-offsetrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "Pointer to a RECT structure that contains the logical coordinates of the rectangle to be moved.",
                    "possible_constants": []
                },
                {
                    "name": "dx",
                    "type": "int",
                    "description": "Specifies the amount to move the rectangle left or right. This parameter must be a negative value to move the rectangle to the left.",
                    "possible_constants": []
                },
                {
                    "name": "dy",
                    "type": "int",
                    "description": "Specifies the amount to move the rectangle up or down. This parameter must be a negative value to move the rectangle up.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenClipboard",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openclipboard",
            "description": "",
            "parameters": [
                {
                    "name": "hWndNewOwner",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be associated with the open clipboard. If this parameter is NULL, the open clipboard is associated with the current task.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenDesktopA",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-opendesktopa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCSTR",
                    "description": "The name of the desktop to be opened. Desktop names are case-insensitive. This desktop must belong to the current window station.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "fInherit",
                    "type": "BOOL",
                    "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenDesktopW",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-opendesktopw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszDesktop",
                    "type": "LPCWSTR",
                    "description": "The name of the desktop to be opened. Desktop names are case-insensitive. This desktop must belong to the current window station.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "fInherit",
                    "type": "BOOL",
                    "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenIcon",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openicon",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be restored and activated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenInputDesktop",
            "return_type": "HDESK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openinputdesktop",
            "description": "",
            "parameters": [
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "This parameter can be zero or the following value.",
                    "possible_constants": []
                },
                {
                    "name": "fInherit",
                    "type": "BOOL",
                    "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the desktop. For a list of access rights, see\nDesktop Security and Access Rights.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenWindowStationA",
            "return_type": "HWINSTA",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openwindowstationa",
            "description": "",
            "parameters": [
                {
                    "name": "lpszWinSta",
                    "type": "LPCSTR",
                    "description": "The name of the window station to be opened. Window station names are case-insensitive. This window station must belong to the current session.",
                    "possible_constants": []
                },
                {
                    "name": "fInherit",
                    "type": "BOOL",
                    "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the window station. For a list of access rights, see\nWindow Station Security and Access Rights.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "OpenWindowStationW",
            "return_type": "HWINSTA",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-openwindowstationw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszWinSta",
                    "type": "LPCWSTR",
                    "description": "The name of the window station to be opened. Window station names are case-insensitive. This window station must belong to the current session.",
                    "possible_constants": []
                },
                {
                    "name": "fInherit",
                    "type": "BOOL",
                    "description": "If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.",
                    "possible_constants": []
                },
                {
                    "name": "dwDesiredAccess",
                    "type": "ACCESS_MASK",
                    "description": "The access to the window station. For a list of access rights, see\nWindow Station Security and Access Rights.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PackTouchHitTestingProximityEvaluation",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-packtouchhittestingproximityevaluation",
            "description": "",
            "parameters": [
                {
                    "name": "*pHitTestingInput",
                    "type": "const TOUCH_HIT_TESTING_INPUT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pProximityEval",
                    "type": "const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PaintDesktop",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-paintdesktop",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "Handle to the device context.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PeekMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be retrieved. The window must belong to the current thread. If hWnd is NULL, PeekMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1, PeekMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL, that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMin",
                    "type": "UINT",
                    "description": "Type: UINT The value of the first message in the range of messages to be examined. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMax",
                    "type": "UINT",
                    "description": "Type: UINT The value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wRemoveMsg",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how messages are to be handled. This parameter can be one or more of the following values. By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values. For more info on listed QS_ flags and types of messages see GetQueueStatus documentation.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PeekMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be retrieved. The window must belong to the current thread. If hWnd is NULL, PeekMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed. If hWnd is -1, PeekMessage retrieves only messages on the current thread's message queue whose hwnd value is NULL, that is, thread messages as posted by  PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMin",
                    "type": "UINT",
                    "description": "Type: UINT The value of the first message in the range of messages to be examined. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wMsgFilterMax",
                    "type": "UINT",
                    "description": "Type: UINT The value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).",
                    "possible_constants": []
                },
                {
                    "name": "wRemoveMsg",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how messages are to be handled. This parameter can be one or more of the following values. By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values. For more info on listed QS_ flags and types of messages see GetQueueStatus documentation.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PhysicalToLogicalPoint",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-physicaltologicalpoint",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "Type: LPPOINT A pointer to a POINT structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PhysicalToLogicalPointForPerMonitorDPI",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-physicaltologicalpointforpermonitordpi",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose transform is used for the conversion.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": "A pointer to a POINT structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "POINTSTOPOINT",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-pointstopoint",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "POINTTOPOINTS",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-pointtopoints",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "PostMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure is to receive the message. The following values have special meanings. Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be posted. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PostMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure is to receive the message. The following values have special meanings. Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be posted. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PostQuitMessage",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postquitmessage",
            "description": "",
            "parameters": [
                {
                    "name": "nExitCode",
                    "type": "int",
                    "description": "Type: int The application exit code. This value is used as the wParam parameter of the WM_QUIT message.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PostThreadMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postthreadmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "idThread",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section. Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level. This thread must have the SE_TCB_NAME privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID. This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The type of message to be posted.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PostThreadMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postthreadmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "idThread",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section. Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level. This thread must have the SE_TCB_NAME privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID. This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns ERROR_INVALID_THREAD_ID.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The type of message to be posted.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PrintWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-printwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": " A handle to the window that will be copied.",
                    "possible_constants": []
                },
                {
                    "name": "hdcBlt",
                    "type": "HDC",
                    "description": " A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "nFlags",
                    "type": "UINT",
                    "description": " The drawing options. It can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PrivateExtractIconsA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-privateextracticonsa",
            "description": "",
            "parameters": [
                {
                    "name": "szFileName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The path and name of the file\nfrom which the icon(s) are to be extracted.",
                    "possible_constants": []
                },
                {
                    "name": "nIconIndex",
                    "type": "int",
                    "description": "Type: int The zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.",
                    "possible_constants": []
                },
                {
                    "name": "cxIcon",
                    "type": "int",
                    "description": "Type: int The horizontal icon size wanted. See Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "cyIcon",
                    "type": "int",
                    "description": "Type: int The vertical icon size wanted. See Remarks. [out, optional] phicon Type: HICON* A pointer to the returned array of icon handles. [out, optional] piconid Type: UINT* A pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.",
                    "possible_constants": []
                },
                {
                    "name": "*phicon",
                    "type": "HICON",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*piconid",
                    "type": "UINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nIcons",
                    "type": "UINT",
                    "description": "Type: UINT The number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PrivateExtractIconsW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-privateextracticonsw",
            "description": "",
            "parameters": [
                {
                    "name": "szFileName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The path and name of the file\nfrom which the icon(s) are to be extracted.",
                    "possible_constants": []
                },
                {
                    "name": "nIconIndex",
                    "type": "int",
                    "description": "Type: int The zero-based index of the first icon to extract. For example,\nif this value is zero, the function extracts the first icon in the specified\nfile.",
                    "possible_constants": []
                },
                {
                    "name": "cxIcon",
                    "type": "int",
                    "description": "Type: int The horizontal icon size wanted. See Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "cyIcon",
                    "type": "int",
                    "description": "Type: int The vertical icon size wanted. See Remarks. [out, optional] phicon Type: HICON* A pointer to the returned array of icon handles. [out, optional] piconid Type: UINT* A pointer to a returned resource identifier for the icon that best\nfits the current display device.  The returned identifier is 0xFFFFFFFF if the\nidentifier is not available for this format.  The returned identifier is 0 if\nthe identifier cannot otherwise be obtained.",
                    "possible_constants": []
                },
                {
                    "name": "*phicon",
                    "type": "HICON",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*piconid",
                    "type": "UINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nIcons",
                    "type": "UINT",
                    "description": "Type: UINT The number of icons to extract from the file. This parameter\nis only valid when extracting from .exe and .dll files.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies flags that control this function.  These flags are the LR_*\nflags used by the LoadImage function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "PtInRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-ptinrect",
            "description": "",
            "parameters": [
                {
                    "name": "*lprc",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "pt",
                    "type": "POINT",
                    "description": "A POINT structure that contains the specified point.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "QueryDisplayConfig",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-querydisplayconfig",
            "description": "",
            "parameters": [
                {
                    "name": "flags",
                    "type": "UINT32",
                    "description": "The type of information to retrieve. The value for the Flags parameter must use one of the following values. The Flags parameter may also be bitwise OR'ed with zero or more of the following values. [in, out] numPathArrayElements Pointer to a variable that contains the number of elements in pPathInfoArray. This parameter cannot be NULL. If QueryDisplayConfig returns ERROR_SUCCESS, pNumPathInfoElements is updated with the number of valid entries in pPathInfoArray. [out] pathArray Pointer to a variable that contains an array of DISPLAYCONFIG_PATH_INFO elements. Each element in pPathInfoArray describes a single path from a source to a target. The source and target mode information indexes are only valid in combination with the pmodeInfoArray tables that are returned for the API at the same time. This parameter cannot be NULL. The pPathInfoArray is always returned in path priority order. For more information about path priority order, see Path Priority Order. [in, out] numModeInfoArrayElements Pointer to a variable that specifies the number in element of the mode information table. This parameter cannot be NULL. If QueryDisplayConfig returns ERROR_SUCCESS, pNumModeInfoArrayElements is updated with the number of valid entries in pModeInfoArray. [out] modeInfoArray Pointer to a variable that contains an array of DISPLAYCONFIG_MODE_INFO elements. This parameter cannot be NULL. [out, optional] currentTopologyId Pointer to a variable that receives the identifier of the currently active topology in the CCD database. For a list of possible values, see the DISPLAYCONFIG_TOPOLOGY_ID enumerated type. The pCurrentTopologyId parameter is only set when the Flags parameter value is QDC_DATABASE_CURRENT. If the Flags parameter value is set to QDC_DATABASE_CURRENT, the pCurrentTopologyId parameter must not be NULL. If the Flags parameter value is not set to QDC_DATABASE_CURRENT, the pCurrentTopologyId parameter value must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*numPathArrayElements",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pathArray",
                    "type": "DISPLAYCONFIG_PATH_INFO",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*numModeInfoArrayElements",
                    "type": "UINT32",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*modeInfoArray",
                    "type": "DISPLAYCONFIG_MODE_INFO",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*currentTopologyId",
                    "type": "DISPLAYCONFIG_TOPOLOGY_ID",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RealChildWindowFromPoint",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realchildwindowfrompoint",
            "description": "",
            "parameters": [
                {
                    "name": "hwndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose child is to be retrieved.",
                    "possible_constants": []
                },
                {
                    "name": "ptParentClientCoords",
                    "type": "POINT",
                    "description": "Type: POINT A POINT structure that defines the client coordinates of the point to be checked.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RealGetWindowClassA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realgetwindowclassa",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose type will be retrieved. [out] ptszClassName Type: LPTSTR A pointer to a string that receives the window type.",
                    "possible_constants": []
                },
                {
                    "name": "ptszClassName",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchClassNameMax",
                    "type": "UINT",
                    "description": "Type: UINT The length, in characters, of the buffer pointed to by the pszType parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RealGetWindowClassW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-realgetwindowclassw",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose type will be retrieved. [out] ptszClassName Type: LPTSTR A pointer to a string that receives the window type.",
                    "possible_constants": []
                },
                {
                    "name": "ptszClassName",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchClassNameMax",
                    "type": "UINT",
                    "description": "Type: UINT The length, in characters, of the buffer pointed to by the pszType parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RedrawWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-redrawwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window to be redrawn. If this parameter is NULL, the desktop window is updated. [in] lprcUpdate A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle. This parameter is ignored if the hrgnUpdate parameter identifies a region.",
                    "possible_constants": []
                },
                {
                    "name": "*lprcUpdate",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hrgnUpdate",
                    "type": "HRGN",
                    "description": "A handle to the update region. If both the hrgnUpdate and lprcUpdate parameters are NULL, the entire client area is added to the update region.",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "One or more redraw flags. This parameter can be used to invalidate or validate a window, control repainting, and control which windows are affected by RedrawWindow. The following flags are used to invalidate the window. The following flags are used to validate the window. The following flags control when repainting occurs. RedrawWindow will not repaint unless one of these flags is specified. By default, the windows affected by RedrawWindow depend on whether the specified window has the WS_CLIPCHILDREN style. Child windows that are not the WS_CLIPCHILDREN style are unaffected; non-WS_CLIPCHILDREN windows are recursively validated or invalidated until a WS_CLIPCHILDREN window is encountered. The following flags control which windows are affected by the RedrawWindow function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClassA",
            "return_type": "ATOM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassa",
            "description": "",
            "parameters": [
                {
                    "name": "*lpWndClass",
                    "type": "const WNDCLASSA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClassExA",
            "return_type": "ATOM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexa",
            "description": "",
            "parameters": [
                {
                    "name": "*unnamedParam1",
                    "type": "const WNDCLASSEXA",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClassExW",
            "return_type": "ATOM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexw",
            "description": "",
            "parameters": [
                {
                    "name": "*unnamedParam1",
                    "type": "const WNDCLASSEXW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClassW",
            "return_type": "ATOM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassw",
            "description": "",
            "parameters": [
                {
                    "name": "*lpWndClass",
                    "type": "const WNDCLASSW",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClipboardFormatA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclipboardformata",
            "description": "",
            "parameters": [
                {
                    "name": "lpszFormat",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The name of the new format.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterClipboardFormatW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclipboardformatw",
            "description": "",
            "parameters": [
                {
                    "name": "lpszFormat",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The name of the new format.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterDeviceNotificationA",
            "return_type": "HDEVNOTIFY",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationa",
            "description": "",
            "parameters": [
                {
                    "name": "hRecipient",
                    "type": "HANDLE",
                    "description": "A handle to the window or service that will receive device events for the devices specified in the\nNotificationFilter parameter. The same window handle can be used in multiple calls to\nRegisterDeviceNotification. Services can specify either a window handle or service status handle.",
                    "possible_constants": []
                },
                {
                    "name": "NotificationFilter",
                    "type": "LPVOID",
                    "description": "A pointer to a block of data that specifies the type of device for which notifications should be sent. This\nblock always begins with the DEV_BROADCAST_HDR\nstructure. The data following this header is dependent on the value of the\ndbch_devicetype member, which can be\nDBT_DEVTYP_DEVICEINTERFACE or DBT_DEVTYP_HANDLE. For more\ninformation, see Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "DWORD",
                    "description": "This parameter can be one of the following values. In addition, you can specify the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterDeviceNotificationW",
            "return_type": "HDEVNOTIFY",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationw",
            "description": "",
            "parameters": [
                {
                    "name": "hRecipient",
                    "type": "HANDLE",
                    "description": "A handle to the window or service that will receive device events for the devices specified in the\nNotificationFilter parameter. The same window handle can be used in multiple calls to\nRegisterDeviceNotification. Services can specify either a window handle or service status handle.",
                    "possible_constants": []
                },
                {
                    "name": "NotificationFilter",
                    "type": "LPVOID",
                    "description": "A pointer to a block of data that specifies the type of device for which notifications should be sent. This\nblock always begins with the DEV_BROADCAST_HDR\nstructure. The data following this header is dependent on the value of the\ndbch_devicetype member, which can be\nDBT_DEVTYP_DEVICEINTERFACE or DBT_DEVTYP_HANDLE. For more\ninformation, see Remarks.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "DWORD",
                    "description": "This parameter can be one of the following values. In addition, you can specify the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterForTooltipDismissNotification",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerfortooltipdismissnotification",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": " Type: HWND The handle of the window to receive the WM_TOOLTIPDISMISS message.",
                    "possible_constants": []
                },
                {
                    "name": "tdFlags",
                    "type": "TOOLTIP_DISMISS_FLAGS",
                    "description": " Type: TOOLTIP_DISMISS_FLAGS A value of the enumeration that specifies whether the function registers or unregisters the window. TDF_REGISTER to register; TDF_UNREGISTER to unregister.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterHotKey",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerhotkey",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.",
                    "possible_constants": []
                },
                {
                    "name": "id",
                    "type": "int",
                    "description": "Type: int The identifier of the hot key.  If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see Remarks for the action taken.",
                    "possible_constants": []
                },
                {
                    "name": "fsModifiers",
                    "type": "UINT",
                    "description": "Type: UINT The keys that must be pressed in combination with the key specified by the vk parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "vk",
                    "type": "UINT",
                    "description": "Type: UINT The virtual-key code of the hot key. See Virtual Key Codes.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterPointerDeviceNotifications",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerdevicenotifications",
            "description": "",
            "parameters": [
                {
                    "name": "window",
                    "type": "HWND",
                    "description": "The window that receives WM_POINTERDEVICECHANGE,\nWM_POINTERDEVICEINRANGE, and\nWM_POINTERDEVICEOUTOFRANGE notifications.",
                    "possible_constants": []
                },
                {
                    "name": "notifyRange",
                    "type": "BOOL",
                    "description": "If set to TRUE, process the WM_POINTERDEVICEINRANGE and\nWM_POINTERDEVICEOUTOFRANGE messages. If set to FALSE, these messages aren't processed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterPointerInputTarget",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerinputtarget",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window to register as a global redirection target. Redirection can cause the foreground window to lose activation (focus). To avoid this, ensure the window is a message-only window or has the WS_EX_NOACTIVATE style set.",
                    "possible_constants": []
                },
                {
                    "name": "pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "Type of pointer input to be redirected to the specified  window. This is any valid and supported value from the POINTER_INPUT_TYPE enumeration. Note that the generic PT_POINTER type and the PT_MOUSE type are not valid in this parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterPointerInputTargetEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpointerinputtargetex",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Not supported.",
                    "possible_constants": []
                },
                {
                    "name": "pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "Not supported.",
                    "possible_constants": []
                },
                {
                    "name": "fObserve",
                    "type": "BOOL",
                    "description": "Not supported.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterPowerSettingNotification",
            "return_type": "HPOWERNOTIFY",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpowersettingnotification",
            "description": "",
            "parameters": [
                {
                    "name": "hRecipient",
                    "type": "HANDLE",
                    "description": "Handle indicating where the power setting notifications are to be sent. For interactive applications, the\nFlags parameter should be zero, and the hRecipient parameter\nshould be a window handle. For services, the Flags parameter should be one, and the\nhRecipient parameter should be a SERVICE_STATUS_HANDLE\nas returned from\nRegisterServiceCtrlHandlerEx.",
                    "possible_constants": []
                },
                {
                    "name": "PowerSettingGuid",
                    "type": "LPCGUID",
                    "description": "The GUID of the power setting for which notifications are to be sent. For more information see Registering for Power\nEvents.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterRawInputDevices",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerrawinputdevices",
            "description": "",
            "parameters": [
                {
                    "name": "pRawInputDevices",
                    "type": "PCRAWINPUTDEVICE",
                    "description": "Type: PCRAWINPUTDEVICE An array of RAWINPUTDEVICE structures that represent the devices that supply the raw input.",
                    "possible_constants": []
                },
                {
                    "name": "uiNumDevices",
                    "type": "UINT",
                    "description": "Type: UINT The number of RAWINPUTDEVICE structures pointed to by pRawInputDevices.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "Type: UINT The size, in bytes, of a RAWINPUTDEVICE structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterShellHookWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registershellhookwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to register for Shell hook messages.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterSuspendResumeNotification",
            "return_type": "HPOWERNOTIFY",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registersuspendresumenotification",
            "description": "",
            "parameters": [
                {
                    "name": "hRecipient",
                    "type": "HANDLE",
                    "description": "This parameter contains parameters for subscribing to a power notification or a window handle representing the subscribing process. If Flags is DEVICE_NOTIFY_CALLBACK, hRecipient is interpreted as a pointer to a DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS structure. In this case, the callback function is DeviceNotifyCallbackRoutine. When the Callback function executes, the  Type parameter is set indicating the type of event that occurred. Possible values include PBT_APMSUSPEND, PBT_APMRESUMESUSPEND, and PBT_APMRESUMEAUTOMATIC - see  Power Management Events for more info. The Setting parameter is not used with suspend/resume notifications. If Flags is DEVICE_NOTIFY_WINDOW_HANDLE, hRecipient is a handle to the window to deliver events to.",
                    "possible_constants": []
                },
                {
                    "name": "Flags",
                    "type": "DWORD",
                    "description": "This parameter can be DEVICE_NOTIFY_WINDOW_HANDLE or DEVICE_NOTIFY_CALLBACK.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterTouchHitTestingWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registertouchhittestingwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window that receives the WM_TOUCHHITTESTING  notification.",
                    "possible_constants": []
                },
                {
                    "name": "value",
                    "type": "ULONG",
                    "description": "One of the following values:",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterTouchWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registertouchwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The handle of the window being registered. The function fails with ERROR_ACCESS_DENIED if the calling thread does not own the specified window.",
                    "possible_constants": []
                },
                {
                    "name": "ulFlags",
                    "type": "ULONG",
                    "description": "A set of bit flags that specify optional modifications. This field may contain 0 or one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterWindowMessageA",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The message to be registered.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RegisterWindowMessageW",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The message to be registered.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ReleaseCapture",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-releasecapture",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "ReleaseDC",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-releasedc",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose DC is to be released.",
                    "possible_constants": []
                },
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "A handle to the DC to be released.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RemoveClipboardFormatListener",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removeclipboardformatlistener",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to remove from the clipboard format listener list.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RemoveMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removemenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be deleted, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RemovePropA",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removepropa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of lpString; the high-order word must be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "RemovePropW",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-removepropw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list is to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of lpString; the high-order word must be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ReplyMessage",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-replymessage",
            "description": "",
            "parameters": [
                {
                    "name": "lResult",
                    "type": "LRESULT",
                    "description": "Type: LRESULT The result of the message processing. The possible values are based on the message sent.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ScreenToClient",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-screentoclient",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose client area will be used for the conversion.",
                    "possible_constants": []
                },
                {
                    "name": "lpPoint",
                    "type": "LPPOINT",
                    "description": " A pointer to a POINT structure that specifies the screen coordinates to be converted.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ScrollDC",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrolldc",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "Type: HDC Handle to the device context that contains the bits to be scrolled.",
                    "possible_constants": []
                },
                {
                    "name": "dx",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.",
                    "possible_constants": []
                },
                {
                    "name": "dy",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up. [in] lprcScroll Type: const RECT* Pointer to a RECT structure containing the coordinates of the bits to be scrolled. The only bits affected by the scroll operation are bits in the intersection of this rectangle and the rectangle specified by\nlprcClip. If\nlprcScroll is NULL, the entire client area is used. [in] lprcClip Type: const RECT* Pointer to a\nRECT structure containing the coordinates of the clipping rectangle. The only bits that will be painted are the bits that remain inside this rectangle after the scroll operation has been completed. If\nlprcClip is NULL, the entire client area is used.",
                    "possible_constants": []
                },
                {
                    "name": "*lprcScroll",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcClip",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hrgnUpdate",
                    "type": "HRGN",
                    "description": "Type: HRGN Handle to the region uncovered by the scrolling process. ScrollDC defines this region; it is not necessarily a rectangle. [out] lprcUpdate Type: LPRECT Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region. This is the largest rectangular area that requires repainting. When the function returns, the values in the structure are in client coordinates, regardless of the mapping mode for the specified device context. This allows applications to use the update region in a call to the InvalidateRgn function, if required.",
                    "possible_constants": []
                },
                {
                    "name": "lprcUpdate",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ScrollWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrollwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to the window where the client area is to be scrolled.",
                    "possible_constants": []
                },
                {
                    "name": "XAmount",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window to the left.",
                    "possible_constants": []
                },
                {
                    "name": "YAmount",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of vertical scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window up. [in] lpRect Type: const RECT* Pointer to the RECT structure specifying the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled. [in] lpClipRect Type: const RECT* Pointer to the\nRECT structure containing the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.",
                    "possible_constants": []
                },
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lpClipRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ScrollWindowEx",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-scrollwindowex",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to the window where the client area is to be scrolled.",
                    "possible_constants": []
                },
                {
                    "name": "dx",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.",
                    "possible_constants": []
                },
                {
                    "name": "dy",
                    "type": "int",
                    "description": "Type: int Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up. [in] prcScroll Type: const RECT* Pointer to a RECT structure that specifies the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled. [in] prcClip Type: const RECT* Pointer to a\nRECT structure that contains the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted. This parameter may be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*prcScroll",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*prcClip",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hrgnUpdate",
                    "type": "HRGN",
                    "description": "Type: HRGN Handle to the region that is modified to hold the region invalidated by scrolling. This parameter may be NULL. [out] prcUpdate Type: LPRECT Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling. This parameter may be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "prcUpdate",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies flags that control scrolling. This parameter can be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendDlgItemMessageA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-senddlgitemmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control that receives the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendDlgItemMessageW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-senddlgitemmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The identifier of the control that receives the message.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendInput",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput",
            "description": "",
            "parameters": [
                {
                    "name": "cInputs",
                    "type": "UINT",
                    "description": "Type: UINT The number of structures in the pInputs array.",
                    "possible_constants": []
                },
                {
                    "name": "pInputs",
                    "type": "LPINPUT",
                    "description": "Type: LPINPUT An array of INPUT structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "int",
                    "description": "Type: int The size, in bytes, of an INPUT structure. If cbSize is not the size of an INPUT structure, the function fails.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessage",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessage",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagea",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageCallbackA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagecallbacka",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lpResultCallBack",
                    "type": "SENDASYNCPROC",
                    "description": "Type: SENDASYNCPROC A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see SendAsyncProc. If hWnd is HWND_BROADCAST ((HWND)0xffff), the system calls the SendAsyncProc callback function once for each top-level window.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "ULONG_PTR",
                    "description": "Type: ULONG_PTR An application-defined value to be sent to the callback function pointed to by the lpCallBack parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageCallbackW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagecallbackw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lpResultCallBack",
                    "type": "SENDASYNCPROC",
                    "description": "Type: SENDASYNCPROC A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see SendAsyncProc. If hWnd is HWND_BROADCAST ((HWND)0xffff), the system calls the SendAsyncProc callback function once for each top-level window.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "ULONG_PTR",
                    "description": "Type: ULONG_PTR An application-defined value to be sent to the callback function pointed to by the lpCallBack parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageTimeoutA",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeouta",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of uTimeout multiplied by the number of top-level windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Any additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Any additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "fuFlags",
                    "type": "UINT",
                    "description": "Type: UINT The behavior of this function. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uTimeout",
                    "type": "UINT",
                    "description": "Type: UINT The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay. [out, optional] lpdwResult Type: PDWORD_PTR The result of the message processing. The value of this parameter depends on the message that is specified.",
                    "possible_constants": []
                },
                {
                    "name": "lpdwResult",
                    "type": "PDWORD_PTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageTimeoutW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeoutw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of uTimeout multiplied by the number of top-level windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Any additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Any additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "fuFlags",
                    "type": "UINT",
                    "description": "Type: UINT The behavior of this function. This parameter can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "uTimeout",
                    "type": "UINT",
                    "description": "Type: UINT The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay. [out, optional] lpdwResult Type: PDWORD_PTR The result of the message processing. The value of this parameter depends on the message that is specified.",
                    "possible_constants": []
                },
                {
                    "name": "lpdwResult",
                    "type": "PDWORD_PTR",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendMessageW",
            "return_type": "LRESULT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagew",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendNotifyMessageA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendnotifymessagea",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SendNotifyMessageW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendnotifymessagew",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.",
                    "possible_constants": []
                },
                {
                    "name": "Msg",
                    "type": "UINT",
                    "description": "Type: UINT The message to be sent. For lists of the system-provided messages, see System-Defined Messages.",
                    "possible_constants": []
                },
                {
                    "name": "wParam",
                    "type": "WPARAM",
                    "description": "Type: WPARAM Additional message-specific information.",
                    "possible_constants": []
                },
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM Additional message-specific information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetActiveWindow",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setactivewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the top-level window to be activated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetAdditionalForegroundBoostProcesses",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setadditionalforegroundboostprocesses",
            "description": "",
            "parameters": [
                {
                    "name": "topLevelWindow",
                    "type": "HWND",
                    "description": " A handle to the top level window (HWND) of the application.",
                    "possible_constants": []
                },
                {
                    "name": "processHandleCount",
                    "type": "DWORD",
                    "description": " The number of process handles in processHandleArray. This function can be called at a single time with a maximum of 32 handles. Set this parameter to 0 along with setting processHandleArray to NULL to clear a prior boost configuration. processHandleArray A group of process handles to be foreground boosted or de-boosted. Set this parameter to NULL along with setting processHandleCount to 0 to clear a prior boost configuration.",
                    "possible_constants": []
                },
                {
                    "name": "*processHandleArray",
                    "type": "HANDLE",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCapture",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcapture",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window in the current thread that is to capture the mouse.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCaretBlinkTime",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcaretblinktime",
            "description": "",
            "parameters": [
                {
                    "name": "uMSeconds",
                    "type": "UINT",
                    "description": "Type: UINT The new blink time, in milliseconds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCaretPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcaretpos",
            "description": "",
            "parameters": [
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The new x-coordinate of the caret.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The new y-coordinate of the caret.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClassLongA",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslonga",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG",
                    "description": "Type: LONG The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClassLongPtrA",
            "return_type": "ULONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongptra",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG_PTR",
                    "description": "Type: LONG_PTR The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClassLongPtrW",
            "return_type": "ULONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongptrw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG_PTR",
                    "description": "Type: LONG_PTR The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClassLongW",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclasslongw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the WNDCLASSEX structure, specify one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG",
                    "description": "Type: LONG The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClassWord",
            "return_type": "WORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclassword",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based byte offset of the value to be replaced. Valid values are in the range zero through the number of bytes of class memory minus two; for example, if you specified 10 or more bytes of extra class memory, a value of 8 would be an index to the fifth 16-bit integer.",
                    "possible_constants": []
                },
                {
                    "name": "wNewWord",
                    "type": "WORD",
                    "description": "Type: WORD The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClipboardData",
            "return_type": "HANDLE",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclipboarddata",
            "description": "",
            "parameters": [
                {
                    "name": "uFormat",
                    "type": "UINT",
                    "description": "Type: UINT The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see Standard Clipboard Formats and Registered Clipboard Formats.",
                    "possible_constants": []
                },
                {
                    "name": "hMem",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the data in the specified format. This parameter can be NULL, indicating that the window provides data in the specified clipboard format (renders the format) upon request; this is known as delayed rendering. If a window delays rendering, it must process the WM_RENDERFORMAT and WM_RENDERALLFORMATS messages. If SetClipboardData succeeds, the system owns the object identified by the hMem parameter. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the CloseClipboard function is called. (The memory must be unlocked before the Clipboard is closed.) If the hMem parameter identifies a memory object, the object must have been allocated using the function with the GMEM_MOVEABLE flag.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetClipboardViewer",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclipboardviewer",
            "description": "",
            "parameters": [
                {
                    "name": "hWndNewViewer",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be added to the clipboard chain.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCoalescableTimer",
            "return_type": "UINT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcoalescabletimer",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.",
                    "possible_constants": []
                },
                {
                    "name": "nIDEvent",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR A timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an existing timer, then the nIDEvent is ignored and a new timer ID is generated. If the hWnd parameter is not NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the existing timer is replaced by the new timer. When SetCoalescableTimer replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent should be 0 if the hWnd is NULL.",
                    "possible_constants": []
                },
                {
                    "name": "uElapse",
                    "type": "UINT",
                    "description": "Type: UINT The time-out value, in milliseconds. If uElapse is less than USER_TIMER_MINIMUM (0x0000000A), the timeout is set to USER_TIMER_MINIMUM. If uElapse is greater than USER_TIMER_MAXIMUM (0x7FFFFFFF), the timeout is set to USER_TIMER_MAXIMUM. If the sum of uElapse and uToleranceDelay exceeds USER_TIMER_MAXIMUM, an ERROR_INVALID_PARAMETER exception occurs.",
                    "possible_constants": []
                },
                {
                    "name": "lpTimerFunc",
                    "type": "TIMERPROC",
                    "description": "Type: TIMERPROC A pointer to the function to be notified when the time-out value elapses. For more information about the function, see TimerProc. If lpTimerFunc is NULL, the system posts a WM_TIMER message to the application queue. The hwnd member of the message's MSG structure contains the value of the hWnd parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uToleranceDelay",
                    "type": "ULONG",
                    "description": "Type: ULONG It can be one of the following values:",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCursor",
            "return_type": "HCURSOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcursor",
            "description": "",
            "parameters": [
                {
                    "name": "hCursor",
                    "type": "HCURSOR",
                    "description": "Type: HCURSOR A handle to the cursor. The cursor must have been created by either the CreateCursor or the CreateIconIndirect function, or loaded by either the LoadCursor or the LoadImage function. If this parameter is NULL, the cursor is removed from the screen.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetCursorPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setcursorpos",
            "description": "",
            "parameters": [
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The new x-coordinate of the cursor, in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The new y-coordinate of the cursor, in screen coordinates.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDialogControlDpiChangeBehavior",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdialogcontroldpichangebehavior",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": " A handle for the window whose behavior will be modified.",
                    "possible_constants": []
                },
                {
                    "name": "mask",
                    "type": "DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS",
                    "description": " A mask specifying the subset of flags to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "values",
                    "type": "DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS",
                    "description": " The desired value to be set for the specified subset of flags.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDialogDpiChangeBehavior",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdialogdpichangebehavior",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": " A handle for the dialog whose behavior will be modified.",
                    "possible_constants": []
                },
                {
                    "name": "mask",
                    "type": "DIALOG_DPI_CHANGE_BEHAVIORS",
                    "description": " A mask specifying the subset of flags to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "values",
                    "type": "DIALOG_DPI_CHANGE_BEHAVIORS",
                    "description": " The desired value to be set for the specified subset of flags.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDisplayAutoRotationPreferences",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdisplayautorotationpreferences",
            "description": "",
            "parameters": [
                {
                    "name": "orientation",
                    "type": "ORIENTATION_PREFERENCE",
                    "description": "Pointer to a location in memory with the screen orientation preferences to set for the calling process.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDisplayConfig",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdisplayconfig",
            "description": "",
            "parameters": [
                {
                    "name": "numPathArrayElements",
                    "type": "UINT32",
                    "description": "Number of elements in pathArray. [in, optional] pathArray Array of all display paths that are to be set. Only the paths within this array that have the DISPLAYCONFIG_PATH_ACTIVE flag set in the flags member of DISPLAYCONFIG_PATH_INFO are set. This parameter can be NULL. The order in which active paths appear in this array determines the path priority. For more information about path priority order, see Path Priority Order.",
                    "possible_constants": []
                },
                {
                    "name": "*pathArray",
                    "type": "DISPLAYCONFIG_PATH_INFO",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "numModeInfoArrayElements",
                    "type": "UINT32",
                    "description": "Number of elements in modeInfoArray. [in, optional] modeInfoArray Array of display source and target mode information (DISPLAYCONFIG_MODE_INFO) that is referenced by the modeInfoIdx member of DISPLAYCONFIG_PATH_SOURCE_INFO and DISPLAYCONFIG_PATH_TARGET_INFO element of path information from pathArray. This parameter can be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*modeInfoArray",
                    "type": "DISPLAYCONFIG_MODE_INFO",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "flags",
                    "type": "UINT32",
                    "description": "A bitwise OR of flag values that indicates the behavior of this function. This parameter can be one the following values, or a combination of the following values; 0 is not valid. See below for a description of valid flag combinations. The following list contains valid combinations of values for the Flags parameter:",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDlgItemInt",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemint",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The control to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "uValue",
                    "type": "UINT",
                    "description": "Type: UINT The integer value used to generate the item text.",
                    "possible_constants": []
                },
                {
                    "name": "bSigned",
                    "type": "BOOL",
                    "description": "Type: BOOL Indicates whether the uValue parameter is signed or unsigned. If this parameter is TRUE, uValue is signed. If this parameter is TRUE and uValue is less than zero, a minus sign is placed before the first digit in the string. If this parameter is FALSE, uValue is unsigned.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDlgItemTextA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemtexta",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The control with a title or text to be set.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The text to be copied to the control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDlgItemTextW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdlgitemtextw",
            "description": "",
            "parameters": [
                {
                    "name": "hDlg",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the dialog box that contains the control.",
                    "possible_constants": []
                },
                {
                    "name": "nIDDlgItem",
                    "type": "int",
                    "description": "Type: int The control with a title or text to be set.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The text to be copied to the control.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetDoubleClickTime",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setdoubleclicktime",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "UINT",
                    "description": "Type: UINT The number of milliseconds that may occur between the first and second clicks of a double-click. If this parameter is set to 0, the system uses the default double-click time of 500 milliseconds. If this parameter value is greater than 5000 milliseconds, the system sets the value to 5000 milliseconds.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetFocus",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setfocus",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetForegroundWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setforegroundwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that should be activated and brought to the foreground.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetGestureConfig",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setgestureconfig",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "A handle to the window to set the gesture configuration on.",
                    "possible_constants": []
                },
                {
                    "name": "dwReserved",
                    "type": "DWORD",
                    "description": "This value is reserved and must be set to 0.",
                    "possible_constants": []
                },
                {
                    "name": "cIDs",
                    "type": "UINT",
                    "description": "A count of the gesture configuration structures that are being passed.",
                    "possible_constants": []
                },
                {
                    "name": "pGestureConfig",
                    "type": "PGESTURECONFIG",
                    "description": "An array of gesture configuration structures that specify the gesture configuration.",
                    "possible_constants": []
                },
                {
                    "name": "cbSize",
                    "type": "UINT",
                    "description": "The size of the gesture configuration (GESTURECONFIG) structure.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetKeyboardState",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setkeyboardstate",
            "description": "",
            "parameters": [
                {
                    "name": "lpKeyState",
                    "type": "LPBYTE",
                    "description": "Type: LPBYTE A pointer to a 256-byte array that contains keyboard key states.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetLastErrorEx",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlasterrorex",
            "description": "",
            "parameters": [
                {
                    "name": "dwErrCode",
                    "type": "DWORD",
                    "description": "The last-error code for the thread.",
                    "possible_constants": []
                },
                {
                    "name": "dwType",
                    "type": "DWORD",
                    "description": "This parameter is ignored.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetLayeredWindowAttributes",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlayeredwindowattributes",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED via SetWindowLong after the window has been created. Windows\u00a08:\u00a0\u00a0The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.",
                    "possible_constants": []
                },
                {
                    "name": "crKey",
                    "type": "COLORREF",
                    "description": "Type: COLORREF A COLORREF structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a COLORREF, use the RGB macro.",
                    "possible_constants": []
                },
                {
                    "name": "bAlpha",
                    "type": "BYTE",
                    "description": "Type: BYTE Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When bAlpha is 0, the window is completely transparent. When bAlpha is 255, the window is opaque.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD An action to be taken. This parameter can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenu",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to which the menu is to be assigned.",
                    "possible_constants": []
                },
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the new menu. If this parameter is NULL, the window's current menu is removed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuContextHelpId",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenucontexthelpid",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HMENU",
                    "description": " Type: HMENU A handle to the menu with which to associate the Help context identifier.",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "DWORD",
                    "description": " Type: DWORD The help context identifier.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuDefaultItem",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenudefaultitem",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu to set the default item for.",
                    "possible_constants": []
                },
                {
                    "name": "uItem",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of\nfByPos.",
                    "possible_constants": []
                },
                {
                    "name": "fByPos",
                    "type": "UINT",
                    "description": "Type: UINT The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuInfo",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuinfo",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to a menu.",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPCMENUINFO",
                    "description": "Type: LPCMENUINFO A pointer to a MENUINFO structure for the menu.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuItemBitmaps",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuitembitmaps",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu containing the item to receive new check-mark bitmaps.",
                    "possible_constants": []
                },
                {
                    "name": "uPosition",
                    "type": "UINT",
                    "description": "Type: UINT The menu item to be changed, as determined by the uFlags parameter.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies how the uPosition parameter is to be interpreted. The uFlags parameter must be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "hBitmapUnchecked",
                    "type": "HBITMAP",
                    "description": "Type: HBITMAP A handle to the bitmap displayed when the menu item is not selected.",
                    "possible_constants": []
                },
                {
                    "name": "hBitmapChecked",
                    "type": "HBITMAP",
                    "description": "Type: HBITMAP A handle to the bitmap displayed when the menu item is selected.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuItemInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuiteminfoa",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the menu item.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item to change. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPositon",
                    "type": "BOOL",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "lpmii",
                    "type": "LPCMENUITEMINFOA",
                    "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the menu item and specifies which menu item attributes to change.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMenuItemInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmenuiteminfow",
            "description": "",
            "parameters": [
                {
                    "name": "hmenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the menu that contains the menu item.",
                    "possible_constants": []
                },
                {
                    "name": "item",
                    "type": "UINT",
                    "description": "Type: UINT The identifier or position of the menu item to change. The meaning of this parameter depends on the value of fByPosition.",
                    "possible_constants": []
                },
                {
                    "name": "fByPositon",
                    "type": "BOOL",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "lpmii",
                    "type": "LPCMENUITEMINFOW",
                    "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the menu item and specifies which menu item attributes to change.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetMessageExtraInfo",
            "return_type": "LPARAM",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmessageextrainfo",
            "description": "",
            "parameters": [
                {
                    "name": "lParam",
                    "type": "LPARAM",
                    "description": "Type: LPARAM The value to be associated with the current thread.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetParent",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setparent",
            "description": "",
            "parameters": [
                {
                    "name": "hWndChild",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the child window.",
                    "possible_constants": []
                },
                {
                    "name": "hWndNewParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.\nIf this parameter is HWND_MESSAGE, the child window becomes a message-only window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetPhysicalCursorPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setphysicalcursorpos",
            "description": "",
            "parameters": [
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The new x-coordinate of the cursor, in physical coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The new y-coordinate of the cursor, in physical coordinates.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetProcessDefaultLayout",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdefaultlayout",
            "description": "",
            "parameters": [
                {
                    "name": "dwDefaultLayout",
                    "type": "DWORD",
                    "description": "Type: DWORD The default process layout. This parameter can be 0 or the following value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetProcessDPIAware",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdpiaware",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "SetProcessDpiAwarenessContext",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessdpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "value",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "A DPI_AWARENESS_CONTEXT handle to set.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetProcessRestrictionExemption",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocessrestrictionexemption",
            "description": "",
            "parameters": [
                {
                    "name": "fEnableExemption",
                    "type": "BOOL",
                    "description": " When set to TRUE, indicates a request to disable exemption for the calling process.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetProcessWindowStation",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setprocesswindowstation",
            "description": "",
            "parameters": [
                {
                    "name": "hWinSta",
                    "type": "HWINSTA",
                    "description": "A handle to the window station. This can be a handle returned by the\nCreateWindowStation,\nOpenWindowStation, or\nGetProcessWindowStation function. This window station must be associated with the current session.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetPropA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setpropa",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list receives the new entry.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the GlobalAddAtom function. The atom must be placed in the low-order word of lpString; the high-order word must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "hData",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetPropW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setpropw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose property list receives the new entry.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the GlobalAddAtom function. The atom must be placed in the low-order word of lpString; the high-order word must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "hData",
                    "type": "HANDLE",
                    "description": "Type: HANDLE A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "xLeft",
                    "type": "int",
                    "description": "Specifies the x-coordinate of the rectangle's upper-left corner.",
                    "possible_constants": []
                },
                {
                    "name": "yTop",
                    "type": "int",
                    "description": "Specifies the y-coordinate of the rectangle's upper-left corner.",
                    "possible_constants": []
                },
                {
                    "name": "xRight",
                    "type": "int",
                    "description": "Specifies the x-coordinate of the rectangle's lower-right corner.",
                    "possible_constants": []
                },
                {
                    "name": "yBottom",
                    "type": "int",
                    "description": "Specifies the y-coordinate of the rectangle's lower-right corner.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetRectEmpty",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrectempty",
            "description": "",
            "parameters": [
                {
                    "name": "lprc",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetScrollInfo",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollinfo",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nfnBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the type of scroll bar for which to set parameters. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpsi",
                    "type": "LPCSCROLLINFO",
                    "description": "Type: LPCSCROLLINFO Pointer to a SCROLLINFO structure. Before calling SetScrollInfo, set the\ncbSize member of the structure to\nsizeof(SCROLLINFO), set the\nfMask member to indicate the parameters to set, and specify the new parameter values in the appropriate members. The\nfMask member can be one or more of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "redraw",
                    "type": "BOOL",
                    "description": "Type: BOOL Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is TRUE, the scroll bar is redrawn, otherwise, it is not redrawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetScrollPos",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollpos",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the nBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the scroll bar to be set. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "nPos",
                    "type": "int",
                    "description": "Type: int Specifies the new position of the scroll box. The position must be within the scrolling range. For more information about the scrolling range, see the SetScrollRange function.",
                    "possible_constants": []
                },
                {
                    "name": "bRedraw",
                    "type": "BOOL",
                    "description": "Type: BOOL Specifies whether the scroll bar is redrawn to reflect the new scroll box position. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetScrollRange",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setscrollrange",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nnBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "nBar",
                    "type": "int",
                    "description": "Type: int Specifies the scroll bar to be set. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "nMinPos",
                    "type": "int",
                    "description": "Type: int Specifies the minimum scrolling position.",
                    "possible_constants": []
                },
                {
                    "name": "nMaxPos",
                    "type": "int",
                    "description": "Type: int Specifies the maximum scrolling position.",
                    "possible_constants": []
                },
                {
                    "name": "bRedraw",
                    "type": "BOOL",
                    "description": "Type: BOOL Specifies whether the scroll bar should be redrawn to reflect the change. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetSysColors",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setsyscolors",
            "description": "",
            "parameters": [
                {
                    "name": "cElements",
                    "type": "int",
                    "description": "Type: int The number of display elements in the lpaElements array. [in] lpaElements Type: const INT* An array of integers that specify the display elements to be changed. For a list of display elements, see\nGetSysColor. [in] lpaRgbValues Type: const COLORREF* An array of\nCOLORREF values that contain the new red, green, blue (RGB) color values for the display elements in the array pointed to by the lpaElements parameter. To generate a\nCOLORREF, use the\nRGB macro.",
                    "possible_constants": []
                },
                {
                    "name": "*lpaElements",
                    "type": "const INT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lpaRgbValues",
                    "type": "const COLORREF",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetSystemCursor",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setsystemcursor",
            "description": "",
            "parameters": [
                {
                    "name": "hcur",
                    "type": "HCURSOR",
                    "description": "Type: HCURSOR A handle to the cursor. The function replaces the contents of the system cursor specified by id with the contents of the cursor handled by hcur. The system destroys hcur by calling the DestroyCursor function. Therefore, hcur cannot be a cursor loaded using the LoadCursor function. To specify a cursor loaded from a resource, copy the cursor using the CopyCursor function, then pass the copy to SetSystemCursor.",
                    "possible_constants": []
                },
                {
                    "name": "id",
                    "type": "DWORD",
                    "description": "Type: DWORD The system cursor to replace with the contents of hcur. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetThreadCursorCreationScaling",
            "return_type": "UINT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreadcursorcreationscaling",
            "description": "",
            "parameters": [
                {
                    "name": "cursorDpi",
                    "type": "UINT",
                    "description": " The 96-based DPI scale of the cursors that the application will be creating. For example, a 96 DPI value corresponds to 100% monitor scale factor, 144 DPI corresponds to 150%, and so on. There are two special values: CURSOR_CREATION_SCALING_DEFAULT \u00e2\u0080\u0093 resets cursor scaling to default system behavior (as if SetThreadCursorCreationScaling was never called on this thread). CURSOR_CREATION_SCALING_NONE \u00e2\u0080\u0093 disables all cursor scaling (the cursors created after calling SetThreadCursorCreationScaling with this parameter will never be scaled up or down on any monitor).",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetThreadDesktop",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddesktop",
            "description": "",
            "parameters": [
                {
                    "name": "hDesktop",
                    "type": "HDESK",
                    "description": "A handle to the desktop to be assigned to the calling thread. This handle is returned by the\nCreateDesktop,\nGetThreadDesktop, OpenDesktop, or\nOpenInputDesktop function. This desktop must be associated with the current window station for the process.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetThreadDpiAwarenessContext",
            "return_type": "DPI_AWARENESS_CONTEXT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddpiawarenesscontext",
            "description": "",
            "parameters": [
                {
                    "name": "dpiContext",
                    "type": "DPI_AWARENESS_CONTEXT",
                    "description": "The new DPI_AWARENESS_CONTEXT for the current thread. This context includes the DPI_AWARENESS value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetThreadDpiHostingBehavior",
            "return_type": "DPI_HOSTING_BEHAVIOR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setthreaddpihostingbehavior",
            "description": "",
            "parameters": [
                {
                    "name": "value",
                    "type": "DPI_HOSTING_BEHAVIOR",
                    "description": " The new DPI_HOSTING_BEHAVIOR value for the current thread.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetTimer",
            "return_type": "UINT_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-settimer",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that timer will be replaced in the same way that an existing non-NULL hWnd timer will be.",
                    "possible_constants": []
                },
                {
                    "name": "nIDEvent",
                    "type": "UINT_PTR",
                    "description": "Type: UINT_PTR A nonzero timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an existing timer then it is ignored and a new timer ID is generated. If the hWnd parameter is not NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the existing timer is replaced by the new timer. When SetTimer replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent should be 0 if the hWnd is NULL.",
                    "possible_constants": []
                },
                {
                    "name": "uElapse",
                    "type": "UINT",
                    "description": "Type: UINT The time-out value, in milliseconds. If uElapse is less than USER_TIMER_MINIMUM (0x0000000A), the timeout is set to USER_TIMER_MINIMUM. If uElapse is greater than USER_TIMER_MAXIMUM (0x7FFFFFFF), the timeout is set to USER_TIMER_MAXIMUM.",
                    "possible_constants": []
                },
                {
                    "name": "lpTimerFunc",
                    "type": "TIMERPROC",
                    "description": "Type: TIMERPROC A pointer to the function to be notified when the time-out value elapses. For more information about the function, see TimerProc. If lpTimerFunc is NULL, the system posts a WM_TIMER message to the application queue. The hwnd member of the message's MSG structure contains the value of the hWnd parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetUserObjectInformationA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectinformationa",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the  CreateWindowStation,\nOpenWindowStation,\nCreateDesktop, OpenDesktop or  GetCurrentProcess function.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "The object information to be set. This parameter can be the following value.",
                    "possible_constants": []
                },
                {
                    "name": "pvInfo",
                    "type": "PVOID",
                    "description": "A pointer to a buffer containing the object information, or a BOOL.",
                    "possible_constants": []
                },
                {
                    "name": "nLength",
                    "type": "DWORD",
                    "description": "The size of the information contained in the buffer pointed to by pvInfo, in bytes.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetUserObjectInformationW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectinformationw",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the  CreateWindowStation,\nOpenWindowStation,\nCreateDesktop, OpenDesktop or  GetCurrentProcess function.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "The object information to be set. This parameter can be the following value.",
                    "possible_constants": []
                },
                {
                    "name": "pvInfo",
                    "type": "PVOID",
                    "description": "A pointer to a buffer containing the object information, or a BOOL.",
                    "possible_constants": []
                },
                {
                    "name": "nLength",
                    "type": "DWORD",
                    "description": "The size of the information contained in the buffer pointed to by pvInfo, in bytes.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetUserObjectSecurity",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setuserobjectsecurity",
            "description": "",
            "parameters": [
                {
                    "name": "hObj",
                    "type": "HANDLE",
                    "description": "A handle to a user object for which security information is set.",
                    "possible_constants": []
                },
                {
                    "name": "pSIRequested",
                    "type": "PSECURITY_INFORMATION",
                    "description": "A pointer to a value that indicates the components of the security descriptor to set. This parameter can be a combination of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "pSID",
                    "type": "PSECURITY_DESCRIPTOR",
                    "description": "A pointer to a\nSECURITY_DESCRIPTOR structure that contains the new security information. This buffer must be aligned on a 4-byte boundary.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowContextHelpId",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowcontexthelpid",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "HWND",
                    "description": " Type: HWND A handle to the window with which to associate the Help context identifier.",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "DWORD",
                    "description": " Type: DWORD The Help context identifier.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowDisplayAffinity",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowdisplayaffinity",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the top-level window. The window must belong to the current process.",
                    "possible_constants": []
                },
                {
                    "name": "dwAffinity",
                    "type": "DWORD",
                    "description": "Type: DWORD The display affinity setting that specifies where the content of the window can be displayed. This parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowFeedbackSetting",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowfeedbacksetting",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The window to configure feedback on.",
                    "possible_constants": []
                },
                {
                    "name": "feedback",
                    "type": "FEEDBACK_TYPE",
                    "description": "One of the values from the FEEDBACK_TYPE enumeration.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Reserved. Must be 0.",
                    "possible_constants": []
                },
                {
                    "name": "size",
                    "type": "UINT32",
                    "description": "The size, in bytes, of the configuration data. Must be sizeof(BOOL) or 0 if the feedback setting is being reset. [in, optional] configuration The configuration data. Must be BOOL or NULL if the feedback setting is being reset.",
                    "possible_constants": []
                },
                {
                    "name": "*configuration",
                    "type": "const VOID",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowLongA",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlonga",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG",
                    "description": "Type: LONG The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowLongPtrA",
            "return_type": "LONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptra",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in. Windows\u00a0XP/2000:\u00a0\u00a0 The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To set any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG_PTR",
                    "description": "Type: LONG_PTR The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowLongPtrW",
            "return_type": "LONG_PTR",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptrw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in. Windows\u00a0XP/2000:\u00a0\u00a0 The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a LONG_PTR. To set any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG_PTR",
                    "description": "Type: LONG_PTR The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowLongW",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window and, indirectly, the class to which the window belongs.",
                    "possible_constants": []
                },
                {
                    "name": "nIndex",
                    "type": "int",
                    "description": "Type: int The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values. The following values are also available when the hWnd parameter identifies a dialog box.",
                    "possible_constants": []
                },
                {
                    "name": "dwNewLong",
                    "type": "LONG",
                    "description": "Type: LONG The replacement value.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowPlacement",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowplacement",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window. [in] lpwndpl Type: const WINDOWPLACEMENT* A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions. Before calling SetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof(WINDOWPLACEMENT). SetWindowPlacement fails if the length member is not set correctly.",
                    "possible_constants": []
                },
                {
                    "name": "*lpwndpl",
                    "type": "const WINDOWPLACEMENT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowPos",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values. For more information about how this parameter is used, see the following Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "hWndInsertAfter",
                    "type": "HWND",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "X",
                    "type": "int",
                    "description": "Type: int The new position of the left side of the window, in client coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "Y",
                    "type": "int",
                    "description": "Type: int The new position of the top of the window, in client coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "cx",
                    "type": "int",
                    "description": "Type: int The new width of the window, in pixels.",
                    "possible_constants": []
                },
                {
                    "name": "cy",
                    "type": "int",
                    "description": "Type: int The new height of the window, in pixels.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT The window sizing and positioning flags. This parameter can be a combination of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowRgn",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowrgn",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the window whose window region is to be set.",
                    "possible_constants": []
                },
                {
                    "name": "hRgn",
                    "type": "HRGN",
                    "description": "A handle to a region. The function sets the window region of the window to this region. If hRgn is NULL, the function sets the window region to NULL.",
                    "possible_constants": []
                },
                {
                    "name": "bRedraw",
                    "type": "BOOL",
                    "description": "Specifies whether the system redraws the window after setting the window region. If bRedraw is TRUE, the system does so; otherwise, it does not. Typically, you set bRedraw to TRUE if the window is visible.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowsHookExA",
            "return_type": "HHOOK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa",
            "description": "",
            "parameters": [
                {
                    "name": "idHook",
                    "type": "int",
                    "description": "Type: int The type of hook procedure to be installed. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpfn",
                    "type": "HOOKPROC",
                    "description": "Type: HOOKPROC A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a thread created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current process.",
                    "possible_constants": []
                },
                {
                    "name": "hmod",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.",
                    "possible_constants": []
                },
                {
                    "name": "dwThreadId",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowsHookExW",
            "return_type": "HHOOK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexw",
            "description": "",
            "parameters": [
                {
                    "name": "idHook",
                    "type": "int",
                    "description": "Type: int The type of hook procedure to be installed. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "lpfn",
                    "type": "HOOKPROC",
                    "description": "Type: HOOKPROC A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a thread created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current process.",
                    "possible_constants": []
                },
                {
                    "name": "hmod",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.",
                    "possible_constants": []
                },
                {
                    "name": "dwThreadId",
                    "type": "DWORD",
                    "description": "Type: DWORD The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowTextA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtexta",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control whose text is to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The new title or control text.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWindowTextW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtextw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window or control whose text is to be changed.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "Type: LPCWSTR The new title or control text.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SetWinEventHook",
            "return_type": "HWINEVENTHOOK",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwineventhook",
            "description": "",
            "parameters": [
                {
                    "name": "eventMin",
                    "type": "DWORD",
                    "description": "Type: UINT Specifies the event constant for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to EVENT_MIN to indicate the lowest possible event value.",
                    "possible_constants": []
                },
                {
                    "name": "eventMax",
                    "type": "DWORD",
                    "description": "Type: UINT Specifies the event constant for the highest event value in the range of events that are handled by the hook function. This parameter can be  set to EVENT_MAX to indicate the highest possible event value.",
                    "possible_constants": []
                },
                {
                    "name": "hmodWinEventProc",
                    "type": "HMODULE",
                    "description": "Type: HMODULE Handle to the DLL that contains the hook function at lpfnWinEventProc, if the WINEVENT_INCONTEXT flag is specified in the dwFlags parameter. If the hook function is not located in a DLL, or if the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is NULL.",
                    "possible_constants": []
                },
                {
                    "name": "pfnWinEventProc",
                    "type": "WINEVENTPROC",
                    "description": "Type: WINEVENTPROC Pointer to the event hook function. For more information about this function, see WinEventProc.",
                    "possible_constants": []
                },
                {
                    "name": "idProcess",
                    "type": "DWORD",
                    "description": "Type: DWORD Specifies the ID of the process from which the hook function receives events. Specify zero (0) to receive events from all processes on the current desktop.",
                    "possible_constants": []
                },
                {
                    "name": "idThread",
                    "type": "DWORD",
                    "description": "Type: DWORD Specifies the ID of the thread from which the hook function receives events. If this parameter is zero, the hook function is associated with all existing threads on the current desktop.",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: UINT Flag values that specify the location of the hook function and of the events to be skipped. The following flags are valid: The following flag combinations are valid: See Remarks section for information on Windows Store app development.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowCaret",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showcaret",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the caret. If this parameter is NULL, ShowCaret searches the current task for the window that owns the caret.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowCursor",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showcursor",
            "description": "",
            "parameters": [
                {
                    "name": "bShow",
                    "type": "BOOL",
                    "description": "Type: BOOL If bShow is TRUE, the display count is incremented by one. If bShow is FALSE, the display count is decremented by one.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowOwnedPopups",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showownedpopups",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the pop-up windows to be shown or hidden.",
                    "possible_constants": []
                },
                {
                    "name": "fShow",
                    "type": "BOOL",
                    "description": "Type: BOOL If this parameter is TRUE, all hidden pop-up windows are shown. If this parameter is FALSE, all visible pop-up windows are hidden.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowScrollBar",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showscrollbar",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the\nwBar parameter.",
                    "possible_constants": []
                },
                {
                    "name": "wBar",
                    "type": "int",
                    "description": "Type: int Specifies the scroll bar(s) to be shown or hidden. This parameter can be one of the following values.",
                    "possible_constants": []
                },
                {
                    "name": "bShow",
                    "type": "BOOL",
                    "description": "Type: BOOL Specifies whether the scroll bar is shown or hidden. If this parameter is TRUE, the scroll bar is shown; otherwise, it is hidden.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window.",
                    "possible_constants": []
                },
                {
                    "name": "nCmdShow",
                    "type": "int",
                    "description": "Type: int Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShowWindowAsync",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindowasync",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window.",
                    "possible_constants": []
                },
                {
                    "name": "nCmdShow",
                    "type": "int",
                    "description": "Type: int Controls how the window is to be shown. For a list of possible values, see the description of the ShowWindow function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShutdownBlockReasonCreate",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasoncreate",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the main window of the application.",
                    "possible_constants": []
                },
                {
                    "name": "pwszReason",
                    "type": "LPCWSTR",
                    "description": "The reason the application must block system shutdown. This string will be truncated for display purposes after MAX_STR_BLOCKREASON characters.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShutdownBlockReasonDestroy",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasondestroy",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the main window of the application.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ShutdownBlockReasonQuery",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-shutdownblockreasonquery",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "A handle to the main window of the application. [out, optional] pwszBuff A pointer to a buffer that receives the reason string. If this parameter is NULL, the function retrieves the number of characters in the reason string. [in, out] pcchBuff A pointer to a variable that specifies the size of the pwszBuff buffer, in characters. If the function succeeds, this variable receives the number of characters copied into the buffer, including the null-terminating character. If the buffer is too small, the variable receives the required buffer size, in characters, not including the null-terminating character.",
                    "possible_constants": []
                },
                {
                    "name": "pwszBuff",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*pcchBuff",
                    "type": "DWORD",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SkipPointerFrameMessages",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-skippointerframemessages",
            "description": "",
            "parameters": [
                {
                    "name": "pointerId",
                    "type": "UINT32",
                    "description": "Identifier of the pointer. Pending messages will be skipped for the frame that includes the most recently retrieved input for this pointer.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SoundSentry",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-soundsentry",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "SubtractRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-subtractrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprcDst",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc1",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc2",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SwapMouseButton",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-swapmousebutton",
            "description": "",
            "parameters": [
                {
                    "name": "fSwap",
                    "type": "BOOL",
                    "description": "Type: BOOL If this parameter is TRUE, the left button generates right-button messages and the right button generates left-button messages. If this parameter is FALSE, the buttons are restored to their original meanings.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SwitchDesktop",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-switchdesktop",
            "description": "",
            "parameters": [
                {
                    "name": "hDesktop",
                    "type": "HDESK",
                    "description": "A handle to the desktop. This handle is returned by the\nCreateDesktop and\nOpenDesktop functions. This desktop must be associated with the current window station for the process.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SwitchToThisWindow",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-switchtothiswindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window.",
                    "possible_constants": []
                },
                {
                    "name": "fUnknown",
                    "type": "BOOL",
                    "description": "Type: BOOL A TRUE for this parameter indicates that the window\nis being switched to using the Alt/Ctl+Tab key sequence.  This parameter\nshould be FALSE otherwise.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SystemParametersInfoA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfoa",
            "description": "",
            "parameters": [
                {
                    "name": "uiAction",
                    "type": "UINT",
                    "description": "Type: UINT The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: The following are the accessibility parameters. The following are the desktop parameters. The following are the icon parameters. The following are the input parameters. They include parameters related to the keyboard, mouse, touchpad, pen, input language, and the warning beeper. The following are the menu parameters. The following are the power parameters. Beginning with Windows Server\u00a02008 and Windows\u00a0Vista, these power parameters are not supported. Instead, to determine the current display power state, an application should register for GUID_MONITOR_POWER_STATE notifications. To determine the current display power down time-out, an application should register for notification of changes to the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. For more information, see Registering for Power Events. Windows Server\u00a02003 and Windows\u00a0XP/2000:\u00a0\u00a0To determine the current display power state, use the following power parameters. The following are the screen saver parameters. The following are the time-out parameters for applications and services. The following are the UI effects. The SPI_SETUIEFFECTS value is used to enable or disable all UI effects at once. This table contains the complete list of UI effect values. The following are the window parameters.",
                    "possible_constants": []
                },
                {
                    "name": "uiParam",
                    "type": "UINT",
                    "description": "Type: UINT A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "pvParam",
                    "type": "PVOID",
                    "description": "Type: PVOID A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.",
                    "possible_constants": []
                },
                {
                    "name": "fWinIni",
                    "type": "UINT",
                    "description": "Type: UINT If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change. This parameter can be zero if you do not want to update the user profile or broadcast the WM_SETTINGCHANGE message, or it can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SystemParametersInfoForDpi",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfofordpi",
            "description": "",
            "parameters": [
                {
                    "name": "uiAction",
                    "type": "UINT",
                    "description": "The system-wide parameter to be retrieved. This function is only intended for use with SPI_GETICONTITLELOGFONT, SPI_GETICONMETRICS, or SPI_GETNONCLIENTMETRICS. See SystemParametersInfo for more information on these values.",
                    "possible_constants": []
                },
                {
                    "name": "uiParam",
                    "type": "UINT",
                    "description": "A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "pvParam",
                    "type": "PVOID",
                    "description": "A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.",
                    "possible_constants": []
                },
                {
                    "name": "fWinIni",
                    "type": "UINT",
                    "description": "Has no effect for with this API. This parameter only has an effect if you're setting parameter.",
                    "possible_constants": []
                },
                {
                    "name": "dpi",
                    "type": "UINT",
                    "description": "The DPI to use for scaling the metric.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "SystemParametersInfoW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfow",
            "description": "",
            "parameters": [
                {
                    "name": "uiAction",
                    "type": "UINT",
                    "description": "Type: UINT The system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters: The following are the accessibility parameters. The following are the desktop parameters. The following are the icon parameters. The following are the input parameters. They include parameters related to the keyboard, mouse, pen, input language, and the warning beeper. The following are the menu parameters. The following are the power parameters. Beginning with Windows Server\u00a02008 and Windows\u00a0Vista, these power parameters are not supported. Instead, to determine the current display power state, an application should register for GUID_MONITOR_POWER_STATE notifications. To determine the current display power down time-out, an application should register for notification of changes to the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. For more information, see Registering for Power Events. Windows Server\u00a02003 and Windows\u00a0XP/2000:\u00a0\u00a0To determine the current display power state, use the following power parameters. The following are the screen saver parameters. The following are the time-out parameters for applications and services. The following are the UI effects. The SPI_SETUIEFFECTS value is used to enable or disable all UI effects at once. This table contains the complete list of UI effect values. The following are the window parameters.",
                    "possible_constants": []
                },
                {
                    "name": "uiParam",
                    "type": "UINT",
                    "description": "Type: UINT A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.",
                    "possible_constants": []
                },
                {
                    "name": "pvParam",
                    "type": "PVOID",
                    "description": "Type: PVOID A parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.",
                    "possible_constants": []
                },
                {
                    "name": "fWinIni",
                    "type": "UINT",
                    "description": "Type: UINT If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change. This parameter can be zero if you do not want to update the user profile or broadcast the WM_SETTINGCHANGE message, or it can be one or more of the following values.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TabbedTextOutA",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tabbedtextouta",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The x-coordinate of the starting point of the string, in logical units.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The y-coordinate of the starting point of the string, in logical units.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCSTR",
                    "description": "A pointer to the character string to draw. The string does not need to be zero-terminated, since nCount specifies the length of the string.",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "The length of the string pointed to by lpString.",
                    "possible_constants": []
                },
                {
                    "name": "nTabPositions",
                    "type": "int",
                    "description": "The number of values in the array of tab-stop positions. [in] lpnTabStopPositions A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.",
                    "possible_constants": []
                },
                {
                    "name": "*lpnTabStopPositions",
                    "type": "const INT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nTabOrigin",
                    "type": "int",
                    "description": "The x-coordinate of the starting position from which tabs are expanded, in logical units.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TabbedTextOutW",
            "return_type": "LONG",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tabbedtextoutw",
            "description": "",
            "parameters": [
                {
                    "name": "hdc",
                    "type": "HDC",
                    "description": "A handle to the device context.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "The x-coordinate of the starting point of the string, in logical units.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "The y-coordinate of the starting point of the string, in logical units.",
                    "possible_constants": []
                },
                {
                    "name": "lpString",
                    "type": "LPCWSTR",
                    "description": "A pointer to the character string to draw. The string does not need to be zero-terminated, since nCount specifies the length of the string.",
                    "possible_constants": []
                },
                {
                    "name": "chCount",
                    "type": "int",
                    "description": "The length of the string pointed to by lpString.",
                    "possible_constants": []
                },
                {
                    "name": "nTabPositions",
                    "type": "int",
                    "description": "The number of values in the array of tab-stop positions. [in] lpnTabStopPositions A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.",
                    "possible_constants": []
                },
                {
                    "name": "*lpnTabStopPositions",
                    "type": "const INT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "nTabOrigin",
                    "type": "int",
                    "description": "The x-coordinate of the starting position from which tabs are expanded, in logical units.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TileWindows",
            "return_type": "WORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tilewindows",
            "description": "",
            "parameters": [
                {
                    "name": "hwndParent",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed.",
                    "possible_constants": []
                },
                {
                    "name": "wHow",
                    "type": "UINT",
                    "description": "Type: UINT The tiling flags. This parameter can be one of the following values\u00e2\u0080\u0094optionally combined with MDITILE_SKIPDISABLED to prevent disabled MDI child windows from being tiled. [in, optional] lpRect Type: const RECT* A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. If this parameter is NULL, the client area of the parent window is used.",
                    "possible_constants": []
                },
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cKids",
                    "type": "UINT",
                    "description": "Type: UINT The number of elements in the array specified by the lpKids parameter. This parameter is ignored if lpKids is NULL. [in, optional] lpKids Type: const HWND* An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged.",
                    "possible_constants": []
                },
                {
                    "name": "*lpKids",
                    "type": "const HWND",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ToAscii",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-toascii",
            "description": "",
            "parameters": [
                {
                    "name": "uVirtKey",
                    "type": "UINT",
                    "description": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
                    "possible_constants": []
                },
                {
                    "name": "uScanCode",
                    "type": "UINT",
                    "description": "Type: UINT The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed). [in, optional] lpKeyState Type: const BYTE* A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed). The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored. [out] lpChar Type: LPWORD A pointer to the buffer that receives the translated character (or two characters packed into a single WORD value, where the low-order byte contains the first character and the high-order byte contains the second character).",
                    "possible_constants": []
                },
                {
                    "name": "*lpKeyState",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "lpChar",
                    "type": "LPWORD",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT This parameter must be 1 if a menu is active, or 0 otherwise.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ToAsciiEx",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-toasciiex",
            "description": "",
            "parameters": [
                {
                    "name": "uVirtKey",
                    "type": "UINT",
                    "description": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
                    "possible_constants": []
                },
                {
                    "name": "uScanCode",
                    "type": "UINT",
                    "description": "Type: UINT The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed). [in, optional] lpKeyState Type: const BYTE* A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed). The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCOLL LOCK keys is ignored. [out] lpChar Type: LPWORD A pointer to the buffer that receives the translated character (or two characters packed into a single WORD value, where the low-order byte contains the first character and the high-order byte contains the second character).",
                    "possible_constants": []
                },
                {
                    "name": "*lpKeyState",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "lpChar",
                    "type": "LPWORD",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT This parameter must be 1 if a menu is active, zero otherwise.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier to use to translate the code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TOUCH_COORD_TO_PIXEL",
            "return_type": "void",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-touch_coord_to_pixel",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "ToUnicode",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicode",
            "description": "",
            "parameters": [
                {
                    "name": "wVirtKey",
                    "type": "UINT",
                    "description": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
                    "possible_constants": []
                },
                {
                    "name": "wScanCode",
                    "type": "UINT",
                    "description": "Type: UINT The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up. [in, optional] lpKeyState Type: const BYTE* A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down. The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored. See GetKeyboardState for more info. [out] pwszBuff Type: LPWSTR The buffer that receives the translated character or characters as array of UTF-16 code units. This buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated. You can use the return value of this method to determine how many characters were written.",
                    "possible_constants": []
                },
                {
                    "name": "*lpKeyState",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "pwszBuff",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchBuff",
                    "type": "int",
                    "description": "Type: int The size, in characters, of the buffer pointed to by the pwszBuff parameter.",
                    "possible_constants": []
                },
                {
                    "name": "wFlags",
                    "type": "UINT",
                    "description": "Type: UINT The behavior of the function. If bit 0 is set, a menu is active. In this mode Alt+Numeric keypad key combinations are not handled. If bit 2 is set, keyboard state is not changed (Windows\u00a010, version 1607 and newer) All other bits (through 31) are reserved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ToUnicodeEx",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-tounicodeex",
            "description": "",
            "parameters": [
                {
                    "name": "wVirtKey",
                    "type": "UINT",
                    "description": "Type: UINT The virtual-key code to be translated. See Virtual-Key Codes.",
                    "possible_constants": []
                },
                {
                    "name": "wScanCode",
                    "type": "UINT",
                    "description": "Type: UINT The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up. [in] lpKeyState Type: const BYTE* A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down. The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored. See GetKeyboardState for more info. [out] pwszBuff Type: LPWSTR The buffer that receives the translated character or characters as array of UTF-16 code units. This buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated. You can use the return value of this method to determine how many characters were written.",
                    "possible_constants": []
                },
                {
                    "name": "*lpKeyState",
                    "type": "const BYTE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "pwszBuff",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "cchBuff",
                    "type": "int",
                    "description": "Type: int The size, in characters, of the buffer pointed to by the pwszBuff parameter.",
                    "possible_constants": []
                },
                {
                    "name": "wFlags",
                    "type": "UINT",
                    "description": "Type: UINT The behavior of the function. If bit 0 is set, a menu is active. In this mode Alt+Numeric keypad key combinations are not handled. If bit 1 is set, ToUnicodeEx will translate scancodes marked as key break events in addition to its usual treatment of key make events. If bit 2 is set, keyboard state is not changed (Windows\u00a010, version 1607 and newer) All other bits (through 31) are reserved.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL The input locale identifier used to translate the specified code. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TrackMouseEvent",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackmouseevent",
            "description": "",
            "parameters": [
                {
                    "name": "lpEventTrack",
                    "type": "LPTRACKMOUSEEVENT",
                    "description": "Type: LPTRACKMOUSEEVENT A pointer to a TRACKMOUSEEVENT structure that contains tracking information.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TrackPopupMenu",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackpopupmenu",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create a new shortcut menu, or by calling GetSubMenu to retrieve a handle to a submenu associated with an existing menu item.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Use zero of more of these flags to specify function options. Use one of the following flags to specify how the function positions the shortcut menu horizontally. Use one of the following flags to specify how the function positions the shortcut menu vertically. Use the following flags to control discovery of the user selection without having to set up a parent window for the menu. Use one of the following flags to specify which mouse button the shortcut menu tracks. Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation. For any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo. Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu. For right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "Type: int The horizontal location of the shortcut menu, in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "Type: int The vertical location of the shortcut menu, in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "nReserved",
                    "type": "int",
                    "description": "Type: int Reserved; must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the uFlags parameter, the function does not send messages to the window identified by hWnd. However, you must still pass a window handle in hWnd. It can be any window handle from your application. [in, optional] prcRect Type: const RECT* Ignored.",
                    "possible_constants": []
                },
                {
                    "name": "*prcRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TrackPopupMenuEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackpopupmenuex",
            "description": "",
            "parameters": [
                {
                    "name": "hMenu",
                    "type": "HMENU",
                    "description": "Type: HMENU A handle to the shortcut menu to be displayed. This handle can be obtained by calling the CreatePopupMenu function to create a new shortcut menu or by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item.",
                    "possible_constants": []
                },
                {
                    "name": "uFlags",
                    "type": "UINT",
                    "description": "Type: UINT Specifies function options. Use one of the following flags to specify how the function positions the shortcut menu horizontally. Use one of the following flags to specify how the function positions the shortcut menu vertically. Use the following flags to control discovery of the user selection without having to set up a parent window for the menu. Use one of the following flags to specify which mouse button the shortcut menu tracks. Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation. For any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo. Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu. Use one of the following flags to specify whether to accommodate horizontal or vertical alignment. The excluded rectangle is a portion of the screen that the menu should not overlap; it is specified by the lptpm parameter. For right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right.",
                    "possible_constants": []
                },
                {
                    "name": "x",
                    "type": "int",
                    "description": "Type: int The horizontal location of the shortcut menu, in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "y",
                    "type": "int",
                    "description": "Type: int The vertical location of the shortcut menu, in screen coordinates.",
                    "possible_constants": []
                },
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the fuFlags parameter, the function does not send messages to the window identified by hwnd. However, you must still pass a window handle in hwnd. It can be any window handle from your application.",
                    "possible_constants": []
                },
                {
                    "name": "lptpm",
                    "type": "LPTPMPARAMS",
                    "description": "Type: LPTPMPARAMS A pointer to a TPMPARAMS structure that specifies an area of the screen the menu should not overlap. This parameter can be NULL.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TranslateAcceleratorA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translateacceleratora",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be translated.",
                    "possible_constants": []
                },
                {
                    "name": "hAccTable",
                    "type": "HACCEL",
                    "description": "Type: HACCEL A handle to the accelerator table. The accelerator table must have been loaded by a call to the LoadAccelerators function or created by a call to the CreateAcceleratorTable function.",
                    "possible_constants": []
                },
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue using the GetMessage or PeekMessage function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TranslateAcceleratorW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translateacceleratorw",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window whose messages are to be translated.",
                    "possible_constants": []
                },
                {
                    "name": "hAccTable",
                    "type": "HACCEL",
                    "description": "Type: HACCEL A handle to the accelerator table. The accelerator table must have been loaded by a call to the LoadAccelerators function or created by a call to the CreateAcceleratorTable function.",
                    "possible_constants": []
                },
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to an MSG structure that contains message information retrieved from the calling thread's message queue using the GetMessage or PeekMessage function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TranslateMDISysAccel",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemdisysaccel",
            "description": "",
            "parameters": [
                {
                    "name": "hWndClient",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the MDI client window.",
                    "possible_constants": []
                },
                {
                    "name": "lpMsg",
                    "type": "LPMSG",
                    "description": "Type: LPMSG A pointer to a message retrieved by using the GetMessage or PeekMessage function. The message must be an MSG structure and contain message information from the application's message queue.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "TranslateMessage",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage",
            "description": "",
            "parameters": [
                {
                    "name": "*lpMsg",
                    "type": "const MSG",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnhookWindowsHookEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unhookwindowshookex",
            "description": "",
            "parameters": [
                {
                    "name": "hhk",
                    "type": "HHOOK",
                    "description": "Type: HHOOK A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnhookWinEvent",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unhookwinevent",
            "description": "",
            "parameters": [
                {
                    "name": "hWinEventHook",
                    "type": "HWINEVENTHOOK",
                    "description": "Type: HWINEVENTHOOK Handle to the event hook returned in the previous call to SetWinEventHook.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnionRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unionrect",
            "description": "",
            "parameters": [
                {
                    "name": "lprcDst",
                    "type": "LPRECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc1",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*lprcSrc2",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnloadKeyboardLayout",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unloadkeyboardlayout",
            "description": "",
            "parameters": [
                {
                    "name": "hkl",
                    "type": "HKL",
                    "description": "Type: HKL The input locale identifier to be unloaded.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterClassA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassa",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module that created the class.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterClassW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassw",
            "description": "",
            "parameters": [
                {
                    "name": "lpClassName",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.",
                    "possible_constants": []
                },
                {
                    "name": "hInstance",
                    "type": "HINSTANCE",
                    "description": "Type: HINSTANCE A handle to the instance of the module that created the class.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterDeviceNotification",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterdevicenotification",
            "description": "",
            "parameters": [
                {
                    "name": "Handle",
                    "type": "HDEVNOTIFY",
                    "description": "Device notification handle returned by the\nRegisterDeviceNotification function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterHotKey",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterhotkey",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.",
                    "possible_constants": []
                },
                {
                    "name": "id",
                    "type": "int",
                    "description": "Type: int The identifier of the hot key to be freed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterPointerInputTarget",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpointerinputtarget",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Window to be un-registered as a global redirection target on its desktop.",
                    "possible_constants": []
                },
                {
                    "name": "pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "Type of pointer input to no longer be redirected to the specified window. This is any valid and supported value from the POINTER_INPUT_TYPE  enumeration. Note that the generic PT_POINTER type and the PT_MOUSE type are not valid in this parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterPointerInputTargetEx",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpointerinputtargetex",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "Not supported.",
                    "possible_constants": []
                },
                {
                    "name": "pointerType",
                    "type": "POINTER_INPUT_TYPE",
                    "description": "Not supported.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterPowerSettingNotification",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterpowersettingnotification",
            "description": "",
            "parameters": [
                {
                    "name": "Handle",
                    "type": "HPOWERNOTIFY",
                    "description": "The handle returned from the RegisterPowerSettingNotification function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterSuspendResumeNotification",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregistersuspendresumenotification",
            "description": "",
            "parameters": [
                {
                    "name": "Handle",
                    "type": "HPOWERNOTIFY",
                    "description": "A handle to a registration obtained by calling the RegisterSuspendResumeNotification function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UnregisterTouchWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregistertouchwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hwnd",
                    "type": "HWND",
                    "description": "The handle of the window. The function fails with ERROR_ACCESS_DENIED if the calling thread does not own the specified window.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UpdateLayeredWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-updatelayeredwindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Type: HWND A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function. Windows\u00a08:\u00a0\u00a0The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.",
                    "possible_constants": []
                },
                {
                    "name": "hdcDst",
                    "type": "HDC",
                    "description": "Type: HDC A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the GetDC function. It is used for palette color matching when the window contents are updated. If hdcDst is NULL, the default palette will be used. If hdcSrc is NULL, hdcDst must be NULL. [in, optional] pptDst Type: POINT* A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, pptDst can be NULL. [in, optional] psize Type: SIZE* A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, psize can be NULL. If hdcSrc is NULL, psize must be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pptDst",
                    "type": "POINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "*psize",
                    "type": "SIZE",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "hdcSrc",
                    "type": "HDC",
                    "description": "Type: HDC A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the CreateCompatibleDC function. If the shape and visual context of the window are not changing, hdcSrc can be NULL. [in, optional] pptSrc Type: POINT* A pointer to a structure that specifies the location of the layer in the device context. If hdcSrc is NULL, pptSrc should be NULL.",
                    "possible_constants": []
                },
                {
                    "name": "*pptSrc",
                    "type": "POINT",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "crKey",
                    "type": "COLORREF",
                    "description": "Type: COLORREF A structure that specifies the color key to be used when composing the layered window. To generate a COLORREF, use the RGB macro. [in, optional] pblend Type: BLENDFUNCTION* A pointer to a structure that specifies the transparency value to be used when composing the layered window.",
                    "possible_constants": []
                },
                {
                    "name": "*pblend",
                    "type": "BLENDFUNCTION",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "dwFlags",
                    "type": "DWORD",
                    "description": "Type: DWORD This parameter can be one of the following values. If hdcSrc is NULL, dwFlags should be zero.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UpdateWindow",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-updatewindow",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window to be updated.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "UserHandleGrantAccess",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-userhandlegrantaccess",
            "description": "",
            "parameters": [
                {
                    "name": "hUserHandle",
                    "type": "HANDLE",
                    "description": "A handle to the User object.",
                    "possible_constants": []
                },
                {
                    "name": "hJob",
                    "type": "HANDLE",
                    "description": "A handle to the job to be granted access to the User handle. The\nCreateJobObject or\nOpenJobObject function returns this handle.",
                    "possible_constants": []
                },
                {
                    "name": "bGrant",
                    "type": "BOOL",
                    "description": "If this parameter is TRUE, all processes associated with the job can recognize and use the handle. If the parameter is FALSE, the processes cannot use the handle.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ValidateRect",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-validaterect",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window whose update region is to be modified. If this parameter is NULL, the system invalidates and redraws all windows and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure before the function returns. [in] lpRect Pointer to a RECT structure that contains the client coordinates of the rectangle to be removed from the update region. If this parameter is NULL, the entire client area is removed.",
                    "possible_constants": []
                },
                {
                    "name": "*lpRect",
                    "type": "const RECT",
                    "description": "",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "ValidateRgn",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-validatergn",
            "description": "",
            "parameters": [
                {
                    "name": "hWnd",
                    "type": "HWND",
                    "description": "Handle to the window whose update region is to be modified.",
                    "possible_constants": []
                },
                {
                    "name": "hRgn",
                    "type": "HRGN",
                    "description": "Handle to a region that defines the area to be removed from the update region. If this parameter is NULL, the entire client area is removed.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "VkKeyScanA",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscana",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: TCHAR The character to be translated into a virtual-key code.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "VkKeyScanExA",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanexa",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "CHAR",
                    "description": "Type: TCHAR The character to be translated into a virtual-key code.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "VkKeyScanExW",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanexw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": "Type: TCHAR The character to be translated into a virtual-key code.",
                    "possible_constants": []
                },
                {
                    "name": "dwhkl",
                    "type": "HKL",
                    "description": "Type: HKL Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "VkKeyScanW",
            "return_type": "SHORT",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-vkkeyscanw",
            "description": "",
            "parameters": [
                {
                    "name": "ch",
                    "type": "WCHAR",
                    "description": "Type: TCHAR The character to be translated into a virtual-key code.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WaitForInputIdle",
            "return_type": "DWORD",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-waitforinputidle",
            "description": "",
            "parameters": [
                {
                    "name": "hProcess",
                    "type": "HANDLE",
                    "description": "A handle to the process. If this process is a console application or does not have a message queue,\nWaitForInputIdle returns immediately.",
                    "possible_constants": []
                },
                {
                    "name": "dwMilliseconds",
                    "type": "DWORD",
                    "description": "The time-out interval, in milliseconds. If dwMilliseconds is INFINITE, the function does not return until the process is idle.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WaitMessage",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-waitmessage",
            "description": "",
            "parameters": [],
            "flags": []
        },
        {
            "name": "WindowFromDC",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfromdc",
            "description": "",
            "parameters": [
                {
                    "name": "hDC",
                    "type": "HDC",
                    "description": "Handle to the device context from which a handle to the associated window is to be retrieved.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WindowFromPhysicalPoint",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfromphysicalpoint",
            "description": "",
            "parameters": [
                {
                    "name": "Point",
                    "type": "POINT",
                    "description": "Type: POINT The physical coordinates of the point.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WindowFromPoint",
            "return_type": "HWND",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-windowfrompoint",
            "description": "",
            "parameters": [
                {
                    "name": "Point",
                    "type": "POINT",
                    "description": "Type: POINT The point to be checked.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WinHelpA",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-winhelpa",
            "description": "",
            "parameters": [
                {
                    "name": "hWndMain",
                    "type": "HWND",
                    "description": " Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.",
                    "possible_constants": []
                },
                {
                    "name": "lpszHelp",
                    "type": "LPCSTR",
                    "description": " Type: LPCTSTR The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display. The file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.",
                    "possible_constants": []
                },
                {
                    "name": "uCommand",
                    "type": "UINT",
                    "description": " Type: UINT The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "ULONG_PTR",
                    "description": " Type: ULONG_PTR Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "WinHelpW",
            "return_type": "BOOL",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-winhelpw",
            "description": "",
            "parameters": [
                {
                    "name": "hWndMain",
                    "type": "HWND",
                    "description": " Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.",
                    "possible_constants": []
                },
                {
                    "name": "lpszHelp",
                    "type": "LPCWSTR",
                    "description": " Type: LPCTSTR The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display. The file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.",
                    "possible_constants": []
                },
                {
                    "name": "uCommand",
                    "type": "UINT",
                    "description": " Type: UINT The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section.",
                    "possible_constants": []
                },
                {
                    "name": "dwData",
                    "type": "ULONG_PTR",
                    "description": " Type: ULONG_PTR Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "wsprintfA",
            "return_type": "int WINAPIV",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfa",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the Remarks section. ... One or more optional arguments. The number and type of argument parameters depend on the corresponding format-control specifications in the lpFmt parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "wsprintfW",
            "return_type": "int WINAPIV",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfw",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the Remarks section. ... One or more optional arguments. The number and type of argument parameters depend on the corresponding format-control specifications in the lpFmt parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "wvsprintfA",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wvsprintfa",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "LPSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPCSTR",
                    "description": "Type: LPCTSTR The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the wsprintf function.",
                    "possible_constants": []
                },
                {
                    "name": "arglist",
                    "type": "va_list",
                    "description": "Type: va_list Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the\nlpFmt parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        },
        {
            "name": "wvsprintfW",
            "return_type": "int",
            "msdn": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wvsprintfw",
            "description": "",
            "parameters": [
                {
                    "name": "unnamedParam1",
                    "type": "LPWSTR",
                    "description": "",
                    "possible_constants": []
                },
                {
                    "name": "unnamedParam2",
                    "type": "LPCWSTR",
                    "description": "Type: LPCTSTR The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the wsprintf function.",
                    "possible_constants": []
                },
                {
                    "name": "arglist",
                    "type": "va_list",
                    "description": "Type: va_list Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the\nlpFmt parameter.",
                    "possible_constants": []
                }
            ],
            "flags": []
        }
    ]
}